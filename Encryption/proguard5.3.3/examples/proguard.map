proguard.ArgumentWordReader -> a:
    java.lang.String[] arguments -> a
    int index -> a
    void <init>(java.lang.String[],java.io.File) -> <init>
    java.lang.String nextLine() -> a
    java.lang.String lineLocationDescription() -> b
proguard.AssumeNoSideEffectsChecker -> b:
    proguard.classfile.util.WarningPrinter notePrinter -> a
    void <init>(proguard.classfile.util.WarningPrinter) -> <init>
    void checkClassSpecifications(java.util.List) -> a
    proguard.classfile.visitor.ClassPoolVisitor createClassPoolVisitor(java.util.List,proguard.classfile.visitor.ClassVisitor,proguard.classfile.visitor.MemberVisitor,boolean,boolean,boolean) -> a
    proguard.classfile.visitor.ClassPoolVisitor createClassPoolVisitor(java.util.List,proguard.classfile.visitor.ClassVisitor,proguard.classfile.visitor.MemberVisitor) -> a
    proguard.classfile.visitor.ClassPoolVisitor createClassPoolVisitor(proguard.KeepClassSpecification,proguard.classfile.visitor.ClassVisitor,proguard.classfile.visitor.MemberVisitor) -> a
    proguard.classfile.visitor.ClassPoolVisitor createClassPoolVisitor(proguard.ClassSpecification,proguard.classfile.visitor.ClassVisitor,proguard.classfile.visitor.MemberVisitor) -> a
    proguard.classfile.visitor.ClassVisitor createCombinedClassVisitor(proguard.ClassSpecification,proguard.classfile.visitor.ClassVisitor,proguard.classfile.visitor.MemberVisitor) -> a
    void addMemberVisitors(java.util.List,boolean,proguard.classfile.visitor.MultiClassVisitor,proguard.classfile.visitor.MemberVisitor) -> a
    proguard.classfile.visitor.ClassVisitor createClassMemberTester(java.util.List,boolean,proguard.classfile.visitor.ClassVisitor) -> a
    proguard.classfile.visitor.ClassVisitor createClassVisitor(proguard.MemberSpecification,boolean,proguard.classfile.visitor.MemberVisitor) -> a
    boolean containsWildCards(java.lang.String) -> f
    proguard.io.DataEntryReader wrapInJarReader(proguard.io.DataEntryReader,boolean,java.util.List,java.lang.String) -> a
    proguard.io.DataEntryWriter wrapInJarWriter(proguard.io.DataEntryWriter,boolean,java.util.List,java.lang.String,boolean) -> a
    java.util.Set unknownPackageNames(java.io.LineNumberReader) -> a
    java.lang.String uniquePackageNames(java.util.Set) -> a
    java.lang.String trimSuffix(java.lang.String,char) -> a
    boolean containsPrefix(java.util.Set,java.lang.String) -> a
    proguard.classfile.instruction.Instruction create(byte[],int) -> a
    int accessLevel(int) -> a
    int accessFlags(int) -> b
    int replaceAccessFlags(int,int) -> a
    void checkMagicNumber(int) -> a
    java.lang.String externalClassVersion(int) -> a
    void checkVersionNumbers(int) -> b
    java.lang.String internalClassName(java.lang.String) -> a
    java.lang.String externalFullClassDescription(int,java.lang.String) -> a
    java.lang.String externalClassName(java.lang.String) -> b
    java.lang.String externalBaseType(java.lang.String) -> c
    java.lang.String externalShortClassName(java.lang.String) -> d
    boolean isInternalArrayType(java.lang.String) -> a
    int internalArrayTypeDimensionCount(java.lang.String) -> a
    boolean isInternalArrayInterfaceName(java.lang.String) -> b
    boolean isInternalPrimitiveType(char) -> a
    boolean isInternalCategory2Type(java.lang.String) -> c
    boolean isInternalClassType(java.lang.String) -> d
    java.lang.String internalTypeFromClassName(java.lang.String) -> e
    java.lang.String internalArrayTypeFromClassName(java.lang.String,int) -> a
    java.lang.String internalClassNameFromClassType(java.lang.String) -> f
    boolean isInitializer(java.lang.String) -> e
    java.lang.String internalMethodReturnType(java.lang.String) -> g
    int internalMethodParameterCount(java.lang.String) -> b
    int internalMethodParameterSize(java.lang.String,int) -> a
    int internalMethodParameterSize(java.lang.String,boolean) -> a
    int internalTypeSize(java.lang.String) -> c
    java.lang.String internalType(java.lang.String) -> h
    java.lang.String externalType(java.lang.String) -> i
    java.lang.String internalMethodDescriptor(java.lang.String,java.util.List) -> a
    java.lang.String externalFullFieldDescription(int,java.lang.String,java.lang.String) -> a
    java.lang.String externalFullMethodDescription(java.lang.String,int,java.lang.String,java.lang.String) -> a
    java.lang.String externalClassAccessFlags(int,java.lang.String) -> b
    java.lang.String externalFieldAccessFlags(int,java.lang.String) -> c
    java.lang.String externalMethodAccessFlags(int,java.lang.String) -> d
    java.lang.String externalMethodReturnType(java.lang.String) -> j
    java.lang.String externalMethodArguments(java.lang.String) -> k
    java.lang.String internalPackageName(java.lang.String) -> l
    java.lang.String internalPackagePrefix(java.lang.String) -> m
    int[] extendArray(int[],int) -> a
    int[] ensureArraySize(int[],int,int) -> a
    java.lang.Object[] add(java.lang.Object[],int,java.lang.Object) -> a
    java.lang.Object[] extendArray(java.lang.Object[],int) -> a
    java.lang.String commaSeparatedString(java.util.List,boolean) -> a
    java.util.List commaSeparatedList(java.lang.String) -> a
    int skipWhitespace(java.lang.String,int) -> b
proguard.ClassMemberChecker -> c:
    proguard.classfile.ClassPool programClassPool -> a
    proguard.classfile.util.WarningPrinter notePrinter -> a
    void <init>(proguard.classfile.ClassPool,proguard.classfile.util.WarningPrinter) -> <init>
    void checkClassSpecifications(java.util.List) -> a
    void checkMemberSpecifications(proguard.classfile.Clazz,java.util.List,boolean) -> a
    boolean containsWildCards(java.lang.String) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
proguard.ClassPath -> d:
    java.util.List classPathEntries -> a
    void <init>() -> <init>
    boolean hasOutput() -> a
    proguard.ClassPathEntry get(int) -> a
    int size() -> a
proguard.ClassPathEntry -> e:
    java.io.File file -> a
    boolean output -> a
    java.util.List filter -> a
    java.util.List apkFilter -> b
    java.util.List jarFilter -> c
    java.util.List aarFilter -> d
    java.util.List warFilter -> e
    java.util.List earFilter -> f
    java.util.List zipFilter -> g
    java.lang.String cachedName -> a
    void <init>(java.io.File,boolean) -> <init>
    java.lang.String getName() -> a
    java.lang.String getUncachedName() -> b
    boolean isApk() -> a
    boolean hasExtension(java.lang.String) -> a
    boolean isFiltered() -> b
    java.lang.String toString() -> toString
proguard.ClassSpecification -> f:
    java.lang.String comments -> a
    int requiredSetAccessFlags -> a
    int requiredUnsetAccessFlags -> b
    java.lang.String annotationType -> b
    java.lang.String className -> c
    java.lang.String extendsAnnotationType -> d
    java.lang.String extendsClassName -> e
    java.util.List fieldSpecifications -> a
    java.util.List methodSpecifications -> b
    void <init>() -> <init>
    void <init>(proguard.ClassSpecification) -> <init>
    void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> <init>
    void <init>(java.lang.String,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.util.List,java.util.List) -> <init>
    void addField(proguard.MemberSpecification) -> a
    void addMethod(proguard.MemberSpecification) -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object clone() -> clone
proguard.Configuration -> g:
    java.io.File STD_OUT -> a
    proguard.ClassPath programJars -> a
    proguard.ClassPath libraryJars -> b
    boolean skipNonPublicLibraryClasses -> a
    boolean skipNonPublicLibraryClassMembers -> b
    java.util.List keepDirectories -> a
    int targetClassVersion -> a
    long lastModified -> a
    java.util.List keep -> b
    java.io.File printSeeds -> b
    boolean shrink -> c
    java.io.File printUsage -> c
    java.util.List whyAreYouKeeping -> c
    boolean optimize -> d
    java.util.List optimizations -> d
    int optimizationPasses -> b
    java.util.List assumeNoSideEffects -> e
    boolean allowAccessModification -> e
    boolean mergeInterfacesAggressively -> f
    boolean obfuscate -> g
    java.io.File printMapping -> d
    java.io.File applyMapping -> e
    java.io.File obfuscationDictionary -> f
    java.io.File classObfuscationDictionary -> g
    java.io.File packageObfuscationDictionary -> h
    boolean overloadAggressively -> h
    boolean useUniqueClassMemberNames -> i
    boolean useMixedCaseClassNames -> j
    java.util.List keepPackageNames -> f
    java.lang.String flattenPackageHierarchy -> a
    java.lang.String repackageClasses -> b
    java.util.List keepAttributes -> g
    boolean keepParameterNames -> k
    java.lang.String newSourceFileAttribute -> c
    java.util.List adaptClassStrings -> h
    java.util.List adaptResourceFileNames -> i
    java.util.List adaptResourceFileContents -> j
    boolean preverify -> l
    boolean microEdition -> m
    boolean verbose -> n
    java.util.List note -> k
    java.util.List warn -> l
    boolean ignoreWarnings -> o
    java.io.File printConfiguration -> i
    java.io.File dump -> j
    void <init>() -> <init>
    void <clinit>() -> <clinit>
proguard.ConfigurationChecker -> h:
    proguard.Configuration configuration -> a
    void <init>(proguard.Configuration) -> <init>
    void check() -> a
    void checkConflicts(proguard.ClassPath,proguard.ClassPath) -> a
proguard.ConfigurationConstants -> i:
    java.lang.String JAR_SEPARATOR_KEYWORD -> a
    void <clinit>() -> <clinit>
proguard.ConfigurationParser -> j:
    proguard.WordReader reader -> a
    java.util.Properties properties -> a
    java.lang.String nextWord -> a
    java.lang.String lastComments -> b
    void <init>(java.lang.String[],java.util.Properties) -> <init>
    void <init>(java.lang.String[],java.io.File,java.util.Properties) -> <init>
    void <init>(proguard.WordReader,java.util.Properties) -> <init>
    void close() -> a
    proguard.ClassPath parseClassPathArgument(proguard.ClassPath,boolean) -> a
    int parseIntegerArgument() -> a
    java.io.File parseFile() -> a
    java.io.File parseOptionalFile() -> b
    java.lang.String parseOptionalArgument() -> a
    boolean parseNoArgument(boolean) -> a
    java.util.List parseKeepClassSpecificationArguments(java.util.List,boolean,boolean,boolean) -> a
    java.util.List parseClassSpecificationArguments(java.util.List) -> a
    proguard.ClassSpecification parseClassSpecificationArguments() -> a
    void parseMemberSpecificationArguments(java.lang.String,proguard.ClassSpecification) -> a
    java.util.List parseCommaSeparatedList(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,boolean,java.util.List) -> a
    java.io.File file(java.lang.String) -> a
    java.lang.String replaceSystemProperties(java.lang.String) -> a
    void readNextWord(java.lang.String,boolean,boolean) -> a
    void readNextWord(boolean) -> a
    boolean configurationEnd(boolean) -> b
    void checkJavaIdentifier(java.lang.String) -> a
    void checkFieldAccessFlags(int,int) -> a
    void checkMethodAccessFlags(int,int) -> b
proguard.ConfigurationWriter -> k:
    java.lang.String[] KEEP_OPTIONS -> a
    java.io.PrintWriter writer -> a
    void <init>(java.io.OutputStream) -> <init>
    void <init>(java.io.PrintWriter) -> <init>
    void write(proguard.Configuration) -> a
    void writeJarOptions(java.lang.String,java.lang.String,proguard.ClassPath) -> a
    boolean writeFilter(boolean,java.util.List) -> a
    void writeOption(java.lang.String,boolean) -> a
    void writeOption(java.lang.String,java.util.List,boolean) -> a
    void writeOption(java.lang.String,java.lang.String,boolean) -> a
    void writeOption(java.lang.String,java.io.File) -> a
    void writeOptions(java.lang.String,java.util.List) -> a
    void writeOption(java.lang.String,proguard.ClassSpecification) -> a
    void writeMethodSpecification(java.util.List) -> a
    java.lang.String relativeFileName(java.io.File) -> a
    java.lang.String quotedString(java.lang.String) -> a
    void <clinit>() -> <clinit>
proguard.DescriptorKeepChecker -> l:
    proguard.classfile.ClassPool programClassPool -> a
    proguard.classfile.ClassPool libraryClassPool -> b
    proguard.classfile.util.WarningPrinter notePrinter -> a
    proguard.classfile.Clazz referencingClass -> a
    proguard.classfile.Member referencingMember -> a
    boolean isField -> a
    void <init>(proguard.classfile.ClassPool,proguard.classfile.ClassPool,proguard.classfile.util.WarningPrinter) -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.DuplicateClassPrinter -> m:
    proguard.classfile.util.WarningPrinter notePrinter -> a
    void <init>(proguard.classfile.util.WarningPrinter) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.FileWordReader -> n:
    void <init>(java.io.File) -> <init>
proguard.FullyQualifiedClassNameChecker -> o:
    java.lang.String INVALID_CLASS_EXTENSION -> a
    proguard.classfile.ClassPool programClassPool -> a
    proguard.classfile.ClassPool libraryClassPool -> b
    proguard.classfile.util.WarningPrinter notePrinter -> a
    void <init>(proguard.classfile.ClassPool,proguard.classfile.ClassPool,proguard.classfile.util.WarningPrinter) -> <init>
    void checkClassSpecifications(java.util.List) -> a
    void checkMemberSpecifications(java.util.List,boolean) -> a
    void checkType(java.lang.String) -> a
    void checkClassName(java.lang.String) -> b
    void visitAnyClass(proguard.classfile.Clazz) -> a
    void <clinit>() -> <clinit>
proguard.GetAnnotationChecker -> p:
    proguard.classfile.util.WarningPrinter notePrinter -> a
    void <init>(proguard.classfile.util.WarningPrinter) -> <init>
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodrefConstant) -> a
proguard.GetEnclosingClassChecker -> q:
    proguard.classfile.util.WarningPrinter notePrinter -> a
    void <init>(proguard.classfile.util.WarningPrinter) -> <init>
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodrefConstant) -> a
proguard.GetEnclosingMethodChecker -> r:
    proguard.classfile.util.WarningPrinter notePrinter -> a
    void <init>(proguard.classfile.util.WarningPrinter) -> <init>
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodrefConstant) -> a
proguard.GetSignatureChecker -> s:
    proguard.classfile.util.WarningPrinter notePrinter -> a
    void <init>(proguard.classfile.util.WarningPrinter) -> <init>
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodrefConstant) -> a
proguard.Initializer -> t:
    proguard.Configuration configuration -> a
    void <init>(proguard.Configuration) -> <init>
    void execute(proguard.classfile.ClassPool,proguard.classfile.ClassPool) -> a
    proguard.util.StringMatcher createClassNoteExceptionMatcher(java.util.List) -> a
    proguard.util.StringMatcher createClassMemberNoteExceptionMatcher(java.util.List,boolean) -> a
proguard.InputReader -> u:
    proguard.Configuration configuration -> a
    void <init>(proguard.Configuration) -> <init>
    void readInput(java.lang.String,proguard.ClassPath,proguard.io.DataEntryReader) -> a
    void readInput(java.lang.String,proguard.ClassPath,int,int,proguard.io.DataEntryReader) -> a
proguard.KeepClassMemberChecker -> v:
    proguard.classfile.util.WarningPrinter notePrinter -> a
    void <init>(proguard.classfile.util.WarningPrinter) -> <init>
    void checkClassSpecifications(java.util.List) -> a
proguard.KeepClassSpecification -> w:
    boolean markClasses -> a
    boolean markConditionally -> b
    boolean markDescriptorClasses -> c
    boolean allowShrinking -> d
    boolean allowOptimization -> e
    boolean allowObfuscation -> f
    void <init>(boolean,boolean,boolean,boolean,boolean,boolean,proguard.ClassSpecification) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.Object clone() -> clone
proguard.LibraryKeepChecker -> x:
    proguard.classfile.ClassPool programClassPool -> a
    proguard.classfile.ClassPool libraryClassPool -> b
    proguard.classfile.util.WarningPrinter notePrinter -> a
    java.lang.String keepName -> a
    void <init>(proguard.classfile.ClassPool,proguard.classfile.ClassPool,proguard.classfile.util.WarningPrinter) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.LineWordReader -> y:
    java.io.LineNumberReader reader -> a
    java.lang.String description -> a
    void <init>(java.io.LineNumberReader,java.lang.String,java.io.File) -> <init>
    java.lang.String nextLine() -> a
    java.lang.String lineLocationDescription() -> b
    void close() -> a
proguard.MemberSpecification -> z:
    int requiredSetAccessFlags -> a
    int requiredUnsetAccessFlags -> b
    java.lang.String annotationType -> a
    java.lang.String name -> b
    java.lang.String descriptor -> c
    void <init>() -> <init>
    void <init>(int,int,java.lang.String,java.lang.String,java.lang.String) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
proguard.OutputWriter -> A:
    proguard.Configuration configuration -> a
    void <init>(proguard.Configuration) -> <init>
    void execute(proguard.classfile.ClassPool) -> a
    java.util.Map createPackagePrefixMap(proguard.classfile.ClassPool) -> a
proguard.ParseException -> B:
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
proguard.ProGuard -> proguard.ProGuard:
    proguard.Configuration configuration -> a
    proguard.classfile.ClassPool programClassPool -> a
    proguard.classfile.ClassPool libraryClassPool -> b
    void <init>(proguard.Configuration) -> <init>
    void execute() -> a
    void shrink() -> b
    void dump() -> c
    java.io.PrintStream createPrintStream(java.io.File) -> a
    void closePrintStream(java.io.PrintStream) -> a
    java.lang.String fileName(java.io.File) -> a
    void main(java.lang.String[]) -> main
proguard.SeedPrinter -> C:
    java.io.PrintStream ps -> a
    void <init>(java.io.PrintStream) -> <init>
proguard.Targeter -> D:
    proguard.Configuration configuration -> a
    void <init>(proguard.Configuration) -> <init>
    void execute(proguard.classfile.ClassPool) -> a
proguard.UpToDateChecker -> E:
    proguard.Configuration configuration -> a
    void <init>(proguard.Configuration) -> <init>
    boolean check() -> a
proguard.UpToDateChecker$ModificationTimeChecker -> F:
    long inputModificationTime -> a
    long outputModificationTime -> b
    void <init>() -> <init>
    void updateInputModificationTime(java.io.File) -> a
    void updateOutputModificationTime(java.io.File) -> b
    void updateModificationTime(java.io.File,boolean) -> a
    void updateInputModificationTime(long) -> a
    void updateOutputModificationTime(long) -> b
    void checkModificationTimes() -> a
    void <init>(byte) -> <init>
proguard.WordReader -> G:
    java.io.File baseDir -> a
    proguard.WordReader includeWordReader -> a
    java.lang.String currentLine -> a
    int currentLineLength -> a
    int currentIndex -> b
    java.lang.String currentWord -> b
    java.lang.String currentComments -> c
    void <init>(java.io.File) -> <init>
    void setBaseDir(java.io.File) -> a
    java.io.File getBaseDir() -> a
    void includeWordReader(proguard.WordReader) -> a
    java.lang.String nextWord(boolean) -> a
    java.lang.String lastComments() -> c
    java.lang.String locationDescription() -> d
    java.lang.String nextLine() -> a
    java.lang.String lineLocationDescription() -> b
    void close() -> a
    boolean isOption(char) -> a
    boolean isComment(char) -> b
    boolean isDelimiter(char) -> c
proguard.classfile.ClassPool -> H:
    java.util.Map classes -> a
    void <init>() -> <init>
    void clear() -> a
    proguard.classfile.Clazz getClass(java.lang.String) -> a
    int size() -> a
    void accept(proguard.classfile.visitor.ClassPoolVisitor) -> a
    void classesAccept(proguard.classfile.visitor.ClassVisitor) -> a
    void classesAcceptAlphabetically(proguard.classfile.visitor.ClassVisitor) -> b
proguard.classfile.Clazz -> I:
    int getAccessFlags() -> a
    java.lang.String getName() -> a
    java.lang.String getSuperName() -> b
    int getInterfaceCount() -> b
    java.lang.String getInterfaceName(int) -> a
    int getTag(int) -> a
    java.lang.String getString(int) -> b
    java.lang.String getStringString(int) -> c
    java.lang.String getClassName(int) -> d
    java.lang.String getName(int) -> e
    java.lang.String getType(int) -> f
    java.lang.String getRefClassName(int) -> g
    java.lang.String getRefName(int) -> h
    java.lang.String getRefType(int) -> i
    void addSubClass(proguard.classfile.Clazz) -> a
    proguard.classfile.Clazz getInterface(int) -> a
    boolean extends_(proguard.classfile.Clazz) -> a
    boolean extends_(java.lang.String) -> a
    boolean extendsOrImplements(proguard.classfile.Clazz) -> b
    boolean extendsOrImplements(java.lang.String) -> b
    proguard.classfile.Field findField(java.lang.String,java.lang.String) -> a
    proguard.classfile.Method findMethod(java.lang.String,java.lang.String) -> a
    void accept(proguard.classfile.visitor.ClassVisitor) -> a
    void hierarchyAccept(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor) -> a
    void constantPoolEntriesAccept(proguard.classfile.constant.visitor.ConstantVisitor) -> a
    void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor) -> a
    void superClassConstantAccept(proguard.classfile.constant.visitor.ConstantVisitor) -> b
    void interfaceConstantsAccept(proguard.classfile.constant.visitor.ConstantVisitor) -> c
    void fieldsAccept(proguard.classfile.visitor.MemberVisitor) -> a
    void methodsAccept(proguard.classfile.visitor.MemberVisitor) -> b
    void methodAccept(java.lang.String,java.lang.String,proguard.classfile.visitor.MemberVisitor) -> a
    void attributesAccept(proguard.classfile.attribute.visitor.AttributeVisitor) -> a
proguard.classfile.Field -> J:
proguard.classfile.LibraryClass -> K:
    int u2accessFlags -> a
    java.lang.String thisClassName -> a
    java.lang.String superClassName -> b
    java.lang.String[] interfaceNames -> a
    proguard.classfile.LibraryField[] fields -> a
    proguard.classfile.LibraryMethod[] methods -> a
    proguard.classfile.Clazz superClass -> a
    proguard.classfile.Clazz[] interfaceClasses -> a
    proguard.classfile.Clazz[] subClasses -> b
    java.lang.Object visitorInfo -> a
    void <init>() -> <init>
    int getAccessFlags() -> a
    java.lang.String getName() -> a
    java.lang.String getSuperName() -> b
    int getInterfaceCount() -> b
    java.lang.String getInterfaceName(int) -> a
    int getTag(int) -> a
    java.lang.String getString(int) -> b
    java.lang.String getStringString(int) -> c
    java.lang.String getClassName(int) -> d
    java.lang.String getName(int) -> e
    java.lang.String getType(int) -> f
    java.lang.String getRefClassName(int) -> g
    java.lang.String getRefName(int) -> h
    java.lang.String getRefType(int) -> i
    void addSubClass(proguard.classfile.Clazz) -> a
    proguard.classfile.Clazz getInterface(int) -> a
    boolean extends_(proguard.classfile.Clazz) -> a
    boolean extends_(java.lang.String) -> a
    boolean extendsOrImplements(proguard.classfile.Clazz) -> b
    boolean extendsOrImplements(java.lang.String) -> b
    proguard.classfile.Field findField(java.lang.String,java.lang.String) -> a
    proguard.classfile.Method findMethod(java.lang.String,java.lang.String) -> a
    void accept(proguard.classfile.visitor.ClassVisitor) -> a
    void hierarchyAccept(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor) -> a
    void constantPoolEntriesAccept(proguard.classfile.constant.visitor.ConstantVisitor) -> a
    void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor) -> a
    void superClassConstantAccept(proguard.classfile.constant.visitor.ConstantVisitor) -> b
    void interfaceConstantsAccept(proguard.classfile.constant.visitor.ConstantVisitor) -> c
    void fieldsAccept(proguard.classfile.visitor.MemberVisitor) -> a
    void methodsAccept(proguard.classfile.visitor.MemberVisitor) -> b
    void methodAccept(java.lang.String,java.lang.String,proguard.classfile.visitor.MemberVisitor) -> a
    boolean mayHaveImplementations(proguard.classfile.Method) -> a
    void attributesAccept(proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    java.lang.Object getVisitorInfo() -> a
    void setVisitorInfo(java.lang.Object) -> a
    java.lang.String toString() -> toString
proguard.classfile.LibraryField -> L:
    proguard.classfile.Clazz referencedClass -> a
    void <init>() -> <init>
    void accept(proguard.classfile.LibraryClass,proguard.classfile.visitor.MemberVisitor) -> a
    void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor) -> a
proguard.classfile.LibraryMember -> M:
    int u2accessFlags -> a
    java.lang.String name -> a
    java.lang.String descriptor -> b
    java.lang.Object visitorInfo -> a
    void <init>() -> <init>
    void accept(proguard.classfile.LibraryClass,proguard.classfile.visitor.MemberVisitor) -> a
    int getAccessFlags() -> a
    java.lang.String getName(proguard.classfile.Clazz) -> a
    java.lang.String getDescriptor(proguard.classfile.Clazz) -> b
    void accept(proguard.classfile.Clazz,proguard.classfile.visitor.MemberVisitor) -> a
    java.lang.Object getVisitorInfo() -> a
    void setVisitorInfo(java.lang.Object) -> a
proguard.classfile.LibraryMethod -> N:
    proguard.classfile.Clazz[] referencedClasses -> a
    void <init>() -> <init>
    void accept(proguard.classfile.LibraryClass,proguard.classfile.visitor.MemberVisitor) -> a
    void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor) -> a
proguard.classfile.Member -> O:
    int getAccessFlags() -> a
    java.lang.String getName(proguard.classfile.Clazz) -> a
    java.lang.String getDescriptor(proguard.classfile.Clazz) -> b
    void accept(proguard.classfile.Clazz,proguard.classfile.visitor.MemberVisitor) -> a
    void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor) -> a
proguard.classfile.Method -> P:
proguard.classfile.ProgramClass -> Q:
    int u4magic -> a
    int u4version -> b
    int u2constantPoolCount -> c
    proguard.classfile.constant.Constant[] constantPool -> a
    int u2accessFlags -> d
    int u2thisClass -> e
    int u2superClass -> f
    int u2interfacesCount -> g
    int[] u2interfaces -> a
    int u2fieldsCount -> h
    proguard.classfile.ProgramField[] fields -> a
    int u2methodsCount -> i
    proguard.classfile.ProgramMethod[] methods -> a
    int u2attributesCount -> j
    proguard.classfile.attribute.Attribute[] attributes -> a
    proguard.classfile.Clazz[] subClasses -> a
    java.lang.Object visitorInfo -> a
    void <init>() -> <init>
    int getAccessFlags() -> a
    java.lang.String getName() -> a
    java.lang.String getSuperName() -> b
    int getInterfaceCount() -> b
    java.lang.String getInterfaceName(int) -> a
    int getTag(int) -> a
    java.lang.String getString(int) -> b
    java.lang.String getStringString(int) -> c
    java.lang.String getClassName(int) -> d
    java.lang.String getName(int) -> e
    java.lang.String getType(int) -> f
    java.lang.String getRefClassName(int) -> g
    java.lang.String getRefName(int) -> h
    java.lang.String getRefType(int) -> i
    void addSubClass(proguard.classfile.Clazz) -> a
    proguard.classfile.Clazz getSuperClass() -> a
    proguard.classfile.Clazz getInterface(int) -> a
    boolean extends_(proguard.classfile.Clazz) -> a
    boolean extends_(java.lang.String) -> a
    boolean extendsOrImplements(proguard.classfile.Clazz) -> b
    boolean extendsOrImplements(java.lang.String) -> b
    proguard.classfile.Field findField(java.lang.String,java.lang.String) -> a
    proguard.classfile.Method findMethod(java.lang.String,java.lang.String) -> a
    void accept(proguard.classfile.visitor.ClassVisitor) -> a
    void hierarchyAccept(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor) -> a
    void subclassesAccept(proguard.classfile.visitor.ClassVisitor) -> b
    void constantPoolEntriesAccept(proguard.classfile.constant.visitor.ConstantVisitor) -> a
    void constantPoolEntryAccept(int,proguard.classfile.constant.visitor.ConstantVisitor) -> a
    void thisClassConstantAccept(proguard.classfile.constant.visitor.ConstantVisitor) -> d
    void superClassConstantAccept(proguard.classfile.constant.visitor.ConstantVisitor) -> b
    void interfaceConstantsAccept(proguard.classfile.constant.visitor.ConstantVisitor) -> c
    void fieldsAccept(proguard.classfile.visitor.MemberVisitor) -> a
    void methodsAccept(proguard.classfile.visitor.MemberVisitor) -> b
    void methodAccept(java.lang.String,java.lang.String,proguard.classfile.visitor.MemberVisitor) -> a
    boolean mayHaveImplementations(proguard.classfile.Method) -> a
    void attributesAccept(proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    java.lang.Object getVisitorInfo() -> a
    void setVisitorInfo(java.lang.Object) -> a
    java.lang.String toString() -> toString
proguard.classfile.ProgramField -> R:
    proguard.classfile.Clazz referencedClass -> a
    void <init>() -> <init>
    void <init>(int,int,int,int,proguard.classfile.attribute.Attribute[],proguard.classfile.Clazz) -> <init>
    void accept(proguard.classfile.ProgramClass,proguard.classfile.visitor.MemberVisitor) -> a
    void attributesAccept(proguard.classfile.ProgramClass,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor) -> a
proguard.classfile.ProgramMember -> S:
    int u2accessFlags -> a
    int u2nameIndex -> b
    int u2descriptorIndex -> c
    int u2attributesCount -> d
    proguard.classfile.attribute.Attribute[] attributes -> a
    java.lang.Object visitorInfo -> a
    void <init>() -> <init>
    void <init>(int,int,int,int,proguard.classfile.attribute.Attribute[]) -> <init>
    void accept(proguard.classfile.ProgramClass,proguard.classfile.visitor.MemberVisitor) -> a
    void attributesAccept(proguard.classfile.ProgramClass,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    int getAccessFlags() -> a
    java.lang.String getName(proguard.classfile.Clazz) -> a
    java.lang.String getDescriptor(proguard.classfile.Clazz) -> b
    void accept(proguard.classfile.Clazz,proguard.classfile.visitor.MemberVisitor) -> a
    java.lang.Object getVisitorInfo() -> a
    void setVisitorInfo(java.lang.Object) -> a
proguard.classfile.ProgramMethod -> T:
    proguard.classfile.Clazz[] referencedClasses -> a
    void <init>() -> <init>
    void <init>(int,int,int,int,proguard.classfile.attribute.Attribute[],proguard.classfile.Clazz[]) -> <init>
    void accept(proguard.classfile.ProgramClass,proguard.classfile.visitor.MemberVisitor) -> a
    void attributesAccept(proguard.classfile.ProgramClass,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor) -> a
proguard.classfile.VisitorAccepter -> U:
    java.lang.Object getVisitorInfo() -> a
    void setVisitorInfo(java.lang.Object) -> a
proguard.classfile.attribute.Attribute -> V:
    int u2attributeNameIndex -> a
    java.lang.Object visitorInfo -> a
    void <init>() -> <init>
    void <init>(int) -> <init>
    java.lang.String getAttributeName(proguard.classfile.Clazz) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    java.lang.Object getVisitorInfo() -> a
    void setVisitorInfo(java.lang.Object) -> a
proguard.classfile.attribute.BootstrapMethodInfo -> W:
    int u2methodHandleIndex -> a
    int u2methodArgumentCount -> b
    int[] u2methodArguments -> a
    java.lang.Object visitorInfo -> a
    void <init>() -> <init>
    void <init>(int,int,int[]) -> <init>
    void methodArgumentsAccept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor) -> a
    java.lang.Object getVisitorInfo() -> a
    void setVisitorInfo(java.lang.Object) -> a
proguard.classfile.attribute.BootstrapMethodsAttribute -> X:
    int u2bootstrapMethodsCount -> b
    proguard.classfile.attribute.BootstrapMethodInfo[] bootstrapMethods -> a
    void <init>() -> <init>
    void <init>(int,int,proguard.classfile.attribute.BootstrapMethodInfo[]) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void bootstrapMethodEntriesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.BootstrapMethodInfoVisitor) -> a
    void bootstrapMethodEntryAccept(proguard.classfile.Clazz,int,proguard.classfile.attribute.visitor.BootstrapMethodInfoVisitor) -> a
proguard.classfile.attribute.CodeAttribute -> Y:
    int u2maxStack -> b
    int u2maxLocals -> c
    int u4codeLength -> d
    byte[] code -> a
    int u2exceptionTableLength -> e
    proguard.classfile.attribute.ExceptionInfo[] exceptionTable -> a
    int u2attributesCount -> f
    proguard.classfile.attribute.Attribute[] attributes -> a
    void <init>() -> <init>
    void <init>(int,int,int,int,byte[],int,proguard.classfile.attribute.ExceptionInfo[],int,proguard.classfile.attribute.Attribute[]) -> <init>
    proguard.classfile.attribute.Attribute getAttribute(proguard.classfile.Clazz,java.lang.String) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void instructionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.instruction.visitor.InstructionVisitor) -> a
    void instructionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,int,int,proguard.classfile.instruction.visitor.InstructionVisitor) -> a
    void exceptionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.ExceptionInfoVisitor) -> a
    void exceptionsAccept(proguard.classfile.Clazz,proguard.classfile.Method,int,int,proguard.classfile.attribute.visitor.ExceptionInfoVisitor) -> a
    void attributesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor) -> b
proguard.classfile.attribute.ConstantValueAttribute -> Z:
    int u2constantValueIndex -> b
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
proguard.classfile.attribute.DeprecatedAttribute -> aa:
    void <init>() -> <init>
    void <init>(int) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
proguard.classfile.attribute.EnclosingMethodAttribute -> ab:
    int u2classIndex -> b
    int u2nameAndTypeIndex -> c
    proguard.classfile.Clazz referencedClass -> a
    proguard.classfile.Method referencedMethod -> a
    void <init>() -> <init>
    void <init>(int,int,int) -> <init>
    java.lang.String getName(proguard.classfile.Clazz) -> b
    java.lang.String getType(proguard.classfile.Clazz) -> c
    void referencedClassAccept(proguard.classfile.visitor.ClassVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
proguard.classfile.attribute.ExceptionInfo -> ac:
    int u2startPC -> a
    int u2endPC -> b
    int u2handlerPC -> c
    int u2catchType -> d
    java.lang.Object visitorInfo -> a
    void <init>() -> <init>
    void <init>(int,int,int,int) -> <init>
    boolean isApplicable(int) -> a
    java.lang.Object getVisitorInfo() -> a
    void setVisitorInfo(java.lang.Object) -> a
proguard.classfile.attribute.ExceptionsAttribute -> ad:
    int u2exceptionIndexTableLength -> b
    int[] u2exceptionIndexTable -> a
    void <init>() -> <init>
    void <init>(int,int,int[]) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void exceptionEntriesAccept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor) -> a
proguard.classfile.attribute.ExtendedLineNumberInfo -> ae:
    java.lang.String source -> a
    void <init>() -> <init>
    void <init>(int,int,java.lang.String) -> <init>
    java.lang.String getSource() -> a
proguard.classfile.attribute.InnerClassesAttribute -> af:
    int u2classesCount -> b
    proguard.classfile.attribute.InnerClassesInfo[] classes -> a
    void <init>() -> <init>
    void <init>(int,int,proguard.classfile.attribute.InnerClassesInfo[]) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void innerClassEntriesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.InnerClassesInfoVisitor) -> a
proguard.classfile.attribute.InnerClassesInfo -> ag:
    int u2innerClassIndex -> a
    int u2outerClassIndex -> b
    int u2innerNameIndex -> c
    int u2innerClassAccessFlags -> d
    java.lang.Object visitorInfo -> a
    void <init>() -> <init>
    void innerClassConstantAccept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor) -> a
    void outerClassConstantAccept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor) -> b
    void innerNameConstantAccept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor) -> c
    java.lang.Object getVisitorInfo() -> a
    void setVisitorInfo(java.lang.Object) -> a
proguard.classfile.attribute.LineNumberInfo -> ah:
    int u2startPC -> a
    int u2lineNumber -> b
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    java.lang.String getSource() -> a
proguard.classfile.attribute.LineNumberTableAttribute -> ai:
    int u2lineNumberTableLength -> b
    proguard.classfile.attribute.LineNumberInfo[] lineNumberTable -> a
    void <init>() -> <init>
    void <init>(int,int,proguard.classfile.attribute.LineNumberInfo[]) -> <init>
    int getLowestLineNumber() -> a
    int getHighestLineNumber() -> b
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void lineNumbersAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.LineNumberInfoVisitor) -> a
proguard.classfile.attribute.LocalVariableInfo -> aj:
    int u2startPC -> a
    int u2length -> b
    int u2nameIndex -> c
    int u2descriptorIndex -> d
    int u2index -> e
    proguard.classfile.Clazz referencedClass -> a
    java.lang.Object visitorInfo -> a
    void <init>() -> <init>
    void <init>(int,int,int,int,int) -> <init>
    java.lang.String getDescriptor(proguard.classfile.Clazz) -> a
    void referencedClassAccept(proguard.classfile.visitor.ClassVisitor) -> a
    java.lang.Object getVisitorInfo() -> a
    void setVisitorInfo(java.lang.Object) -> a
    int compareTo(java.lang.Object) -> compareTo
proguard.classfile.attribute.LocalVariableTableAttribute -> ak:
    int u2localVariableTableLength -> b
    proguard.classfile.attribute.LocalVariableInfo[] localVariableTable -> a
    void <init>() -> <init>
    void <init>(int,int,proguard.classfile.attribute.LocalVariableInfo[]) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void localVariablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.LocalVariableInfoVisitor) -> a
proguard.classfile.attribute.LocalVariableTypeInfo -> al:
    int u2startPC -> a
    int u2length -> b
    int u2nameIndex -> c
    int u2signatureIndex -> d
    int u2index -> e
    proguard.classfile.Clazz[] referencedClasses -> a
    java.lang.Object visitorInfo -> a
    void <init>() -> <init>
    void <init>(int,int,int,int,int) -> <init>
    java.lang.String getSignature(proguard.classfile.Clazz) -> a
    void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor) -> a
    java.lang.Object getVisitorInfo() -> a
    void setVisitorInfo(java.lang.Object) -> a
    int compareTo(java.lang.Object) -> compareTo
proguard.classfile.attribute.LocalVariableTypeTableAttribute -> am:
    int u2localVariableTypeTableLength -> b
    proguard.classfile.attribute.LocalVariableTypeInfo[] localVariableTypeTable -> a
    void <init>() -> <init>
    void <init>(int,int,proguard.classfile.attribute.LocalVariableTypeInfo[]) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void localVariablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.LocalVariableTypeInfoVisitor) -> a
proguard.classfile.attribute.MethodParametersAttribute -> an:
    int u1parametersCount -> b
    proguard.classfile.attribute.ParameterInfo[] parameters -> a
    void <init>() -> <init>
    void <init>(int,int,proguard.classfile.attribute.ParameterInfo[]) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void parametersAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.ParameterInfoVisitor) -> a
proguard.classfile.attribute.ParameterInfo -> ao:
    int u2nameIndex -> a
    int u2accessFlags -> b
    java.lang.Object visitorInfo -> a
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    java.lang.Object getVisitorInfo() -> a
    void setVisitorInfo(java.lang.Object) -> a
proguard.classfile.attribute.SignatureAttribute -> ap:
    int u2signatureIndex -> b
    proguard.classfile.Clazz[] referencedClasses -> a
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    java.lang.String getSignature(proguard.classfile.Clazz) -> b
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
proguard.classfile.attribute.SourceDirAttribute -> aq:
    int u2sourceDirIndex -> b
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
proguard.classfile.attribute.SourceFileAttribute -> ar:
    int u2sourceFileIndex -> b
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
proguard.classfile.attribute.SyntheticAttribute -> as:
    void <init>() -> <init>
    void <init>(int) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
proguard.classfile.attribute.UnknownAttribute -> at:
    int u4attributeLength -> b
    byte[] info -> a
    void <init>(int,int) -> <init>
    void <init>(int,int,byte[]) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
proguard.classfile.attribute.annotation.Annotation -> au:
    int u2typeIndex -> a
    int u2elementValuesCount -> b
    proguard.classfile.attribute.annotation.ElementValue[] elementValues -> a
    proguard.classfile.Clazz[] referencedClasses -> a
    java.lang.Object visitorInfo -> a
    void <init>() -> <init>
    void <init>(int,int,proguard.classfile.attribute.annotation.ElementValue[]) -> <init>
    java.lang.String getType(proguard.classfile.Clazz) -> a
    void elementValuesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.visitor.ElementValueVisitor) -> a
    java.lang.Object getVisitorInfo() -> a
    void setVisitorInfo(java.lang.Object) -> a
proguard.classfile.attribute.annotation.AnnotationDefaultAttribute -> av:
    proguard.classfile.attribute.annotation.ElementValue defaultValue -> a
    void <init>() -> <init>
    void <init>(int,proguard.classfile.attribute.annotation.ElementValue) -> <init>
    void defaultValueAccept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.visitor.ElementValueVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
proguard.classfile.attribute.annotation.AnnotationElementValue -> aw:
    proguard.classfile.attribute.annotation.Annotation annotationValue -> a
    void <init>() -> <init>
    void <init>(int,proguard.classfile.attribute.annotation.Annotation) -> <init>
    void annotationAccept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.visitor.AnnotationVisitor) -> a
    char getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.visitor.ElementValueVisitor) -> a
proguard.classfile.attribute.annotation.AnnotationsAttribute -> ax:
    int u2annotationsCount -> b
    proguard.classfile.attribute.annotation.Annotation[] annotations -> a
    void <init>() -> <init>
    void <init>(int,int,proguard.classfile.attribute.annotation.Annotation[]) -> <init>
    void annotationsAccept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.visitor.AnnotationVisitor) -> a
    void annotationsAccept(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.visitor.AnnotationVisitor) -> a
    void annotationsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.visitor.AnnotationVisitor) -> a
    void annotationsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.visitor.AnnotationVisitor) -> a
proguard.classfile.attribute.annotation.ArrayElementValue -> ay:
    int u2elementValuesCount -> a
    proguard.classfile.attribute.annotation.ElementValue[] elementValues -> a
    void <init>() -> <init>
    void <init>(int,int,proguard.classfile.attribute.annotation.ElementValue[]) -> <init>
    char getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.visitor.ElementValueVisitor) -> a
    void elementValuesAccept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.visitor.ElementValueVisitor) -> b
proguard.classfile.attribute.annotation.ClassElementValue -> az:
    int u2classInfoIndex -> a
    proguard.classfile.Clazz[] referencedClasses -> a
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    java.lang.String getClassName(proguard.classfile.Clazz) -> a
    void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor) -> a
    char getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.visitor.ElementValueVisitor) -> a
proguard.classfile.attribute.annotation.ConstantElementValue -> aA:
    char u1tag -> a
    int u2constantValueIndex -> a
    void <init>(char) -> <init>
    void <init>(char,int,int) -> <init>
    char getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.visitor.ElementValueVisitor) -> a
proguard.classfile.attribute.annotation.ElementValue -> aB:
    int u2elementNameIndex -> b
    proguard.classfile.Clazz referencedClass -> a
    proguard.classfile.Method referencedMethod -> a
    java.lang.Object visitorInfo -> a
    void <init>() -> <init>
    void <init>(int) -> <init>
    java.lang.String getMethodName(proguard.classfile.Clazz) -> b
    char getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.visitor.ElementValueVisitor) -> a
    void referencedMethodAccept(proguard.classfile.visitor.MemberVisitor) -> a
    java.lang.Object getVisitorInfo() -> a
    void setVisitorInfo(java.lang.Object) -> a
proguard.classfile.attribute.annotation.EnumConstantElementValue -> aC:
    int u2typeNameIndex -> a
    int u2constantNameIndex -> c
    proguard.classfile.Clazz[] referencedClasses -> a
    void <init>() -> <init>
    void <init>(int,int,int) -> <init>
    java.lang.String getTypeName(proguard.classfile.Clazz) -> a
    java.lang.String getConstantName(proguard.classfile.Clazz) -> c
    void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor) -> a
    char getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.visitor.ElementValueVisitor) -> a
proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute -> aD:
    int u1parametersCount -> b
    int[] u2parameterAnnotationsCount -> a
    proguard.classfile.attribute.annotation.Annotation[][] parameterAnnotations -> a
    void <init>() -> <init>
    void <init>(int,int,int[],proguard.classfile.attribute.annotation.Annotation[][]) -> <init>
    void annotationsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.visitor.AnnotationVisitor) -> a
proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute -> aE:
    void <init>() -> <init>
    void <init>(int,int,proguard.classfile.attribute.annotation.Annotation[]) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
proguard.classfile.attribute.annotation.RuntimeInvisibleParameterAnnotationsAttribute -> aF:
    void <init>() -> <init>
    void <init>(int,int,int[],proguard.classfile.attribute.annotation.Annotation[][]) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute -> aG:
    void <init>() -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute -> aH:
    void <init>() -> <init>
    void <init>(int,int,proguard.classfile.attribute.annotation.Annotation[]) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
proguard.classfile.attribute.annotation.RuntimeVisibleParameterAnnotationsAttribute -> aI:
    void <init>() -> <init>
    void <init>(int,int,int[],proguard.classfile.attribute.annotation.Annotation[][]) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute -> aJ:
    void <init>() -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
proguard.classfile.attribute.annotation.TypeAnnotation -> aK:
    proguard.classfile.attribute.annotation.target.TargetInfo targetInfo -> a
    proguard.classfile.attribute.annotation.TypePathInfo[] typePath -> a
    void <init>() -> <init>
    void targetInfoAccept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.target.visitor.TargetInfoVisitor) -> a
    void typePathInfosAccept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.visitor.TypePathInfoVisitor) -> a
proguard.classfile.attribute.annotation.TypeAnnotationsAttribute -> aL:
    void <init>() -> <init>
    void typeAnnotationsAccept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.visitor.TypeAnnotationVisitor) -> a
proguard.classfile.attribute.annotation.TypePathInfo -> aM:
    int u1typePathKind -> a
    int u1typeArgumentIndex -> b
    void <init>() -> <init>
proguard.classfile.attribute.annotation.target.CatchTargetInfo -> aN:
    int u2exceptionTableIndex -> a
    void <init>() -> <init>
    void <init>(byte) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.visitor.TargetInfoVisitor) -> a
proguard.classfile.attribute.annotation.target.EmptyTargetInfo -> aO:
    void <init>() -> <init>
    void <init>(byte) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.visitor.TargetInfoVisitor) -> a
proguard.classfile.attribute.annotation.target.FormalParameterTargetInfo -> aP:
    int u1formalParameterIndex -> a
    void <init>() -> <init>
    void <init>(byte) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.visitor.TargetInfoVisitor) -> a
proguard.classfile.attribute.annotation.target.LocalVariableTargetElement -> aQ:
    int u2startPC -> a
    int u2length -> b
    int u2index -> c
    void <init>() -> <init>
proguard.classfile.attribute.annotation.target.LocalVariableTargetInfo -> aR:
    int u2tableLength -> a
    proguard.classfile.attribute.annotation.target.LocalVariableTargetElement[] table -> a
    void <init>() -> <init>
    void <init>(byte) -> <init>
    void targetElementsAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.visitor.LocalVariableTargetElementVisitor) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.visitor.TargetInfoVisitor) -> a
proguard.classfile.attribute.annotation.target.OffsetTargetInfo -> aS:
    int u2offset -> a
    void <init>() -> <init>
    void <init>(byte) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.visitor.TargetInfoVisitor) -> a
proguard.classfile.attribute.annotation.target.SuperTypeTargetInfo -> aT:
    int u2superTypeIndex -> a
    void <init>() -> <init>
    void <init>(byte) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.visitor.TargetInfoVisitor) -> a
proguard.classfile.attribute.annotation.target.TargetInfo -> aU:
    byte u1targetType -> a
    void <init>() -> <init>
    void <init>(byte) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.visitor.TargetInfoVisitor) -> a
proguard.classfile.attribute.annotation.target.ThrowsTargetInfo -> aV:
    int u2throwsTypeIndex -> a
    void <init>() -> <init>
    void <init>(byte) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.visitor.TargetInfoVisitor) -> a
proguard.classfile.attribute.annotation.target.TypeArgumentTargetInfo -> aW:
    int u2offset -> a
    int u1typeArgumentIndex -> b
    void <init>() -> <init>
    void <init>(byte) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.visitor.TargetInfoVisitor) -> a
proguard.classfile.attribute.annotation.target.TypeParameterBoundTargetInfo -> aX:
    int u1typeParameterIndex -> a
    int u1boundIndex -> b
    void <init>() -> <init>
    void <init>(byte) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.visitor.TargetInfoVisitor) -> a
proguard.classfile.attribute.annotation.target.TypeParameterTargetInfo -> aY:
    int u1typeParameterIndex -> a
    void <init>() -> <init>
    void <init>(byte) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.visitor.TargetInfoVisitor) -> a
proguard.classfile.attribute.annotation.target.visitor.LocalVariableTargetElementVisitor -> aZ:
    void visitLocalVariableTargetElement$56d9656e(proguard.classfile.attribute.annotation.target.LocalVariableTargetElement) -> a
proguard.classfile.attribute.annotation.target.visitor.TargetInfoVisitor -> ba:
    void visitTypeParameterTargetInfo(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.TypeParameterTargetInfo) -> a
    void visitSuperTypeTargetInfo(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.SuperTypeTargetInfo) -> a
    void visitTypeParameterBoundTargetInfo(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.TypeParameterBoundTargetInfo) -> a
    void visitEmptyTargetInfo(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.EmptyTargetInfo) -> a
    void visitFormalParameterTargetInfo$d7bcaf4(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.FormalParameterTargetInfo) -> a
    void visitThrowsTargetInfo$430130d7(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.ThrowsTargetInfo) -> a
    void visitLocalVariableTargetInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.LocalVariableTargetInfo) -> a
    void visitCatchTargetInfo$1a2496f8(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.CatchTargetInfo) -> a
    void visitOffsetTargetInfo$5cfb828c(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.OffsetTargetInfo) -> a
    void visitTypeArgumentTargetInfo$4ff8d08(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.TypeArgumentTargetInfo) -> a
proguard.classfile.attribute.annotation.visitor.AllAnnotationVisitor -> bb:
    proguard.classfile.attribute.annotation.visitor.AnnotationVisitor annotationVisitor -> a
    void <init>(proguard.classfile.attribute.annotation.visitor.AnnotationVisitor) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
proguard.classfile.attribute.annotation.visitor.AllElementValueVisitor -> bc:
    boolean deep -> a
    proguard.classfile.attribute.annotation.visitor.ElementValueVisitor elementValueVisitor -> a
    void <init>(boolean,proguard.classfile.attribute.annotation.visitor.ElementValueVisitor) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute) -> a
    void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Method,int,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ConstantElementValue) -> a
    void visitEnumConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.EnumConstantElementValue) -> a
    void visitClassElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ClassElementValue) -> a
    void visitAnnotationElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.AnnotationElementValue) -> a
    void visitArrayElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ArrayElementValue) -> a
proguard.classfile.attribute.annotation.visitor.AnnotatedClassVisitor -> bd:
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    proguard.classfile.Clazz lastVisitedClass -> a
    void <init>(proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation) -> a
proguard.classfile.attribute.annotation.visitor.AnnotationToMemberVisitor -> be:
    proguard.classfile.visitor.MemberVisitor memberVisitor -> a
    proguard.classfile.Member lastVisitedMember -> a
    void <init>(proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Member,proguard.classfile.attribute.annotation.Annotation) -> a
proguard.classfile.attribute.annotation.visitor.AnnotationTypeFilter -> bf:
    proguard.util.StringMatcher regularExpressionMatcher -> a
    proguard.classfile.attribute.annotation.visitor.AnnotationVisitor annotationVisitor -> a
    void <init>(java.lang.String,proguard.classfile.attribute.annotation.visitor.AnnotationVisitor) -> <init>
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Method,int,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.Annotation) -> a
    boolean accepted(java.lang.String) -> a
proguard.classfile.attribute.annotation.visitor.AnnotationVisitor -> bg:
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Method,int,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.Annotation) -> a
proguard.classfile.attribute.annotation.visitor.ElementValueVisitor -> bh:
    void visitConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ConstantElementValue) -> a
    void visitEnumConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.EnumConstantElementValue) -> a
    void visitClassElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ClassElementValue) -> a
    void visitAnnotationElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.AnnotationElementValue) -> a
    void visitArrayElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ArrayElementValue) -> a
proguard.classfile.attribute.annotation.visitor.TypeAnnotationVisitor -> bi:
    void visitTypeAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation) -> a
proguard.classfile.attribute.annotation.visitor.TypePathInfoVisitor -> bj:
    void visitTypePathInfo$2ad727b0(proguard.classfile.attribute.annotation.TypePathInfo) -> a
proguard.classfile.attribute.preverification.DoubleType -> bk:
    void <init>() -> <init>
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    void stackAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    void variablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> b
    java.lang.String toString() -> toString
proguard.classfile.attribute.preverification.FloatType -> bl:
    void <init>() -> <init>
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    void stackAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    void variablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> b
    java.lang.String toString() -> toString
proguard.classfile.attribute.preverification.FullFrame -> bm:
    int variablesCount -> a
    proguard.classfile.attribute.preverification.VerificationType[] variables -> a
    int stackCount -> b
    proguard.classfile.attribute.preverification.VerificationType[] stack -> b
    void <init>() -> <init>
    void <init>(int,proguard.classfile.attribute.preverification.VerificationType[],proguard.classfile.attribute.preverification.VerificationType[]) -> <init>
    void <init>(int,int,proguard.classfile.attribute.preverification.VerificationType[],int,proguard.classfile.attribute.preverification.VerificationType[]) -> <init>
    void variablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    void stackAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> b
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.classfile.attribute.preverification.IntegerType -> bn:
    void <init>() -> <init>
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    void stackAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    void variablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> b
    java.lang.String toString() -> toString
proguard.classfile.attribute.preverification.LessZeroFrame -> bo:
    int choppedVariablesCount -> a
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(byte) -> <init>
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.classfile.attribute.preverification.LongType -> bp:
    void <init>() -> <init>
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    void stackAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    void variablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> b
    java.lang.String toString() -> toString
proguard.classfile.attribute.preverification.MoreZeroFrame -> bq:
    int additionalVariablesCount -> a
    proguard.classfile.attribute.preverification.VerificationType[] additionalVariables -> a
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(proguard.classfile.attribute.preverification.VerificationType[]) -> <init>
    void <init>(int,proguard.classfile.attribute.preverification.VerificationType[]) -> <init>
    void additionalVariablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.classfile.attribute.preverification.NullType -> br:
    void <init>() -> <init>
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    void stackAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    void variablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> b
    java.lang.String toString() -> toString
proguard.classfile.attribute.preverification.ObjectType -> bs:
    int u2classIndex -> a
    void <init>() -> <init>
    void <init>(int) -> <init>
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    void stackAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    void variablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.classfile.attribute.preverification.SameOneFrame -> bt:
    proguard.classfile.attribute.preverification.VerificationType stackItem -> a
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(proguard.classfile.attribute.preverification.VerificationType) -> <init>
    void stackItemAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.classfile.attribute.preverification.SameZeroFrame -> bu:
    void <init>() -> <init>
    void <init>(int) -> <init>
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor) -> a
    java.lang.String toString() -> toString
proguard.classfile.attribute.preverification.StackMapAttribute -> bv:
    int u2stackMapFramesCount -> b
    proguard.classfile.attribute.preverification.FullFrame[] stackMapFrames -> a
    void <init>() -> <init>
    void <init>(proguard.classfile.attribute.preverification.FullFrame[]) -> <init>
    void <init>(int,proguard.classfile.attribute.preverification.FullFrame[]) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void stackMapFramesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor) -> a
proguard.classfile.attribute.preverification.StackMapFrame -> bw:
    int u2offsetDelta -> c
    java.lang.Object visitorInfo -> a
    void <init>() -> <init>
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor) -> a
    java.lang.Object getVisitorInfo() -> a
    void setVisitorInfo(java.lang.Object) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.classfile.attribute.preverification.StackMapTableAttribute -> bx:
    int u2stackMapFramesCount -> b
    proguard.classfile.attribute.preverification.StackMapFrame[] stackMapFrames -> a
    void <init>() -> <init>
    void <init>(proguard.classfile.attribute.preverification.StackMapFrame[]) -> <init>
    void <init>(int,proguard.classfile.attribute.preverification.StackMapFrame[]) -> <init>
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.visitor.AttributeVisitor) -> a
    void stackMapFramesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor) -> a
proguard.classfile.attribute.preverification.TopType -> by:
    void <init>() -> <init>
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    void stackAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    void variablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> b
    java.lang.String toString() -> toString
proguard.classfile.attribute.preverification.UninitializedThisType -> bz:
    void <init>() -> <init>
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    void stackAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    void variablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> b
    java.lang.String toString() -> toString
proguard.classfile.attribute.preverification.UninitializedType -> bA:
    int u2newInstructionOffset -> a
    void <init>() -> <init>
    void <init>(int) -> <init>
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    void stackAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    void variablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.classfile.attribute.preverification.VerificationType -> bB:
    java.lang.Object visitorInfo -> a
    void <init>() -> <init>
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    void stackAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> a
    void variablesAccept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,int,proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor) -> b
    java.lang.Object getVisitorInfo() -> a
    void setVisitorInfo(java.lang.Object) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
proguard.classfile.attribute.preverification.VerificationTypeFactory -> bC:
    proguard.classfile.attribute.preverification.IntegerType INTEGER_TYPE -> a
    proguard.classfile.attribute.preverification.LongType LONG_TYPE -> a
    proguard.classfile.attribute.preverification.FloatType FLOAT_TYPE -> a
    proguard.classfile.attribute.preverification.DoubleType DOUBLE_TYPE -> a
    proguard.classfile.attribute.preverification.TopType TOP_TYPE -> a
    proguard.classfile.attribute.preverification.NullType NULL_TYPE -> a
    proguard.classfile.attribute.preverification.UninitializedThisType UNINITIALIZED_THIS_TYPE -> a
    proguard.classfile.attribute.preverification.IntegerType createIntegerType() -> a
    proguard.classfile.attribute.preverification.LongType createLongType() -> a
    proguard.classfile.attribute.preverification.FloatType createFloatType() -> a
    proguard.classfile.attribute.preverification.DoubleType createDoubleType() -> a
    proguard.classfile.attribute.preverification.TopType createTopType() -> a
    proguard.classfile.attribute.preverification.NullType createNullType() -> a
    proguard.classfile.attribute.preverification.UninitializedThisType createUninitializedThisType() -> a
    proguard.classfile.attribute.preverification.UninitializedType createUninitializedType(int) -> a
    proguard.classfile.attribute.preverification.ObjectType createObjectType(int) -> a
    void <clinit>() -> <clinit>
proguard.classfile.attribute.preverification.visitor.StackMapFrameVisitor -> bD:
    void visitSameZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.SameZeroFrame) -> a
    void visitSameOneFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.SameOneFrame) -> a
    void visitLessZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.LessZeroFrame) -> a
    void visitMoreZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.MoreZeroFrame) -> a
    void visitFullFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.FullFrame) -> a
proguard.classfile.attribute.preverification.visitor.VerificationTypeVisitor -> bE:
    void visitIntegerType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.IntegerType) -> a
    void visitFloatType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.FloatType) -> a
    void visitLongType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.LongType) -> a
    void visitDoubleType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.DoubleType) -> a
    void visitTopType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.TopType) -> a
    void visitObjectType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.ObjectType) -> a
    void visitNullType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.NullType) -> a
    void visitUninitializedType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.UninitializedType) -> a
    void visitUninitializedThisType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.UninitializedThisType) -> a
    void visitStackIntegerType$7bc2a91e(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.IntegerType) -> b
    void visitStackFloatType$35a8a37c(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.FloatType) -> b
    void visitStackLongType$1767fbc0(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.LongType) -> b
    void visitStackDoubleType$25235eb5(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.DoubleType) -> b
    void visitStackTopType$16ec47eb(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.TopType) -> b
    void visitStackObjectType$d4ae21d(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.ObjectType) -> b
    void visitStackNullType$2638f5ab(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.NullType) -> b
    void visitStackUninitializedType$62b00965(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.UninitializedType) -> b
    void visitStackUninitializedThisType$2b406167(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.UninitializedThisType) -> b
    void visitVariablesIntegerType$7bc2a91e(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.IntegerType) -> c
    void visitVariablesFloatType$35a8a37c(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.FloatType) -> c
    void visitVariablesLongType$1767fbc0(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.LongType) -> c
    void visitVariablesDoubleType$25235eb5(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.DoubleType) -> c
    void visitVariablesTopType$16ec47eb(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.TopType) -> c
    void visitVariablesObjectType$d4ae21d(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.ObjectType) -> c
    void visitVariablesNullType$2638f5ab(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.NullType) -> c
    void visitVariablesUninitializedType$62b00965(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.UninitializedType) -> c
    void visitVariablesUninitializedThisType$2b406167(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.UninitializedThisType) -> c
proguard.classfile.attribute.visitor.AllAttributeVisitor -> bF:
    boolean deep -> a
    proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor -> a
    void <init>(proguard.classfile.attribute.visitor.AttributeVisitor) -> <init>
    void <init>(boolean,proguard.classfile.attribute.visitor.AttributeVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramMember(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember) -> a
    void visitLibraryMember(proguard.classfile.LibraryClass,proguard.classfile.LibraryMember) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
proguard.classfile.attribute.visitor.AllBootstrapMethodInfoVisitor -> bG:
    proguard.classfile.attribute.visitor.BootstrapMethodInfoVisitor bootstrapMethodInfoVisitor -> a
    void <init>(proguard.classfile.attribute.visitor.BootstrapMethodInfoVisitor) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitBootstrapMethodsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodsAttribute) -> a
proguard.classfile.attribute.visitor.AllExceptionInfoVisitor -> bH:
    proguard.classfile.attribute.visitor.ExceptionInfoVisitor exceptionInfoVisitor -> a
    void <init>(proguard.classfile.attribute.visitor.ExceptionInfoVisitor) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
proguard.classfile.attribute.visitor.AllInnerClassesInfoVisitor -> bI:
    proguard.classfile.attribute.visitor.InnerClassesInfoVisitor innerClassesInfoVisitor -> a
    void <init>(proguard.classfile.attribute.visitor.InnerClassesInfoVisitor) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute) -> a
proguard.classfile.attribute.visitor.AllLineNumberInfoVisitor -> bJ:
    proguard.classfile.attribute.visitor.LineNumberInfoVisitor lineNumberInfoVisitor -> a
    void <init>(proguard.classfile.attribute.visitor.LineNumberInfoVisitor) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
proguard.classfile.attribute.visitor.AttributeNameFilter -> bK:
    proguard.util.StringMatcher regularExpressionMatcher -> a
    proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor -> a
    void <init>(java.lang.String,proguard.classfile.attribute.visitor.AttributeVisitor) -> <init>
    void <init>(java.util.List,proguard.classfile.attribute.visitor.AttributeVisitor) -> <init>
    void <init>(proguard.util.StringMatcher,proguard.classfile.attribute.visitor.AttributeVisitor) -> <init>
    void visitUnknownAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.UnknownAttribute) -> a
    void visitBootstrapMethodsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodsAttribute) -> a
    void visitSourceFileAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceFileAttribute) -> a
    void visitSourceDirAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceDirAttribute) -> a
    void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute) -> a
    void visitEnclosingMethodAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.EnclosingMethodAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitConstantValueAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.ConstantValueAttribute) -> a
    void visitMethodParametersAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.MethodParametersAttribute) -> a
    void visitExceptionsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.ExceptionsAttribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitStackMapAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapAttribute) -> a
    void visitStackMapTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapTableAttribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleParameterAnnotationsAttribute) -> a
    void visitRuntimeInvisibleParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleParameterAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> a
    boolean accepted(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
proguard.classfile.attribute.visitor.AttributeVisitor -> bL:
    void visitUnknownAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.UnknownAttribute) -> a
    void visitBootstrapMethodsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodsAttribute) -> a
    void visitSourceFileAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceFileAttribute) -> a
    void visitSourceDirAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceDirAttribute) -> a
    void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute) -> a
    void visitEnclosingMethodAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.EnclosingMethodAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitConstantValueAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.ConstantValueAttribute) -> a
    void visitMethodParametersAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.MethodParametersAttribute) -> a
    void visitExceptionsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.ExceptionsAttribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitStackMapAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapAttribute) -> a
    void visitStackMapTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapTableAttribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleParameterAnnotationsAttribute) -> a
    void visitRuntimeInvisibleParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleParameterAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> a
proguard.classfile.attribute.visitor.BootstrapMethodInfoVisitor -> bM:
    void visitBootstrapMethodInfo(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodInfo) -> a
proguard.classfile.attribute.visitor.ExceptionInfoVisitor -> bN:
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
proguard.classfile.attribute.visitor.InnerClassesInfoVisitor -> bO:
    void visitInnerClassesInfo(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesInfo) -> a
proguard.classfile.attribute.visitor.LineNumberInfoVisitor -> bP:
    void visitLineNumberInfo$22557afc(proguard.classfile.attribute.LineNumberInfo) -> a
proguard.classfile.attribute.visitor.LineNumberRangeFinder -> bQ:
    int lowestLineNumber -> b
    int highestLineNumber -> a
    boolean hasSource -> a
    void <init>() -> <init>
    void visitLineNumberInfo$22557afc(proguard.classfile.attribute.LineNumberInfo) -> a
proguard.classfile.attribute.visitor.LocalVariableInfoVisitor -> bR:
    void visitLocalVariableInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableInfo) -> a
proguard.classfile.attribute.visitor.LocalVariableTypeInfoVisitor -> bS:
    void visitLocalVariableTypeInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeInfo) -> a
proguard.classfile.attribute.visitor.MultiAttributeVisitor -> bT:
    proguard.classfile.attribute.visitor.AttributeVisitor[] attributeVisitors -> a
    void <init>() -> <init>
    void <init>(proguard.classfile.attribute.visitor.AttributeVisitor[]) -> <init>
    void visitUnknownAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.UnknownAttribute) -> a
    void visitBootstrapMethodsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodsAttribute) -> a
    void visitSourceFileAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceFileAttribute) -> a
    void visitSourceDirAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceDirAttribute) -> a
    void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute) -> a
    void visitEnclosingMethodAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.EnclosingMethodAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitConstantValueAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.ConstantValueAttribute) -> a
    void visitMethodParametersAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.MethodParametersAttribute) -> a
    void visitExceptionsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.ExceptionsAttribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitStackMapAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapAttribute) -> a
    void visitStackMapTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapTableAttribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleParameterAnnotationsAttribute) -> a
    void visitRuntimeInvisibleParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleParameterAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> a
proguard.classfile.attribute.visitor.NonEmptyAttributeFilter -> bU:
    proguard.classfile.attribute.visitor.AttributeVisitor attributeVisitor -> a
    void <init>(proguard.classfile.attribute.visitor.AttributeVisitor) -> <init>
    void visitUnknownAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.UnknownAttribute) -> a
    void visitBootstrapMethodsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodsAttribute) -> a
    void visitSourceFileAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceFileAttribute) -> a
    void visitSourceDirAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceDirAttribute) -> a
    void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute) -> a
    void visitEnclosingMethodAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.EnclosingMethodAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitConstantValueAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.ConstantValueAttribute) -> a
    void visitMethodParametersAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.MethodParametersAttribute) -> a
    void visitExceptionsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.ExceptionsAttribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitStackMapAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapAttribute) -> a
    void visitStackMapTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapTableAttribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleParameterAnnotationsAttribute) -> a
    void visitRuntimeInvisibleParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleParameterAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> a
proguard.classfile.attribute.visitor.ParameterInfoVisitor -> bV:
    void visitParameterInfo(proguard.classfile.Clazz,proguard.classfile.Method,int,proguard.classfile.attribute.ParameterInfo) -> a
proguard.classfile.attribute.visitor.RequiredAttributeFilter -> bW:
    proguard.classfile.attribute.visitor.AttributeVisitor requiredAttributeVisitor -> a
    proguard.classfile.attribute.visitor.AttributeVisitor optionalAttributeVisitor -> b
    void <init>(proguard.classfile.attribute.visitor.AttributeVisitor,proguard.classfile.attribute.visitor.AttributeVisitor) -> <init>
    void visitUnknownAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.UnknownAttribute) -> a
    void visitBootstrapMethodsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodsAttribute) -> a
    void visitSourceFileAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceFileAttribute) -> a
    void visitSourceDirAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceDirAttribute) -> a
    void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute) -> a
    void visitEnclosingMethodAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.EnclosingMethodAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitConstantValueAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.ConstantValueAttribute) -> a
    void visitMethodParametersAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.MethodParametersAttribute) -> a
    void visitExceptionsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.ExceptionsAttribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitStackMapAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapAttribute) -> a
    void visitStackMapTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapTableAttribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleParameterAnnotationsAttribute) -> a
    void visitRuntimeInvisibleParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleParameterAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> a
proguard.classfile.attribute.visitor.StackSizeComputer -> bX:
    boolean[] evaluated -> a
    int[] stackSizesBefore -> a
    int[] stackSizesAfter -> b
    boolean exitInstructionBlock -> a
    int stackSize -> b
    int maxStackSize -> a
    void <init>() -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
    void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction) -> a
    void visitAnySwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SwitchInstruction) -> a
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
    void evaluateInstructionBlock(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int) -> a
proguard.classfile.constant.ClassConstant -> bY:
    int u2nameIndex -> a
    proguard.classfile.Clazz referencedClass -> a
    proguard.classfile.Clazz javaLangClassClass -> b
    void <init>() -> <init>
    void <init>(int,proguard.classfile.Clazz) -> <init>
    java.lang.String getName(proguard.classfile.Clazz) -> a
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor) -> a
    void referencedClassAccept(proguard.classfile.visitor.ClassVisitor) -> a
proguard.classfile.constant.Constant -> bZ:
    java.lang.Object visitorInfo -> a
    void <init>() -> <init>
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor) -> a
    java.lang.Object getVisitorInfo() -> a
    void setVisitorInfo(java.lang.Object) -> a
proguard.classfile.constant.DoubleConstant -> ca:
    double f8value -> a
    void <init>() -> <init>
    void <init>(double) -> <init>
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor) -> a
proguard.classfile.constant.FieldrefConstant -> cb:
    void <init>() -> <init>
    void <init>(int,int,proguard.classfile.Clazz,proguard.classfile.Member) -> <init>
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor) -> a
proguard.classfile.constant.FloatConstant -> cc:
    float f4value -> a
    void <init>() -> <init>
    void <init>(float) -> <init>
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor) -> a
proguard.classfile.constant.IntegerConstant -> cd:
    int u4value -> a
    void <init>() -> <init>
    void <init>(int) -> <init>
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor) -> a
proguard.classfile.constant.InterfaceMethodrefConstant -> ce:
    void <init>() -> <init>
    void <init>(int,int,proguard.classfile.Clazz,proguard.classfile.Member) -> <init>
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor) -> a
proguard.classfile.constant.InvokeDynamicConstant -> cf:
    int u2bootstrapMethodAttributeIndex -> a
    int u2nameAndTypeIndex -> b
    proguard.classfile.Clazz[] referencedClasses -> a
    void <init>() -> <init>
    void <init>(int,int,proguard.classfile.Clazz[]) -> <init>
    java.lang.String getName(proguard.classfile.Clazz) -> a
    java.lang.String getType(proguard.classfile.Clazz) -> b
    void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor) -> a
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor) -> a
proguard.classfile.constant.LongConstant -> cg:
    long u8value -> a
    void <init>() -> <init>
    void <init>(long) -> <init>
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor) -> a
proguard.classfile.constant.MethodHandleConstant -> ch:
    int u1referenceKind -> a
    int u2referenceIndex -> b
    proguard.classfile.Clazz javaLangInvokeMethodHandleClass -> a
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    java.lang.String getClassName(proguard.classfile.Clazz) -> a
    java.lang.String getName(proguard.classfile.Clazz) -> b
    java.lang.String getType(proguard.classfile.Clazz) -> c
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor) -> a
proguard.classfile.constant.MethodTypeConstant -> ci:
    int u2descriptorIndex -> a
    proguard.classfile.Clazz javaLangInvokeMethodTypeClass -> a
    proguard.classfile.Clazz[] referencedClasses -> a
    void <init>() -> <init>
    void <init>(int,proguard.classfile.Clazz[]) -> <init>
    java.lang.String getType(proguard.classfile.Clazz) -> a
    void referencedClassesAccept(proguard.classfile.visitor.ClassVisitor) -> a
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor) -> a
proguard.classfile.constant.MethodrefConstant -> cj:
    void <init>() -> <init>
    void <init>(int,int,proguard.classfile.Clazz,proguard.classfile.Member) -> <init>
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor) -> a
proguard.classfile.constant.NameAndTypeConstant -> ck:
    int u2nameIndex -> a
    int u2descriptorIndex -> b
    void <init>() -> <init>
    void <init>(int,int) -> <init>
    java.lang.String getName(proguard.classfile.Clazz) -> a
    java.lang.String getType(proguard.classfile.Clazz) -> b
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor) -> a
proguard.classfile.constant.RefConstant -> cl:
    int u2classIndex -> a
    int u2nameAndTypeIndex -> b
    proguard.classfile.Clazz referencedClass -> a
    proguard.classfile.Member referencedMember -> a
    void <init>() -> <init>
    java.lang.String getClassName(proguard.classfile.Clazz) -> a
    java.lang.String getName(proguard.classfile.Clazz) -> b
    java.lang.String getType(proguard.classfile.Clazz) -> c
    void referencedClassAccept(proguard.classfile.visitor.ClassVisitor) -> a
    void referencedMemberAccept(proguard.classfile.visitor.MemberVisitor) -> a
proguard.classfile.constant.StringConstant -> cm:
    int u2stringIndex -> a
    proguard.classfile.Clazz referencedClass -> a
    proguard.classfile.Member referencedMember -> a
    proguard.classfile.Clazz javaLangStringClass -> b
    void <init>() -> <init>
    void <init>(int,proguard.classfile.Clazz,proguard.classfile.Member) -> <init>
    java.lang.String getString(proguard.classfile.Clazz) -> a
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor) -> a
    void referencedClassAccept(proguard.classfile.visitor.ClassVisitor) -> a
    void referencedMemberAccept(proguard.classfile.visitor.MemberVisitor) -> a
proguard.classfile.constant.Utf8Constant -> cn:
    byte[] bytes -> a
    java.lang.String string -> a
    void <init>() -> <init>
    void <init>(java.lang.String) -> <init>
    void setBytes(byte[]) -> a
    byte[] getBytes() -> a
    void setString(java.lang.String) -> a
    java.lang.String getString() -> a
    int getTag() -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor) -> a
    java.lang.String getStringRepresentation(byte[]) -> a
proguard.classfile.constant.visitor.AllConstantVisitor -> co:
    proguard.classfile.constant.visitor.ConstantVisitor constantVisitor -> a
    void <init>(proguard.classfile.constant.visitor.ConstantVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.classfile.constant.visitor.BootstrapMethodArgumentVisitor -> cp:
    proguard.classfile.constant.visitor.ConstantVisitor constantVisitor -> a
    void <init>(proguard.classfile.constant.visitor.ConstantVisitor) -> <init>
    void visitBootstrapMethodInfo(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodInfo) -> a
proguard.classfile.constant.visitor.BootstrapMethodHandleTraveler -> cq:
    proguard.classfile.constant.visitor.ConstantVisitor bootstrapMethodHandleVisitor -> a
    int bootstrapMethodAttributeIndex -> a
    void <init>(proguard.classfile.constant.visitor.ConstantVisitor) -> <init>
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitBootstrapMethodsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodsAttribute) -> a
    void visitBootstrapMethodInfo(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodInfo) -> a
proguard.classfile.constant.visitor.ConstantTagFilter -> cr:
    int constantTagMask -> a
    proguard.classfile.constant.visitor.ConstantVisitor constantVisitor -> a
    void <init>(int,proguard.classfile.constant.visitor.ConstantVisitor) -> <init>
    void <init>(int[],proguard.classfile.constant.visitor.ConstantVisitor) -> <init>
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
proguard.classfile.constant.visitor.ConstantVisitor -> cs:
    void visitIntegerConstant(proguard.classfile.Clazz,proguard.classfile.constant.IntegerConstant) -> a
    void visitLongConstant(proguard.classfile.Clazz,proguard.classfile.constant.LongConstant) -> a
    void visitFloatConstant(proguard.classfile.Clazz,proguard.classfile.constant.FloatConstant) -> a
    void visitDoubleConstant(proguard.classfile.Clazz,proguard.classfile.constant.DoubleConstant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitUtf8Constant(proguard.classfile.Clazz,proguard.classfile.constant.Utf8Constant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void visitMethodHandleConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodHandleConstant) -> a
    void visitFieldrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.FieldrefConstant) -> a
    void visitInterfaceMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.InterfaceMethodrefConstant) -> a
    void visitMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodrefConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitMethodTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodTypeConstant) -> a
    void visitNameAndTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.NameAndTypeConstant) -> a
proguard.classfile.constant.visitor.ExceptClassConstantFilter -> ct:
    java.lang.String exceptClassName -> a
    proguard.classfile.constant.visitor.ConstantVisitor constantVisitor -> a
    void <init>(java.lang.String,proguard.classfile.constant.visitor.ConstantVisitor) -> <init>
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
proguard.classfile.constant.visitor.MethodrefTraveler -> cu:
    proguard.classfile.constant.visitor.ConstantVisitor methodrefConstantVisitor -> a
    void <init>(proguard.classfile.constant.visitor.ConstantVisitor) -> <init>
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitMethodHandleConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodHandleConstant) -> a
proguard.classfile.editor.AccessFixer -> cv:
    proguard.classfile.constant.visitor.ConstantVisitor referencedClassStorer -> a
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitAnyRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> a
    proguard.classfile.visitor.ClassVisitor access$400(proguard.classfile.editor.AccessFixer) -> a
proguard.classfile.editor.AccessFixer$MyAccessFixer -> cw:
    proguard.classfile.Clazz referencingClass -> a
    proguard.classfile.Clazz referencedClass -> b
    void <init>() -> <init>
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryMember(proguard.classfile.LibraryClass,proguard.classfile.LibraryMember) -> a
    void visitProgramMember(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember) -> a
    boolean inSamePackage(proguard.classfile.ProgramClass,proguard.classfile.Clazz) -> a
    void <init>(byte) -> <init>
proguard.classfile.editor.AccessFixer$MyReferencedClassStorer -> cx:
    proguard.classfile.editor.AccessFixer this$0 -> a
    void <init>(proguard.classfile.editor.AccessFixer) -> <init>
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void <init>(proguard.classfile.editor.AccessFixer,byte) -> <init>
proguard.classfile.editor.AnnotationAdder -> cy:
    proguard.classfile.attribute.annotation.ElementValue[] EMPTY_ELEMENT_VALUES -> a
    proguard.classfile.ProgramClass targetClass -> a
    proguard.classfile.attribute.annotation.AnnotationElementValue targetAnnotationElementValue -> a
    proguard.classfile.editor.AnnotationsAttributeEditor annotationsAttributeEditor -> a
    proguard.classfile.editor.ParameterAnnotationsAttributeEditor parameterAnnotationsAttributeEditor -> a
    proguard.classfile.editor.ConstantAdder constantAdder -> a
    void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.annotation.AnnotationElementValue) -> <init>
    void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.annotation.AnnotationsAttribute) -> <init>
    void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute) -> <init>
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Method,int,proguard.classfile.attribute.annotation.Annotation) -> a
    void <clinit>() -> <clinit>
proguard.classfile.editor.AnnotationsAttributeEditor -> cz:
    proguard.classfile.attribute.annotation.AnnotationsAttribute targetAnnotationsAttribute -> a
    void <init>(proguard.classfile.attribute.annotation.AnnotationsAttribute) -> <init>
proguard.classfile.editor.AttributeAdder -> cA:
    byte[] EMPTY_BYTES -> a
    int[] EMPTY_INTS -> a
    proguard.classfile.attribute.Attribute[] EMPTY_ATTRIBUTES -> a
    proguard.classfile.attribute.ExceptionInfo[] EMPTY_EXCEPTIONS -> a
    proguard.classfile.attribute.annotation.Annotation[] EMPTY_ANNOTATIONS -> a
    proguard.classfile.ProgramClass targetClass -> a
    proguard.classfile.ProgramMember targetMember -> a
    boolean replaceAttributes -> a
    proguard.classfile.editor.ConstantAdder constantAdder -> a
    proguard.classfile.editor.AttributesEditor attributesEditor -> a
    void <init>(proguard.classfile.ProgramClass,boolean) -> <init>
    void <init>(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember,boolean) -> <init>
    void <init>(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember,proguard.classfile.attribute.CodeAttribute,boolean) -> <init>
    void visitUnknownAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.UnknownAttribute) -> a
    void visitSourceFileAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceFileAttribute) -> a
    void visitSourceDirAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceDirAttribute) -> a
    void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute) -> a
    void visitEnclosingMethodAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.EnclosingMethodAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitConstantValueAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.ConstantValueAttribute) -> a
    void visitMethodParametersAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.MethodParametersAttribute) -> a
    void visitExceptionsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.ExceptionsAttribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitStackMapAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapAttribute) -> a
    void visitStackMapTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapTableAttribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleParameterAnnotationsAttribute) -> a
    void visitRuntimeInvisibleParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleParameterAnnotationsAttribute) -> a
    void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> a
    void <clinit>() -> <clinit>
proguard.classfile.editor.AttributeSorter -> cB:
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitProgramMember(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
proguard.classfile.editor.AttributesEditor -> cC:
    proguard.classfile.ProgramClass targetClass -> a
    proguard.classfile.ProgramMember targetMember -> a
    proguard.classfile.attribute.CodeAttribute targetAttribute -> a
    boolean replaceAttributes -> a
    void <init>(proguard.classfile.ProgramClass,boolean) -> <init>
    void <init>(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember,boolean) -> <init>
    void <init>(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember,proguard.classfile.attribute.CodeAttribute,boolean) -> <init>
    proguard.classfile.attribute.Attribute findAttribute(java.lang.String) -> a
    void addAttribute(proguard.classfile.attribute.Attribute) -> a
    void deleteAttribute(java.lang.String) -> a
    boolean replaceAttribute(int,proguard.classfile.attribute.Attribute[],proguard.classfile.attribute.Attribute) -> a
    proguard.classfile.attribute.Attribute[] addAttribute(int,proguard.classfile.attribute.Attribute[],proguard.classfile.attribute.Attribute) -> a
    int deleteAttribute(int,proguard.classfile.attribute.Attribute[],java.lang.String) -> a
    int findAttributeIndex(int,proguard.classfile.attribute.Attribute[],java.lang.String) -> b
    proguard.classfile.attribute.Attribute findAttribute(int,proguard.classfile.attribute.Attribute[],java.lang.String) -> a
proguard.classfile.editor.BootstrapMethodInfoAdder -> cD:
    proguard.classfile.editor.ConstantAdder constantAdder -> a
    proguard.classfile.editor.BootstrapMethodsAttributeEditor bootstrapMethodsAttributeEditor -> a
    int bootstrapMethodIndex -> a
    void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.BootstrapMethodsAttribute) -> <init>
    void visitBootstrapMethodInfo(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodInfo) -> a
proguard.classfile.editor.BootstrapMethodRemapper -> cE:
    int[] constantIndexMap -> a
    void <init>() -> <init>
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
proguard.classfile.editor.BootstrapMethodsAttributeAdder -> cF:
    proguard.classfile.ProgramClass targetClass -> a
    proguard.classfile.editor.ConstantPoolEditor constantPoolEditor -> a
    proguard.classfile.editor.BootstrapMethodInfoAdder bootstrapMethodInfoAdder -> a
    void <init>(proguard.classfile.ProgramClass) -> <init>
    void visitBootstrapMethodInfo(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodInfo) -> a
proguard.classfile.editor.BootstrapMethodsAttributeEditor -> cG:
    proguard.classfile.attribute.BootstrapMethodsAttribute targetBootstrapMethodsAttribute -> a
    void <init>(proguard.classfile.attribute.BootstrapMethodsAttribute) -> <init>
proguard.classfile.editor.BridgeMethodFixer -> cH:
    java.lang.String bridgedMethodName -> a
    void <init>() -> <init>
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitAnyMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> b
proguard.classfile.editor.ClassEditor -> cI:
    proguard.classfile.ProgramClass targetClass -> a
    void <init>(proguard.classfile.ProgramClass) -> <init>
proguard.classfile.editor.ClassElementSorter -> cJ:
    proguard.classfile.visitor.ClassVisitor interfaceSorter -> a
    proguard.classfile.visitor.ClassVisitor constantPoolSorter -> b
    proguard.classfile.visitor.ClassVisitor attributeSorter -> c
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
proguard.classfile.editor.ClassReferenceFixer -> cK:
    boolean ensureUniqueMemberNames -> a
    void <init>(boolean) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitMethodTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodTypeConstant) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitAnyAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.AnnotationsAttribute) -> a
    void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute) -> a
    void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> a
    void visitInnerClassesInfo(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesInfo) -> a
    void visitLocalVariableInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableInfo) -> a
    void visitLocalVariableTypeInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeInfo) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ConstantElementValue) -> a
    void visitEnumConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.EnumConstantElementValue) -> a
    void visitClassElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ClassElementValue) -> a
    void visitAnnotationElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.AnnotationElementValue) -> a
    void visitArrayElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ArrayElementValue) -> a
    java.lang.String newDescriptor(java.lang.String,proguard.classfile.Clazz) -> a
    java.lang.String newDescriptor(java.lang.String,proguard.classfile.Clazz[]) -> a
    java.lang.String newUniqueMemberName(java.lang.String,java.lang.String) -> a
    java.lang.String newClassName(java.lang.String,proguard.classfile.Clazz) -> b
proguard.classfile.editor.CodeAttributeComposer -> cL:
    boolean allowExternalBranchTargets -> a
    boolean allowExternalExceptionHandlers -> b
    boolean shrinkInstructions -> c
    int maximumCodeLength -> a
    int codeLength -> b
    int exceptionTableLength -> c
    int lineNumberTableLength -> d
    int level -> e
    byte[] code -> a
    int[] oldInstructionOffsets -> a
    int[] codeFragmentOffsets -> b
    int[] codeFragmentLengths -> c
    int[][] instructionOffsetMap -> a
    proguard.classfile.attribute.ExceptionInfo[] exceptionTable -> a
    proguard.classfile.attribute.LineNumberInfo[] lineNumberTable -> a
    int expectedStackMapFrameOffset -> f
    proguard.classfile.editor.StackSizeUpdater stackSizeUpdater -> a
    proguard.classfile.editor.VariableSizeUpdater variableSizeUpdater -> a
    proguard.classfile.editor.InstructionWriter instructionWriter -> a
    void <init>() -> <init>
    void <init>(boolean,boolean,boolean) -> <init>
    void reset() -> a
    void beginCodeFragment(int) -> a
    void appendInstruction(int,proguard.classfile.instruction.Instruction) -> a
    void appendLabel(int) -> b
    void appendException(proguard.classfile.attribute.ExceptionInfo) -> a
    int insertLineNumber(int,proguard.classfile.attribute.LineNumberInfo) -> a
    void endCodeFragment() -> b
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitStackMapAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapAttribute) -> a
    void visitStackMapTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapTableAttribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction) -> a
    void visitAnySwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SwitchInstruction) -> a
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
    void visitAnyStackMapFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.StackMapFrame) -> a
    void visitSameOneFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.SameOneFrame) -> a
    void visitMoreZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.MoreZeroFrame) -> a
    void visitFullFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.FullFrame) -> a
    void visitAnyVerificationType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.VerificationType) -> a
    void visitUninitializedType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.UninitializedType) -> a
    void visitLineNumberInfo$22557afc(proguard.classfile.attribute.LineNumberInfo) -> a
    void visitLocalVariableInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableInfo) -> a
    void visitLocalVariableTypeInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeInfo) -> a
    void ensureCodeLength(int) -> c
    int newBranchOffset(int,int) -> a
    int newInstructionOffset(int) -> a
    boolean remappableExceptionHandler(int) -> a
proguard.classfile.editor.CodeAttributeEditor -> cM:
    boolean updateFrameSizes -> d
    boolean shrinkInstructions -> a
    int codeLength -> a
    boolean modified -> b
    boolean simple -> c
    proguard.classfile.instruction.Instruction[] preInsertions -> a
    proguard.classfile.instruction.Instruction[] replacements -> b
    proguard.classfile.instruction.Instruction[] postInsertions -> c
    boolean[] deleted -> a
    int[] newInstructionOffsets -> a
    int newOffset -> b
    boolean lengthIncreased -> e
    int expectedStackMapFrameOffset -> c
    proguard.classfile.editor.StackSizeUpdater stackSizeUpdater -> a
    proguard.classfile.editor.VariableSizeUpdater variableSizeUpdater -> a
    proguard.classfile.editor.InstructionWriter instructionWriter -> a
    void <init>() -> <init>
    void <init>(boolean,boolean) -> <init>
    void reset(int) -> a
    void insertBeforeInstruction(int,proguard.classfile.instruction.Instruction) -> a
    void insertBeforeInstruction(int,proguard.classfile.instruction.Instruction[]) -> a
    void replaceInstruction(int,proguard.classfile.instruction.Instruction) -> b
    void replaceInstruction(int,proguard.classfile.instruction.Instruction[]) -> b
    void deleteInstruction(int) -> b
    void clearModifications(int) -> c
    boolean isModified(int) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitStackMapAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapAttribute) -> a
    void visitStackMapTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapTableAttribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitAnyTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotationsAttribute) -> a
    void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
    void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction) -> a
    void visitTableSwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.TableSwitchInstruction) -> a
    void visitLookUpSwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.LookUpSwitchInstruction) -> a
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
    void visitAnyStackMapFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.StackMapFrame) -> a
    void visitSameOneFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.SameOneFrame) -> a
    void visitMoreZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.MoreZeroFrame) -> a
    void visitFullFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.FullFrame) -> a
    void visitAnyVerificationType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.VerificationType) -> a
    void visitUninitializedType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.UninitializedType) -> a
    void visitLineNumberInfo$22557afc(proguard.classfile.attribute.LineNumberInfo) -> a
    void visitLocalVariableInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableInfo) -> a
    void visitLocalVariableTypeInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeInfo) -> a
    void visitTypeAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation) -> a
    void visitAnyTargetInfo$1a61f70a() -> a_
    void visitLocalVariableTargetInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.LocalVariableTargetInfo) -> a
    void visitOffsetTargetInfo$5cfb828c(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.OffsetTargetInfo) -> a
    void visitLocalVariableTargetElement$56d9656e(proguard.classfile.attribute.annotation.target.LocalVariableTargetElement) -> a
    void newJumpOffsets(int,int[],int) -> a
    int newBranchOffset(int,int) -> a
    int newBranchOffset(int,int,int) -> a
    int newInstructionOffset(int) -> a
proguard.classfile.editor.CodeAttributeEditor$CompositeInstruction -> cN:
    proguard.classfile.instruction.Instruction[] instructions -> a
    proguard.classfile.editor.CodeAttributeEditor this$0 -> a
    void <init>(proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.Instruction[]) -> <init>
    proguard.classfile.instruction.Instruction shrink() -> a
    void write(byte[],int) -> a
    void readInfo(byte[],int) -> b
    void writeInfo(byte[],int) -> c
    int length(int) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor) -> a
    java.lang.String toString() -> toString
    void <init>(proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.Instruction[],byte) -> <init>
proguard.classfile.editor.ComparableConstant -> cO:
    int[] PRIORITIES -> a
    proguard.classfile.Clazz clazz -> a
    int thisIndex -> a
    proguard.classfile.constant.Constant thisConstant -> a
    proguard.classfile.constant.Constant otherConstant -> b
    int result -> b
    void <init>(proguard.classfile.Clazz,int,proguard.classfile.constant.Constant) -> <init>
    int compareTo(java.lang.Object) -> compareTo
    void visitIntegerConstant(proguard.classfile.Clazz,proguard.classfile.constant.IntegerConstant) -> a
    void visitLongConstant(proguard.classfile.Clazz,proguard.classfile.constant.LongConstant) -> a
    void visitFloatConstant(proguard.classfile.Clazz,proguard.classfile.constant.FloatConstant) -> a
    void visitDoubleConstant(proguard.classfile.Clazz,proguard.classfile.constant.DoubleConstant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitUtf8Constant(proguard.classfile.Clazz,proguard.classfile.constant.Utf8Constant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void visitMethodHandleConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodHandleConstant) -> a
    void visitAnyRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitMethodTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodTypeConstant) -> a
    void visitNameAndTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.NameAndTypeConstant) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    int compare(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    int compare(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void <clinit>() -> <clinit>
proguard.classfile.editor.ConstantAdder -> cP:
    proguard.classfile.editor.ConstantPoolEditor constantPoolEditor -> a
    proguard.classfile.editor.BootstrapMethodsAttributeAdder bootstrapMethodsAttributeAdder -> a
    int constantIndex -> a
    void <init>(proguard.classfile.ProgramClass) -> <init>
    int addConstant(proguard.classfile.Clazz,int) -> a
    void visitIntegerConstant(proguard.classfile.Clazz,proguard.classfile.constant.IntegerConstant) -> a
    void visitLongConstant(proguard.classfile.Clazz,proguard.classfile.constant.LongConstant) -> a
    void visitFloatConstant(proguard.classfile.Clazz,proguard.classfile.constant.FloatConstant) -> a
    void visitDoubleConstant(proguard.classfile.Clazz,proguard.classfile.constant.DoubleConstant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitUtf8Constant(proguard.classfile.Clazz,proguard.classfile.constant.Utf8Constant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void visitMethodHandleConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodHandleConstant) -> a
    void visitFieldrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.FieldrefConstant) -> a
    void visitInterfaceMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.InterfaceMethodrefConstant) -> a
    void visitMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodrefConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitMethodTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodTypeConstant) -> a
    void visitNameAndTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.NameAndTypeConstant) -> a
proguard.classfile.editor.ConstantPoolEditor -> cQ:
    proguard.classfile.ProgramClass targetClass -> a
    void <init>(proguard.classfile.ProgramClass) -> <init>
    int addIntegerConstant(int) -> a
    int addLongConstant(long) -> a
    int addFloatConstant(float) -> a
    int addDoubleConstant(double) -> a
    int addStringConstant(java.lang.String,proguard.classfile.Clazz,proguard.classfile.Member) -> a
    int addClassConstant(java.lang.String,proguard.classfile.Clazz) -> a
    int addNameAndTypeConstant(java.lang.String,java.lang.String) -> a
    int addUtf8Constant(java.lang.String) -> a
    int addConstant(proguard.classfile.constant.Constant) -> a
proguard.classfile.editor.ConstantPoolRemapper -> cR:
    proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor -> a
    int[] constantIndexMap -> a
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitIntegerConstant(proguard.classfile.Clazz,proguard.classfile.constant.IntegerConstant) -> a
    void visitLongConstant(proguard.classfile.Clazz,proguard.classfile.constant.LongConstant) -> a
    void visitFloatConstant(proguard.classfile.Clazz,proguard.classfile.constant.FloatConstant) -> a
    void visitDoubleConstant(proguard.classfile.Clazz,proguard.classfile.constant.DoubleConstant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitUtf8Constant(proguard.classfile.Clazz,proguard.classfile.constant.Utf8Constant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void visitMethodHandleConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodHandleConstant) -> a
    void visitFieldrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.FieldrefConstant) -> a
    void visitInterfaceMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.InterfaceMethodrefConstant) -> a
    void visitMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodrefConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitMethodTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodTypeConstant) -> a
    void visitNameAndTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.NameAndTypeConstant) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitMember(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember) -> b
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    void visitUnknownAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.UnknownAttribute) -> a
    void visitBootstrapMethodsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodsAttribute) -> a
    void visitSourceFileAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceFileAttribute) -> a
    void visitSourceDirAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceDirAttribute) -> a
    void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute) -> a
    void visitEnclosingMethodAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.EnclosingMethodAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitConstantValueAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.ConstantValueAttribute) -> a
    void visitMethodParametersAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.MethodParametersAttribute) -> a
    void visitExceptionsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.ExceptionsAttribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitStackMapAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapAttribute) -> a
    void visitStackMapTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapTableAttribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitAnyAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.AnnotationsAttribute) -> a
    void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute) -> a
    void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> a
    void visitBootstrapMethodInfo(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodInfo) -> a
    void visitInnerClassesInfo(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesInfo) -> a
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitAnyStackMapFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.StackMapFrame) -> a
    void visitSameOneFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.SameOneFrame) -> a
    void visitMoreZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.MoreZeroFrame) -> a
    void visitFullFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.FullFrame) -> a
    void visitAnyVerificationType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.VerificationType) -> a
    void visitObjectType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.ObjectType) -> a
    void visitParameterInfo(proguard.classfile.Clazz,proguard.classfile.Method,int,proguard.classfile.attribute.ParameterInfo) -> a
    void visitLocalVariableInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableInfo) -> a
    void visitLocalVariableTypeInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeInfo) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ConstantElementValue) -> a
    void visitEnumConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.EnumConstantElementValue) -> a
    void visitClassElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ClassElementValue) -> a
    void visitAnnotationElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.AnnotationElementValue) -> a
    void visitArrayElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ArrayElementValue) -> a
    void remapConstantIndexArray(int[],int) -> a
    int remapConstantIndex(int) -> a
proguard.classfile.editor.ConstantPoolShrinker -> cS:
    java.lang.Object USED -> a
    int[] constantIndexMap -> a
    proguard.classfile.editor.ConstantPoolRemapper constantPoolRemapper -> a
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitProgramMember(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void visitMethodHandleConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodHandleConstant) -> a
    void visitAnyRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitMethodTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodTypeConstant) -> a
    void visitNameAndTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.NameAndTypeConstant) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitBootstrapMethodsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodsAttribute) -> a
    void visitSourceFileAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceFileAttribute) -> a
    void visitSourceDirAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceDirAttribute) -> a
    void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute) -> a
    void visitEnclosingMethodAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.EnclosingMethodAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitConstantValueAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.ConstantValueAttribute) -> a
    void visitMethodParametersAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.MethodParametersAttribute) -> a
    void visitExceptionsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.ExceptionsAttribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitStackMapAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapAttribute) -> a
    void visitStackMapTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapTableAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitAnyAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.AnnotationsAttribute) -> a
    void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute) -> a
    void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> a
    void visitBootstrapMethodInfo(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodInfo) -> a
    void visitInnerClassesInfo(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesInfo) -> a
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
    void visitAnyStackMapFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.StackMapFrame) -> a
    void visitSameOneFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.SameOneFrame) -> a
    void visitMoreZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.MoreZeroFrame) -> a
    void visitFullFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.FullFrame) -> a
    void visitAnyVerificationType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.VerificationType) -> a
    void visitObjectType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.ObjectType) -> a
    void visitParameterInfo(proguard.classfile.Clazz,proguard.classfile.Method,int,proguard.classfile.attribute.ParameterInfo) -> a
    void visitLocalVariableInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableInfo) -> a
    void visitLocalVariableTypeInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeInfo) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ConstantElementValue) -> a
    void visitEnumConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.EnumConstantElementValue) -> a
    void visitClassElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ClassElementValue) -> a
    void visitAnnotationElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.AnnotationElementValue) -> a
    void visitArrayElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ArrayElementValue) -> a
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void markConstant(proguard.classfile.Clazz,int) -> a
    void <clinit>() -> <clinit>
proguard.classfile.editor.ConstantPoolSorter -> cT:
    int[] constantIndexMap -> a
    proguard.classfile.editor.ComparableConstant[] comparableConstantPool -> a
    proguard.classfile.constant.Constant[] newConstantPool -> a
    proguard.classfile.editor.ConstantPoolRemapper constantPoolRemapper -> a
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
proguard.classfile.editor.ElementValueAdder -> cU:
    proguard.classfile.attribute.annotation.ElementValue[] EMPTY_ELEMENT_VALUES -> a
    proguard.classfile.ProgramClass targetClass -> a
    proguard.classfile.attribute.annotation.AnnotationDefaultAttribute targetAnnotationDefaultAttribute -> a
    proguard.classfile.editor.ConstantAdder constantAdder -> a
    proguard.classfile.editor.ElementValuesEditor elementValuesEditor -> a
    void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> <init>
    void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.annotation.Annotation,boolean) -> <init>
    void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.annotation.ArrayElementValue,boolean) -> <init>
    void visitConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ConstantElementValue) -> a
    void visitEnumConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.EnumConstantElementValue) -> a
    void visitClassElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ClassElementValue) -> a
    void visitAnnotationElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.AnnotationElementValue) -> a
    void visitArrayElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ArrayElementValue) -> a
    void addElementValue(proguard.classfile.attribute.annotation.ElementValue) -> a
    void <clinit>() -> <clinit>
proguard.classfile.editor.ElementValuesEditor -> cV:
    proguard.classfile.ProgramClass targetClass -> a
    proguard.classfile.attribute.annotation.Annotation targetAnnotation -> a
    proguard.classfile.attribute.annotation.ArrayElementValue targetArrayElementValue -> a
    boolean replaceElementValues -> a
    void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.annotation.Annotation,boolean) -> <init>
    void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.annotation.ArrayElementValue,boolean) -> <init>
    boolean replaceElementValue(int,proguard.classfile.attribute.annotation.ElementValue[],proguard.classfile.attribute.annotation.ElementValue) -> a
    proguard.classfile.attribute.annotation.ElementValue[] addElementValue(int,proguard.classfile.attribute.annotation.ElementValue[],proguard.classfile.attribute.annotation.ElementValue) -> a
proguard.classfile.editor.ExceptionAdder -> cW:
    proguard.classfile.editor.ConstantAdder constantAdder -> a
    proguard.classfile.editor.ExceptionsAttributeEditor exceptionsAttributeEditor -> a
    void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.ExceptionsAttribute) -> <init>
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
proguard.classfile.editor.ExceptionInfoAdder -> cX:
    proguard.classfile.editor.ConstantAdder constantAdder -> a
    proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer -> a
    void <init>(proguard.classfile.ProgramClass,proguard.classfile.editor.CodeAttributeComposer) -> <init>
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
proguard.classfile.editor.ExceptionsAttributeEditor -> cY:
    proguard.classfile.attribute.ExceptionsAttribute targetExceptionsAttribute -> a
    void <init>(proguard.classfile.attribute.ExceptionsAttribute) -> <init>
proguard.classfile.editor.InnerClassesAccessFixer -> cZ:
    int innerClassAccessFlags -> a
    void <init>() -> <init>
    void visitInnerClassesInfo(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesInfo) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
proguard.classfile.editor.InstructionAdder -> da:
    proguard.classfile.editor.ConstantAdder constantAdder -> a
    proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer -> a
    void <init>(proguard.classfile.ProgramClass,proguard.classfile.editor.CodeAttributeComposer) -> <init>
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
proguard.classfile.editor.InstructionWriter -> db:
    int codeLength -> a
    proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor -> a
    void <init>() -> <init>
    void reset(int) -> a
    void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
    void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction) -> a
    void visitAnySwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SwitchInstruction) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void insertBeforeInstruction(int,proguard.classfile.instruction.Instruction) -> a
    void replaceInstruction(int,proguard.classfile.instruction.Instruction) -> b
    void ensureCodeAttributeEditor() -> b
proguard.classfile.editor.InterfaceAdder -> dc:
    proguard.classfile.editor.ConstantAdder constantAdder -> a
    proguard.classfile.editor.InterfacesEditor interfacesEditor -> a
    void <init>(proguard.classfile.ProgramClass) -> <init>
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
proguard.classfile.editor.InterfaceDeleter -> dd:
    boolean[] delete -> a
    void <init>(boolean[]) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute) -> a
proguard.classfile.editor.InterfaceSorter -> de:
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute) -> a
proguard.classfile.editor.InterfacesEditor -> df:
    proguard.classfile.ProgramClass targetClass -> a
    void <init>(proguard.classfile.ProgramClass) -> <init>
proguard.classfile.editor.LineNumberInfoAdder -> dg:
    proguard.classfile.editor.LineNumberTableAttributeEditor lineNumberTableAttributeEditor -> a
    java.lang.String source -> a
    void <init>(proguard.classfile.attribute.LineNumberTableAttribute) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
    void visitLineNumberInfo$22557afc(proguard.classfile.attribute.LineNumberInfo) -> a
proguard.classfile.editor.LineNumberTableAttributeEditor -> dh:
    proguard.classfile.attribute.LineNumberTableAttribute targetLineNumberTableAttribute -> a
    void <init>(proguard.classfile.attribute.LineNumberTableAttribute) -> <init>
proguard.classfile.editor.LineNumberTableAttributeTrimmer -> di:
    void <init>() -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
proguard.classfile.editor.LocalVariableInfoAdder -> dj:
    proguard.classfile.editor.ConstantAdder constantAdder -> a
    proguard.classfile.editor.LocalVariableTableAttributeEditor localVariableTableAttributeEditor -> a
    void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.LocalVariableTableAttribute) -> <init>
    void visitLocalVariableInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableInfo) -> a
proguard.classfile.editor.LocalVariableTableAttributeEditor -> dk:
    proguard.classfile.attribute.LocalVariableTableAttribute targetLocalVariableTableAttribute -> a
    void <init>(proguard.classfile.attribute.LocalVariableTableAttribute) -> <init>
proguard.classfile.editor.LocalVariableTypeInfoAdder -> dl:
    proguard.classfile.editor.ConstantAdder constantAdder -> a
    proguard.classfile.editor.LocalVariableTypeTableAttributeEditor localVariableTypeTableAttributeEditor -> a
    void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> <init>
    void visitLocalVariableTypeInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeInfo) -> a
proguard.classfile.editor.LocalVariableTypeTableAttributeEditor -> dm:
    proguard.classfile.attribute.LocalVariableTypeTableAttribute targetLocalVariableTypeTableAttribute -> a
    void <init>(proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> <init>
proguard.classfile.editor.MemberAdder -> dn:
    proguard.classfile.attribute.Attribute[] EMPTY_ATTRIBUTES -> a
    proguard.classfile.ProgramClass targetClass -> a
    proguard.classfile.visitor.MemberVisitor extraMemberVisitor -> a
    proguard.classfile.editor.ConstantAdder constantAdder -> a
    proguard.classfile.editor.ClassEditor classEditor -> a
    void <init>(proguard.classfile.ProgramClass,proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void <clinit>() -> <clinit>
proguard.classfile.editor.MemberReferenceFixer -> do:
    proguard.classfile.editor.StackSizeUpdater stackSizeUpdater -> a
    int constantIndex -> a
    boolean isInterfaceMethod -> a
    boolean stackSizesMayHaveChanged -> b
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitFieldrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.FieldrefConstant) -> a
    void visitInterfaceMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.InterfaceMethodrefConstant) -> a
    void visitMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodrefConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitProgramMember(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitEnclosingMethodAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.EnclosingMethodAttribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitAnyAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.AnnotationsAttribute) -> a
    void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute) -> a
    void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ConstantElementValue) -> a
    void visitEnumConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.EnumConstantElementValue) -> a
    void visitClassElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ClassElementValue) -> a
    void visitAnnotationElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.AnnotationElementValue) -> a
    void visitArrayElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ArrayElementValue) -> a
    void fixElementValue$5835c5e2(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.ElementValue) -> a
proguard.classfile.editor.MethodInvocationFixer -> dp:
    proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor -> a
    proguard.classfile.Clazz referencedClass -> a
    proguard.classfile.Clazz referencedMethodClass -> b
    proguard.classfile.Member referencedMethod -> a
    void <init>() -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitAnyMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> b
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
proguard.classfile.editor.NamedAttributeDeleter -> dq:
    java.lang.String attributeName -> a
    void <init>(java.lang.String) -> <init>
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryMember(proguard.classfile.LibraryClass,proguard.classfile.LibraryMember) -> a
    void visitProgramMember(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
proguard.classfile.editor.ParameterAnnotationsAttributeEditor -> dr:
    proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute targetParameterAnnotationsAttribute -> a
    void <init>(proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute) -> <init>
proguard.classfile.editor.ParameterInfoAdder -> ds:
    proguard.classfile.editor.ConstantAdder constantAdder -> a
    proguard.classfile.attribute.MethodParametersAttribute targetMethodParametersAttribute -> a
    void <init>(proguard.classfile.ProgramClass,proguard.classfile.attribute.MethodParametersAttribute) -> <init>
    void visitParameterInfo(proguard.classfile.Clazz,proguard.classfile.Method,int,proguard.classfile.attribute.ParameterInfo) -> a
proguard.classfile.editor.StackSizeUpdater -> dt:
    proguard.classfile.attribute.visitor.StackSizeComputer stackSizeComputer -> a
    void <init>() -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
proguard.classfile.editor.SubclassAdder -> du:
    proguard.classfile.Clazz subclass -> a
    void <init>(proguard.classfile.Clazz) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.classfile.editor.VariableCleaner -> dv:
    boolean deleteLocalVariableTableAttribute -> a
    boolean deleteLocalVariableTypeTableAttribute -> b
    void <init>() -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    int[] createMaxArray(int) -> a
proguard.classfile.editor.VariableEditor -> dw:
    boolean modified -> a
    boolean[] deleted -> a
    int[] variableMap -> a
    proguard.classfile.editor.VariableRemapper variableRemapper -> a
    void <init>() -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
proguard.classfile.editor.VariableRemapper -> dx:
    proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor -> a
    int[] variableMap -> a
    void <init>() -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitMethodParametersAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.MethodParametersAttribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitAnyTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotationsAttribute) -> a
    void visitLocalVariableInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableInfo) -> a
    void visitLocalVariableTypeInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeInfo) -> a
    void visitTypeAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation) -> a
    void visitAnyTargetInfo$1a61f70a() -> a_
    void visitLocalVariableTargetInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.LocalVariableTargetInfo) -> a
    void visitLocalVariableTargetElement$56d9656e(proguard.classfile.attribute.annotation.target.LocalVariableTargetElement) -> a
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
proguard.classfile.editor.VariableSizeUpdater -> dy:
    proguard.classfile.editor.VariableCleaner variableCleaner -> a
    void <init>() -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
proguard.classfile.instruction.BranchInstruction -> dz:
    int branchOffset -> a
    void <init>() -> <init>
    void <init>(byte,int) -> <init>
    byte canonicalOpcode() -> a
    proguard.classfile.instruction.Instruction shrink() -> a
    void readInfo(byte[],int) -> b
    void writeInfo(byte[],int) -> c
    int length(int) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor) -> a
    java.lang.String toString(int) -> a
    java.lang.String toString() -> toString
    int branchOffsetSize() -> a
    int requiredBranchOffsetSize() -> b
proguard.classfile.instruction.ConstantInstruction -> dA:
    int constantIndex -> a
    int constant -> b
    int parameterStackDelta -> c
    int typeStackDelta -> d
    void <init>() -> <init>
    void <init>(byte,int) -> <init>
    void <init>(byte,int,int) -> <init>
    byte canonicalOpcode() -> a
    proguard.classfile.instruction.Instruction shrink() -> a
    void readInfo(byte[],int) -> b
    void writeInfo(byte[],int) -> c
    int length(int) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor) -> a
    int stackPopCount(proguard.classfile.Clazz) -> a
    int stackPushCount(proguard.classfile.Clazz) -> b
    void visitIntegerConstant(proguard.classfile.Clazz,proguard.classfile.constant.IntegerConstant) -> a
    void visitLongConstant(proguard.classfile.Clazz,proguard.classfile.constant.LongConstant) -> a
    void visitFloatConstant(proguard.classfile.Clazz,proguard.classfile.constant.FloatConstant) -> a
    void visitDoubleConstant(proguard.classfile.Clazz,proguard.classfile.constant.DoubleConstant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitUtf8Constant(proguard.classfile.Clazz,proguard.classfile.constant.Utf8Constant) -> a
    void visitMethodHandleConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodHandleConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitMethodTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodTypeConstant) -> a
    void visitFieldrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.FieldrefConstant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void visitInterfaceMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.InterfaceMethodrefConstant) -> a
    void visitMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodrefConstant) -> a
    void visitNameAndTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.NameAndTypeConstant) -> a
    java.lang.String toString() -> toString
    int constantIndexSize() -> a
    int constantSize() -> b
    int requiredConstantIndexSize() -> c
proguard.classfile.instruction.Instruction -> dB:
    boolean[] MAY_THROW_EXCEPTIONS -> a
    boolean[] IS_CATEGORY2 -> b
    int[] STACK_POP_COUNTS -> a
    int[] STACK_PUSH_COUNTS -> b
    byte opcode -> a
    void <init>() -> <init>
    byte canonicalOpcode() -> a
    proguard.classfile.instruction.Instruction shrink() -> a
    void write(proguard.classfile.attribute.CodeAttribute,int) -> a
    void write(byte[],int) -> a
    boolean isWide() -> a
    void readInfo(byte[],int) -> b
    void writeInfo(byte[],int) -> c
    int length(int) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor) -> a
    java.lang.String toString(int) -> a
    java.lang.String getName() -> a
    boolean isCategory2() -> b
    int stackPopCount(proguard.classfile.Clazz) -> a
    int stackPushCount(proguard.classfile.Clazz) -> b
    int readInt(byte[],int) -> a
    int readValue(byte[],int,int) -> a
    int readSignedValue(byte[],int,int) -> b
    void writeByte(byte[],int,int) -> a
    void writeInt(byte[],int,int) -> b
    void writeValue(byte[],int,int,int) -> a
    void writeSignedValue(byte[],int,int,int) -> b
    void <clinit>() -> <clinit>
proguard.classfile.instruction.InstructionConstants -> dC:
    java.lang.String[] NAMES -> a
    void <clinit>() -> <clinit>
proguard.classfile.instruction.LookUpSwitchInstruction -> dD:
    int[] cases -> a
    void <init>() -> <init>
    void <init>(byte,int,int[],int[]) -> <init>
    proguard.classfile.instruction.Instruction shrink() -> a
    void readInfo(byte[],int) -> b
    void writeInfo(byte[],int) -> c
    int length(int) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor) -> a
proguard.classfile.instruction.SimpleInstruction -> dE:
    int constant -> a
    void <init>() -> <init>
    void <init>(byte) -> <init>
    void <init>(byte,int) -> <init>
    int embeddedConstant(byte) -> a
    byte canonicalOpcode() -> a
    proguard.classfile.instruction.Instruction shrink() -> a
    void readInfo(byte[],int) -> b
    void writeInfo(byte[],int) -> c
    int length(int) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor) -> a
    java.lang.String toString() -> toString
    int constantSize() -> a
    int requiredConstantSize() -> b
proguard.classfile.instruction.SwitchInstruction -> dF:
    int defaultOffset -> a
    int[] jumpOffsets -> b
    void <init>() -> <init>
    java.lang.String toString(int) -> a
    java.lang.String toString() -> toString
proguard.classfile.instruction.TableSwitchInstruction -> dG:
    int lowCase -> b
    int highCase -> c
    void <init>() -> <init>
    void <init>(byte,int,int,int,int[]) -> <init>
    proguard.classfile.instruction.Instruction shrink() -> a
    void readInfo(byte[],int) -> b
    void writeInfo(byte[],int) -> c
    int length(int) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor) -> a
proguard.classfile.instruction.VariableInstruction -> dH:
    boolean wide -> a
    int variableIndex -> a
    int constant -> b
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    void <init>(byte) -> <init>
    void <init>(byte,int) -> <init>
    void <init>(byte,int,int) -> <init>
    boolean isLoad() -> c
    byte canonicalOpcode() -> a
    proguard.classfile.instruction.Instruction shrink() -> a
    boolean isWide() -> a
    void readInfo(byte[],int) -> b
    void writeInfo(byte[],int) -> c
    int length(int) -> a
    void accept(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.visitor.InstructionVisitor) -> a
    java.lang.String toString() -> toString
    int variableIndexSize() -> a
    int requiredVariableIndexSize() -> b
    int constantSize() -> c
    int requiredConstantSize() -> d
proguard.classfile.instruction.visitor.AllInstructionVisitor -> dI:
    proguard.classfile.instruction.visitor.InstructionVisitor instructionVisitor -> a
    void <init>(proguard.classfile.instruction.visitor.InstructionVisitor) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
proguard.classfile.instruction.visitor.InstructionCounter -> dJ:
    int count -> a
    void <init>() -> <init>
    int getCount() -> a
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
proguard.classfile.instruction.visitor.InstructionVisitor -> dK:
    void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction) -> a
    void visitTableSwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.TableSwitchInstruction) -> a
    void visitLookUpSwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.LookUpSwitchInstruction) -> a
proguard.classfile.instruction.visitor.MultiInstructionVisitor -> dL:
    proguard.classfile.instruction.visitor.InstructionVisitor[] instructionVisitors -> a
    int instructionVisitorCount -> a
    void <init>() -> <init>
    void <init>(proguard.classfile.instruction.visitor.InstructionVisitor[]) -> <init>
    void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction) -> a
    void visitTableSwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.TableSwitchInstruction) -> a
    void visitLookUpSwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.LookUpSwitchInstruction) -> a
proguard.classfile.io.LibraryClassReader -> dM:
    proguard.classfile.LibraryField[] EMPTY_LIBRARY_FIELDS -> a
    proguard.classfile.LibraryMethod[] EMPTY_LIBRARY_METHODS -> a
    proguard.classfile.io.RuntimeDataInput dataInput -> a
    boolean skipNonPublicClasses -> a
    boolean skipNonPublicClassMembers -> b
    proguard.classfile.constant.Constant[] constantPool -> a
    void <init>(java.io.DataInput,boolean,boolean) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramMember(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember) -> a
    void visitLibraryMember(proguard.classfile.LibraryClass,proguard.classfile.LibraryMember) -> a
    void visitIntegerConstant(proguard.classfile.Clazz,proguard.classfile.constant.IntegerConstant) -> a
    void visitLongConstant(proguard.classfile.Clazz,proguard.classfile.constant.LongConstant) -> a
    void visitFloatConstant(proguard.classfile.Clazz,proguard.classfile.constant.FloatConstant) -> a
    void visitDoubleConstant(proguard.classfile.Clazz,proguard.classfile.constant.DoubleConstant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitUtf8Constant(proguard.classfile.Clazz,proguard.classfile.constant.Utf8Constant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void visitMethodHandleConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodHandleConstant) -> a
    void visitAnyRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitMethodTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodTypeConstant) -> a
    void visitNameAndTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.NameAndTypeConstant) -> a
    java.lang.String getClassName(int) -> a
    java.lang.String getString(int) -> b
    void skipAttributes() -> b
    void <clinit>() -> <clinit>
proguard.classfile.io.ProgramClassReader -> dN:
    proguard.classfile.io.RuntimeDataInput dataInput -> a
    void <init>(java.io.DataInput) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryMember(proguard.classfile.LibraryClass,proguard.classfile.LibraryMember) -> a
    void visitIntegerConstant(proguard.classfile.Clazz,proguard.classfile.constant.IntegerConstant) -> a
    void visitLongConstant(proguard.classfile.Clazz,proguard.classfile.constant.LongConstant) -> a
    void visitFloatConstant(proguard.classfile.Clazz,proguard.classfile.constant.FloatConstant) -> a
    void visitDoubleConstant(proguard.classfile.Clazz,proguard.classfile.constant.DoubleConstant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitUtf8Constant(proguard.classfile.Clazz,proguard.classfile.constant.Utf8Constant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void visitMethodHandleConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodHandleConstant) -> a
    void visitAnyRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitMethodTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodTypeConstant) -> a
    void visitNameAndTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.NameAndTypeConstant) -> a
    void visitUnknownAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.UnknownAttribute) -> a
    void visitBootstrapMethodsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodsAttribute) -> a
    void visitSourceFileAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceFileAttribute) -> a
    void visitSourceDirAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceDirAttribute) -> a
    void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute) -> a
    void visitEnclosingMethodAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.EnclosingMethodAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitConstantValueAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.ConstantValueAttribute) -> a
    void visitMethodParametersAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.MethodParametersAttribute) -> a
    void visitExceptionsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.ExceptionsAttribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitStackMapAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapAttribute) -> a
    void visitStackMapTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapTableAttribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitAnyAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.AnnotationsAttribute) -> a
    void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute) -> a
    void visitAnyTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotationsAttribute) -> a
    void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> a
    void visitBootstrapMethodInfo(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodInfo) -> a
    void visitInnerClassesInfo(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesInfo) -> a
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
    void visitSameZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.SameZeroFrame) -> a
    void visitSameOneFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.SameOneFrame) -> a
    void visitLessZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.LessZeroFrame) -> a
    void visitMoreZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.MoreZeroFrame) -> a
    void visitFullFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.FullFrame) -> a
    void visitAnyVerificationType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.VerificationType) -> a
    void visitObjectType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.ObjectType) -> a
    void visitUninitializedType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.UninitializedType) -> a
    void visitLineNumberInfo$22557afc(proguard.classfile.attribute.LineNumberInfo) -> a
    void visitParameterInfo(proguard.classfile.Clazz,proguard.classfile.Method,int,proguard.classfile.attribute.ParameterInfo) -> a
    void visitLocalVariableInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableInfo) -> a
    void visitLocalVariableTypeInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeInfo) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitTypeAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation) -> a
    void visitTypeParameterTargetInfo(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.TypeParameterTargetInfo) -> a
    void visitSuperTypeTargetInfo(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.SuperTypeTargetInfo) -> a
    void visitTypeParameterBoundTargetInfo(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.TypeParameterBoundTargetInfo) -> a
    void visitEmptyTargetInfo$4808a18(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.EmptyTargetInfo) -> a
    void visitFormalParameterTargetInfo$d7bcaf4(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.FormalParameterTargetInfo) -> a
    void visitThrowsTargetInfo$430130d7(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.ThrowsTargetInfo) -> a
    void visitLocalVariableTargetInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.LocalVariableTargetInfo) -> a
    void visitCatchTargetInfo$1a2496f8(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.CatchTargetInfo) -> a
    void visitOffsetTargetInfo$5cfb828c(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.OffsetTargetInfo) -> a
    void visitTypeArgumentTargetInfo$4ff8d08(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.TypeArgumentTargetInfo) -> a
    void visitTypePathInfo$2ad727b0(proguard.classfile.attribute.annotation.TypePathInfo) -> a
    void visitLocalVariableTargetElement$56d9656e(proguard.classfile.attribute.annotation.target.LocalVariableTargetElement) -> a
    void visitConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ConstantElementValue) -> a
    void visitEnumConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.EnumConstantElementValue) -> a
    void visitClassElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ClassElementValue) -> a
    void visitAnnotationElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.AnnotationElementValue) -> a
    void visitArrayElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ArrayElementValue) -> a
    proguard.classfile.attribute.Attribute createAttribute(proguard.classfile.Clazz) -> a
    proguard.classfile.attribute.preverification.VerificationType createVerificationType() -> a
    proguard.classfile.attribute.annotation.ElementValue createElementValue() -> a
proguard.classfile.io.ProgramClassWriter -> dO:
    proguard.classfile.io.RuntimeDataOutput dataOutput -> a
    proguard.classfile.io.ProgramClassWriter$ConstantBodyWriter constantBodyWriter -> a
    proguard.classfile.io.ProgramClassWriter$AttributeBodyWriter attributeBodyWriter -> a
    proguard.classfile.io.ProgramClassWriter$StackMapFrameBodyWriter stackMapFrameBodyWriter -> a
    proguard.classfile.io.ProgramClassWriter$VerificationTypeBodyWriter verificationTypeBodyWriter -> a
    proguard.classfile.io.ProgramClassWriter$ElementValueBodyWriter elementValueBodyWriter -> a
    void <init>(java.io.DataOutput) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryMember(proguard.classfile.LibraryClass,proguard.classfile.LibraryMember) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
proguard.classfile.io.ProgramClassWriter$AttributeBodyWriter -> dP:
    proguard.classfile.io.ProgramClassWriter this$0 -> a
    void <init>(proguard.classfile.io.ProgramClassWriter) -> <init>
    void visitUnknownAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.UnknownAttribute) -> a
    void visitBootstrapMethodsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodsAttribute) -> a
    void visitSourceFileAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceFileAttribute) -> a
    void visitSourceDirAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceDirAttribute) -> a
    void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute) -> a
    void visitEnclosingMethodAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.EnclosingMethodAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitConstantValueAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.ConstantValueAttribute) -> a
    void visitMethodParametersAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.MethodParametersAttribute) -> a
    void visitExceptionsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.ExceptionsAttribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitStackMapAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapAttribute) -> a
    void visitStackMapTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapTableAttribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitAnyAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.AnnotationsAttribute) -> a
    void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute) -> a
    void visitAnyTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotationsAttribute) -> a
    void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> a
    void visitBootstrapMethodInfo(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodInfo) -> a
    void visitInnerClassesInfo(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesInfo) -> a
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
    void visitAnyStackMapFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.StackMapFrame) -> a
    void visitLineNumberInfo$22557afc(proguard.classfile.attribute.LineNumberInfo) -> a
    void visitParameterInfo(proguard.classfile.Clazz,proguard.classfile.Method,int,proguard.classfile.attribute.ParameterInfo) -> a
    void visitLocalVariableInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableInfo) -> a
    void visitLocalVariableTypeInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeInfo) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitTypeAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation) -> a
    void visitTypeParameterTargetInfo(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.TypeParameterTargetInfo) -> a
    void visitSuperTypeTargetInfo(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.SuperTypeTargetInfo) -> a
    void visitTypeParameterBoundTargetInfo(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.TypeParameterBoundTargetInfo) -> a
    void visitEmptyTargetInfo$4808a18(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.EmptyTargetInfo) -> a
    void visitFormalParameterTargetInfo$d7bcaf4(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.FormalParameterTargetInfo) -> a
    void visitThrowsTargetInfo$430130d7(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.ThrowsTargetInfo) -> a
    void visitLocalVariableTargetInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.LocalVariableTargetInfo) -> a
    void visitCatchTargetInfo$1a2496f8(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.CatchTargetInfo) -> a
    void visitOffsetTargetInfo$5cfb828c(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.OffsetTargetInfo) -> a
    void visitTypeArgumentTargetInfo$4ff8d08(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.TypeArgumentTargetInfo) -> a
    void visitTypePathInfo$2ad727b0(proguard.classfile.attribute.annotation.TypePathInfo) -> a
    void visitLocalVariableTargetElement$56d9656e(proguard.classfile.attribute.annotation.target.LocalVariableTargetElement) -> a
    void visitAnyElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ElementValue) -> a
    void <init>(proguard.classfile.io.ProgramClassWriter,byte) -> <init>
proguard.classfile.io.ProgramClassWriter$ConstantBodyWriter -> dQ:
    proguard.classfile.io.ProgramClassWriter this$0 -> a
    void <init>(proguard.classfile.io.ProgramClassWriter) -> <init>
    void visitIntegerConstant(proguard.classfile.Clazz,proguard.classfile.constant.IntegerConstant) -> a
    void visitLongConstant(proguard.classfile.Clazz,proguard.classfile.constant.LongConstant) -> a
    void visitFloatConstant(proguard.classfile.Clazz,proguard.classfile.constant.FloatConstant) -> a
    void visitDoubleConstant(proguard.classfile.Clazz,proguard.classfile.constant.DoubleConstant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitUtf8Constant(proguard.classfile.Clazz,proguard.classfile.constant.Utf8Constant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void visitMethodHandleConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodHandleConstant) -> a
    void visitAnyRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitMethodTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodTypeConstant) -> a
    void visitNameAndTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.NameAndTypeConstant) -> a
    void <init>(proguard.classfile.io.ProgramClassWriter,byte) -> <init>
proguard.classfile.io.ProgramClassWriter$ElementValueBodyWriter -> dR:
    proguard.classfile.io.ProgramClassWriter this$0 -> a
    void <init>(proguard.classfile.io.ProgramClassWriter) -> <init>
    void visitConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ConstantElementValue) -> a
    void visitEnumConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.EnumConstantElementValue) -> a
    void visitClassElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ClassElementValue) -> a
    void visitAnnotationElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.AnnotationElementValue) -> a
    void visitArrayElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ArrayElementValue) -> a
    void <init>(proguard.classfile.io.ProgramClassWriter,byte) -> <init>
proguard.classfile.io.ProgramClassWriter$StackMapFrameBodyWriter -> dS:
    proguard.classfile.io.ProgramClassWriter this$0 -> a
    void <init>(proguard.classfile.io.ProgramClassWriter) -> <init>
    void visitSameZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.SameZeroFrame) -> a
    void visitSameOneFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.SameOneFrame) -> a
    void visitLessZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.LessZeroFrame) -> a
    void visitMoreZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.MoreZeroFrame) -> a
    void visitFullFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.FullFrame) -> a
    void visitAnyVerificationType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.VerificationType) -> a
    void <init>(proguard.classfile.io.ProgramClassWriter,byte) -> <init>
proguard.classfile.io.ProgramClassWriter$VerificationTypeBodyWriter -> dT:
    proguard.classfile.io.ProgramClassWriter this$0 -> a
    void <init>(proguard.classfile.io.ProgramClassWriter) -> <init>
    void visitAnyVerificationType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.VerificationType) -> a
    void visitObjectType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.ObjectType) -> a
    void visitUninitializedType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.UninitializedType) -> a
    void <init>(proguard.classfile.io.ProgramClassWriter,byte) -> <init>
proguard.classfile.io.RuntimeDataInput -> dU:
    java.io.DataInput dataInput -> a
    void <init>(java.io.DataInput) -> <init>
    byte readByte() -> a
    double readDouble() -> a
    float readFloat() -> a
    void readFully(byte[]) -> a
    int readInt() -> a
    long readLong() -> a
    short readShort() -> a
    int readUnsignedByte() -> b
    int readUnsignedShort() -> c
    int skipBytes(int) -> a
proguard.classfile.io.RuntimeDataOutput -> dV:
    java.io.DataOutput dataOutput -> a
    void <init>(java.io.DataOutput) -> <init>
    void write(byte[]) -> a
    void writeByte(int) -> a
    void writeInt(int) -> b
    void writeUnsignedShort(int) -> c
    void writeShort(int) -> d
proguard.classfile.util.AllParameterVisitor -> dW:
    proguard.classfile.visitor.ParameterVisitor parameterVisitor -> a
    void <init>(proguard.classfile.visitor.ParameterVisitor) -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    void visitFieldType(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.Clazz) -> a
    void visitParameters(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.Clazz[]) -> a
proguard.classfile.util.ClassReferenceInitializer -> dX:
    proguard.classfile.ClassPool programClassPool -> a
    proguard.classfile.ClassPool libraryClassPool -> b
    proguard.classfile.util.WarningPrinter missingClassWarningPrinter -> a
    proguard.classfile.util.WarningPrinter missingProgramMemberWarningPrinter -> b
    proguard.classfile.util.WarningPrinter missingLibraryMemberWarningPrinter -> c
    proguard.classfile.util.WarningPrinter dependencyWarningPrinter -> d
    proguard.classfile.util.MemberFinder memberFinder -> a
    void <init>(proguard.classfile.ClassPool,proguard.classfile.ClassPool,proguard.classfile.util.WarningPrinter,proguard.classfile.util.WarningPrinter,proguard.classfile.util.WarningPrinter,proguard.classfile.util.WarningPrinter) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void visitMethodHandleConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodHandleConstant) -> a
    void visitAnyRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitMethodTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodTypeConstant) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitEnclosingMethodAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.EnclosingMethodAttribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitAnyAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.AnnotationsAttribute) -> a
    void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute) -> a
    void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> a
    void visitLocalVariableInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableInfo) -> a
    void visitLocalVariableTypeInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeInfo) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ConstantElementValue) -> a
    void visitEnumConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.EnumConstantElementValue) -> a
    void visitClassElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ClassElementValue) -> a
    void visitAnnotationElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.AnnotationElementValue) -> a
    void visitArrayElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ArrayElementValue) -> a
    void initializeElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ElementValue) -> b
    proguard.classfile.Clazz findReferencedClass(proguard.classfile.Clazz,java.lang.String) -> a
    proguard.classfile.Clazz[] findReferencedClasses(proguard.classfile.Clazz,java.lang.String) -> a
    proguard.classfile.Clazz findClass(proguard.classfile.Clazz,java.lang.String) -> b
proguard.classfile.util.ClassSubHierarchyInitializer -> dY:
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void addSubclass(proguard.classfile.Clazz,proguard.classfile.Clazz) -> a
proguard.classfile.util.ClassSuperHierarchyInitializer -> dZ:
    proguard.classfile.ClassPool programClassPool -> a
    proguard.classfile.ClassPool libraryClassPool -> b
    proguard.classfile.util.WarningPrinter missingWarningPrinter -> a
    proguard.classfile.util.WarningPrinter dependencyWarningPrinter -> b
    void <init>(proguard.classfile.ClassPool,proguard.classfile.ClassPool,proguard.classfile.util.WarningPrinter,proguard.classfile.util.WarningPrinter) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    proguard.classfile.Clazz findClass(java.lang.String,java.lang.String) -> a
proguard.classfile.util.DescriptorClassEnumeration -> ea:
    java.lang.String descriptor -> a
    int index -> a
    int nestingLevel -> b
    boolean isInnerClassName -> a
    java.lang.String accumulatedClassName -> b
    java.util.Stack accumulatedClassNames -> a
    void <init>(java.lang.String) -> <init>
    int classCount() -> a
    void reset() -> a
    boolean hasMoreClassNames() -> a
    java.lang.String nextFluff() -> a
    java.lang.String nextClassName() -> b
proguard.classfile.util.DynamicClassReferenceInitializer -> eb:
    proguard.classfile.constant.Constant[] CLASS_FOR_NAME_CONSTANTS -> a
    proguard.classfile.instruction.Instruction[] CONSTANT_CLASS_FOR_NAME_INSTRUCTIONS -> a
    proguard.classfile.instruction.Instruction[] CLASS_FOR_NAME_CAST_INSTRUCTIONS -> b
    proguard.classfile.constant.Constant[] DOT_CLASS_JAVAC_CONSTANTS -> b
    proguard.classfile.instruction.Instruction[] DOT_CLASS_JAVAC_INSTRUCTIONS -> c
    proguard.classfile.constant.Constant[] DOT_CLASS_JIKES_CONSTANTS -> c
    proguard.classfile.instruction.Instruction[] DOT_CLASS_JIKES_INSTRUCTIONS -> d
    proguard.classfile.instruction.Instruction[] DOT_CLASS_JAVAC_IMPLEMENTATION_INSTRUCTIONS -> e
    proguard.classfile.instruction.Instruction[] DOT_CLASS_JIKES_IMPLEMENTATION_INSTRUCTIONS -> f
    proguard.classfile.instruction.Instruction[] DOT_CLASS_JIKES_IMPLEMENTATION_INSTRUCTIONS2 -> g
    proguard.classfile.ClassPool programClassPool -> a
    proguard.classfile.ClassPool libraryClassPool -> b
    proguard.classfile.util.WarningPrinter missingNotePrinter -> a
    proguard.classfile.util.WarningPrinter dependencyWarningPrinter -> b
    proguard.classfile.util.WarningPrinter notePrinter -> c
    proguard.util.StringMatcher noteExceptionMatcher -> a
    proguard.classfile.util.InstructionSequenceMatcher constantClassForNameMatcher -> a
    proguard.classfile.util.InstructionSequenceMatcher classForNameCastMatcher -> b
    proguard.classfile.util.InstructionSequenceMatcher dotClassJavacMatcher -> c
    proguard.classfile.util.InstructionSequenceMatcher dotClassJikesMatcher -> d
    proguard.classfile.util.InstructionSequenceMatcher dotClassJavacImplementationMatcher -> e
    proguard.classfile.util.InstructionSequenceMatcher dotClassJikesImplementationMatcher -> f
    proguard.classfile.util.InstructionSequenceMatcher dotClassJikesImplementationMatcher2 -> g
    boolean isClassForNameInvocation -> a
    void <init>(proguard.classfile.ClassPool,proguard.classfile.ClassPool,proguard.classfile.util.WarningPrinter,proguard.classfile.util.WarningPrinter,proguard.classfile.util.WarningPrinter,proguard.util.StringMatcher) -> <init>
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodrefConstant) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    boolean isDotClassMethodref(proguard.classfile.Clazz,int) -> a
    boolean isDotClassMethodCode(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.util.InstructionSequenceMatcher,int) -> a
proguard.classfile.util.DynamicMemberReferenceInitializer -> ec:
    proguard.classfile.constant.Constant[] GET_FIELD_CONSTANTS -> a
    proguard.classfile.constant.Constant[] GET_DECLARED_FIELD_CONSTANTS -> b
    proguard.classfile.constant.Constant[] GET_CONSTRUCTOR_CONSTANTS -> c
    proguard.classfile.constant.Constant[] GET_DECLARED_CONSTRUCTOR_CONSTANTS -> d
    proguard.classfile.constant.Constant[] GET_METHOD_CONSTANTS -> e
    proguard.classfile.constant.Constant[] GET_DECLARED_METHOD_CONSTANTS -> f
    proguard.classfile.constant.Constant[] NEW_INTEGER_UPDATER_CONSTANTS -> g
    proguard.classfile.constant.Constant[] NEW_LONG_UPDATER_CONSTANTS -> h
    proguard.classfile.constant.Constant[] NEW_REFERENCE_UPDATER_CONSTANTS -> i
    proguard.classfile.instruction.Instruction[] CONSTANT_GET_FIELD_INSTRUCTIONS -> a
    proguard.classfile.instruction.Instruction[] CONSTANT_GET_METHOD_INSTRUCTIONS0 -> b
    proguard.classfile.instruction.Instruction[] CONSTANT_GET_METHOD_INSTRUCTIONS1 -> c
    proguard.classfile.instruction.Instruction[] CONSTANT_GET_METHOD_INSTRUCTIONS2 -> d
    proguard.classfile.instruction.Instruction[] CONSTANT_NEW_PRIMITIVE_UPDATER_INSTRUCTIONS -> e
    proguard.classfile.instruction.Instruction[] CONSTANT_NEW_REFERENCE_UPDATER_INSTRUCTIONS -> f
    proguard.classfile.instruction.Instruction[] GET_FIELD_INSTRUCTIONS -> g
    proguard.classfile.instruction.Instruction[] GET_CONSTRUCTOR_INSTRUCTIONS1 -> h
    proguard.classfile.instruction.Instruction[] GET_CONSTRUCTOR_INSTRUCTIONS2 -> i
    proguard.classfile.instruction.Instruction[] GET_METHOD_INSTRUCTIONS0 -> j
    proguard.classfile.instruction.Instruction[] GET_METHOD_INSTRUCTIONS1 -> k
    proguard.classfile.instruction.Instruction[] GET_METHOD_INSTRUCTIONS2 -> l
    proguard.classfile.instruction.Instruction[] NEW_UPDATER_INSTRUCTIONS -> m
    proguard.classfile.ClassPool programClassPool -> a
    proguard.classfile.ClassPool libraryClassPool -> b
    proguard.classfile.util.WarningPrinter notePrinter -> a
    proguard.util.StringMatcher noteFieldExceptionMatcher -> a
    proguard.util.StringMatcher noteMethodExceptionMatcher -> b
    proguard.classfile.util.InstructionSequenceMatcher constantGetFieldMatcher -> a
    proguard.classfile.util.InstructionSequenceMatcher constantGetDeclaredFieldMatcher -> b
    proguard.classfile.util.InstructionSequenceMatcher constantGetMethodMatcher0 -> c
    proguard.classfile.util.InstructionSequenceMatcher constantGetDeclaredMethodMatcher0 -> d
    proguard.classfile.util.InstructionSequenceMatcher constantGetMethodMatcher1 -> e
    proguard.classfile.util.InstructionSequenceMatcher constantGetDeclaredMethodMatcher1 -> f
    proguard.classfile.util.InstructionSequenceMatcher constantGetMethodMatcher2 -> g
    proguard.classfile.util.InstructionSequenceMatcher constantGetDeclaredMethodMatcher2 -> h
    proguard.classfile.util.InstructionSequenceMatcher constantGetIntegerUpdaterMatcher -> i
    proguard.classfile.util.InstructionSequenceMatcher constantGetLongUpdaterMatcher -> j
    proguard.classfile.util.InstructionSequenceMatcher constantGetReferenceUpdaterMatcher -> k
    proguard.classfile.util.InstructionSequenceMatcher getFieldMatcher -> l
    proguard.classfile.util.InstructionSequenceMatcher getDeclaredFieldMatcher -> m
    proguard.classfile.util.InstructionSequenceMatcher getConstructorMatcher1 -> n
    proguard.classfile.util.InstructionSequenceMatcher getDeclaredConstructorMatcher1 -> o
    proguard.classfile.util.InstructionSequenceMatcher getConstructorMatcher2 -> p
    proguard.classfile.util.InstructionSequenceMatcher getDeclaredConstructorMatcher2 -> q
    proguard.classfile.util.InstructionSequenceMatcher getMethodMatcher0 -> r
    proguard.classfile.util.InstructionSequenceMatcher getDeclaredMethodMatcher0 -> s
    proguard.classfile.util.InstructionSequenceMatcher getMethodMatcher1 -> t
    proguard.classfile.util.InstructionSequenceMatcher getDeclaredMethodMatcher1 -> u
    proguard.classfile.util.InstructionSequenceMatcher getMethodMatcher2 -> v
    proguard.classfile.util.InstructionSequenceMatcher getDeclaredMethodMatcher2 -> w
    proguard.classfile.util.InstructionSequenceMatcher getIntegerUpdaterMatcher -> x
    proguard.classfile.util.InstructionSequenceMatcher getLongUpdaterMatcher -> y
    proguard.classfile.util.InstructionSequenceMatcher getReferenceUpdaterMatcher -> z
    proguard.classfile.util.MemberFinder memberFinder -> a
    proguard.classfile.Clazz referencedClass -> a
    java.lang.String descriptor -> a
    boolean isDeclared -> a
    boolean isField -> b
    void <init>(proguard.classfile.ClassPool,proguard.classfile.ClassPool,proguard.classfile.util.WarningPrinter,proguard.util.StringMatcher,proguard.util.StringMatcher) -> <init>
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void matchGetMember(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction,proguard.classfile.util.InstructionSequenceMatcher,proguard.classfile.util.InstructionSequenceMatcher,boolean,boolean,java.lang.String,java.lang.String) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
proguard.classfile.util.EnumFieldReferenceInitializer -> ed:
    proguard.classfile.visitor.MemberVisitor enumFieldFinder -> a
    java.lang.String enumTypeName -> a
    java.lang.String enumConstantName -> b
    boolean enumConstantNameFound -> a
    proguard.classfile.Clazz referencedEnumClass -> a
    proguard.classfile.Field referencedEnumField -> a
    void <init>() -> <init>
    void visitAnyElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ElementValue) -> a
    void visitEnumConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.EnumConstantElementValue) -> a
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitFieldrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.FieldrefConstant) -> a
proguard.classfile.util.InstructionSequenceMatcher -> ee:
    proguard.classfile.constant.Constant[] patternConstants -> a
    proguard.classfile.instruction.Instruction[] patternInstructions -> a
    boolean matching -> a
    int patternInstructionIndex -> a
    int[] matchedInstructionOffsets -> a
    int matchedArgumentFlags -> b
    int[] matchedArguments -> b
    long[] matchedConstantFlags -> a
    int[] matchedConstantIndices -> c
    int constantFlags -> c
    int previousConstantFlags -> d
    proguard.classfile.constant.Constant patternConstant -> a
    boolean matchingConstant -> b
    void <init>(proguard.classfile.constant.Constant[],proguard.classfile.instruction.Instruction[]) -> <init>
    void reset() -> b
    boolean wasConstant(int) -> a
    int matchedArgument(int) -> a
    int[] matchedArguments(int[]) -> a
    int matchedConstantIndex(int) -> b
    int matchedBranchOffset(int,int) -> a
    int[] matchedJumpOffsets(int,int[]) -> a
    void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction) -> a
    void visitTableSwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.TableSwitchInstruction) -> a
    void visitLookUpSwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.LookUpSwitchInstruction) -> a
    void visitIntegerConstant(proguard.classfile.Clazz,proguard.classfile.constant.IntegerConstant) -> a
    void visitLongConstant(proguard.classfile.Clazz,proguard.classfile.constant.LongConstant) -> a
    void visitFloatConstant(proguard.classfile.Clazz,proguard.classfile.constant.FloatConstant) -> a
    void visitDoubleConstant(proguard.classfile.Clazz,proguard.classfile.constant.DoubleConstant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitUtf8Constant(proguard.classfile.Clazz,proguard.classfile.constant.Utf8Constant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void visitMethodHandleConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodHandleConstant) -> a
    void visitAnyRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitMethodTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodTypeConstant) -> a
    void visitNameAndTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.NameAndTypeConstant) -> a
    boolean matchingOpcodes(proguard.classfile.instruction.Instruction,proguard.classfile.instruction.Instruction) -> a
    boolean matchingArguments(int,int) -> a
    void setMatchingArgument(int,int) -> a
    boolean isMatchingArgumentIndex(int) -> b
    boolean matchingConstantIndices(proguard.classfile.Clazz,int,int) -> a
    boolean matchingBranchOffsets(int,int,int) -> a
    boolean matchingJumpOffsets(int,int[],int[]) -> a
    void checkMatch(boolean,proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
proguard.classfile.util.InternalTypeEnumeration -> ef:
    java.lang.String descriptor -> a
    int formalTypeParametersIndex -> a
    int openIndex -> b
    int closeIndex -> c
    int index -> d
    void <init>(java.lang.String) -> <init>
    boolean hasFormalTypeParameters() -> a
    java.lang.String formalTypeParameters() -> a
    boolean isMethodSignature() -> b
    boolean hasMoreTypes() -> c
    java.lang.String nextType() -> b
    java.lang.String returnType() -> c
    void skipGeneric() -> a
proguard.classfile.util.MemberFinder -> eg:
    proguard.classfile.util.MemberFinder$MemberFoundException MEMBER_FOUND -> a
    proguard.classfile.Clazz clazz -> a
    proguard.classfile.Member member -> a
    void <init>() -> <init>
    proguard.classfile.Member findMember(proguard.classfile.Clazz,proguard.classfile.Clazz,java.lang.String,java.lang.String,boolean) -> a
    boolean isOverriden(proguard.classfile.Clazz,proguard.classfile.Method) -> a
    void visitAnyMember(proguard.classfile.Clazz,proguard.classfile.Member) -> a
    void <clinit>() -> <clinit>
proguard.classfile.util.MemberFinder$MemberFoundException -> eh:
    void <init>() -> <init>
    void <init>(byte) -> <init>
proguard.classfile.util.MethodLinker -> ei:
    java.util.Map memberMap -> a
    void <init>() -> <init>
    void visitAnyClass(proguard.classfile.Clazz) -> a
    void visitAnyMember(proguard.classfile.Clazz,proguard.classfile.Member) -> a
    proguard.classfile.Member lastMember(proguard.classfile.Member) -> a
    proguard.classfile.VisitorAccepter lastVisitorAccepter(proguard.classfile.VisitorAccepter) -> a
proguard.classfile.util.SimplifiedVisitor -> ej:
    void <init>() -> <init>
    void visitAnyClass(proguard.classfile.Clazz) -> a
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitAnyMember(proguard.classfile.Clazz,proguard.classfile.Member) -> a
    void visitProgramMember(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryMember(proguard.classfile.LibraryClass,proguard.classfile.LibraryMember) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitIntegerConstant(proguard.classfile.Clazz,proguard.classfile.constant.IntegerConstant) -> a
    void visitLongConstant(proguard.classfile.Clazz,proguard.classfile.constant.LongConstant) -> a
    void visitFloatConstant(proguard.classfile.Clazz,proguard.classfile.constant.FloatConstant) -> a
    void visitDoubleConstant(proguard.classfile.Clazz,proguard.classfile.constant.DoubleConstant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitUtf8Constant(proguard.classfile.Clazz,proguard.classfile.constant.Utf8Constant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void visitMethodHandleConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodHandleConstant) -> a
    void visitAnyRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> a
    void visitFieldrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.FieldrefConstant) -> a
    void visitAnyMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> b
    void visitInterfaceMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.InterfaceMethodrefConstant) -> a
    void visitMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodrefConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitMethodTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodTypeConstant) -> a
    void visitNameAndTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.NameAndTypeConstant) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitUnknownAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.UnknownAttribute) -> a
    void visitBootstrapMethodsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodsAttribute) -> a
    void visitSourceFileAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceFileAttribute) -> a
    void visitSourceDirAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceDirAttribute) -> a
    void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute) -> a
    void visitEnclosingMethodAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.EnclosingMethodAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitConstantValueAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.ConstantValueAttribute) -> a
    void visitMethodParametersAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.MethodParametersAttribute) -> a
    void visitExceptionsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.ExceptionsAttribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitStackMapAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapAttribute) -> a
    void visitStackMapTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapTableAttribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitAnyAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.AnnotationsAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute) -> a
    void visitRuntimeVisibleParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleParameterAnnotationsAttribute) -> a
    void visitRuntimeInvisibleParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleParameterAnnotationsAttribute) -> a
    void visitAnyTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> a
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction) -> a
    void visitAnySwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SwitchInstruction) -> a
    void visitTableSwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.TableSwitchInstruction) -> a
    void visitLookUpSwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.LookUpSwitchInstruction) -> a
    void visitAnyStackMapFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.StackMapFrame) -> a
    void visitSameZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.SameZeroFrame) -> a
    void visitSameOneFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.SameOneFrame) -> a
    void visitLessZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.LessZeroFrame) -> a
    void visitMoreZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.MoreZeroFrame) -> a
    void visitFullFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.FullFrame) -> a
    void visitAnyVerificationType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.VerificationType) -> a
    void visitIntegerType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.IntegerType) -> a
    void visitFloatType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.FloatType) -> a
    void visitLongType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.LongType) -> a
    void visitDoubleType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.DoubleType) -> a
    void visitTopType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.TopType) -> a
    void visitObjectType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.ObjectType) -> a
    void visitNullType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.NullType) -> a
    void visitUninitializedType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.UninitializedType) -> a
    void visitUninitializedThisType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.UninitializedThisType) -> a
    void visitStackIntegerType$7bc2a91e(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.IntegerType) -> b
    void visitStackFloatType$35a8a37c(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.FloatType) -> b
    void visitStackLongType$1767fbc0(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.LongType) -> b
    void visitStackDoubleType$25235eb5(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.DoubleType) -> b
    void visitStackTopType$16ec47eb(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.TopType) -> b
    void visitStackObjectType$d4ae21d(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.ObjectType) -> b
    void visitStackNullType$2638f5ab(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.NullType) -> b
    void visitStackUninitializedType$62b00965(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.UninitializedType) -> b
    void visitStackUninitializedThisType$2b406167(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.UninitializedThisType) -> b
    void visitVariablesIntegerType$7bc2a91e(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.IntegerType) -> c
    void visitVariablesFloatType$35a8a37c(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.FloatType) -> c
    void visitVariablesLongType$1767fbc0(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.LongType) -> c
    void visitVariablesDoubleType$25235eb5(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.DoubleType) -> c
    void visitVariablesTopType$16ec47eb(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.TopType) -> c
    void visitVariablesObjectType$d4ae21d(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.ObjectType) -> c
    void visitVariablesNullType$2638f5ab(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.NullType) -> c
    void visitVariablesUninitializedType$62b00965(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.UninitializedType) -> c
    void visitVariablesUninitializedThisType$2b406167(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.UninitializedThisType) -> c
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Member,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Method,int,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitTypeAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation) -> a
    void visitAnyTargetInfo$1a61f70a() -> a_
    void visitTypeParameterTargetInfo(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.TypeParameterTargetInfo) -> a
    void visitSuperTypeTargetInfo(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.SuperTypeTargetInfo) -> a
    void visitTypeParameterBoundTargetInfo(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.TypeParameterBoundTargetInfo) -> a
    void visitEmptyTargetInfo$4808a18(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.EmptyTargetInfo) -> a
    void visitEmptyTargetInfo(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.EmptyTargetInfo) -> a
    void visitFormalParameterTargetInfo$d7bcaf4(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.FormalParameterTargetInfo) -> a
    void visitThrowsTargetInfo$430130d7(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.ThrowsTargetInfo) -> a
    void visitLocalVariableTargetInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.LocalVariableTargetInfo) -> a
    void visitCatchTargetInfo$1a2496f8(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.CatchTargetInfo) -> a
    void visitOffsetTargetInfo$5cfb828c(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.OffsetTargetInfo) -> a
    void visitTypeArgumentTargetInfo$4ff8d08(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.TypeArgumentTargetInfo) -> a
    void visitTypePathInfo$2ad727b0(proguard.classfile.attribute.annotation.TypePathInfo) -> a
    void visitAnyElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ElementValue) -> a
    void visitConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ConstantElementValue) -> a
    void visitEnumConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.EnumConstantElementValue) -> a
    void visitClassElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ClassElementValue) -> a
    void visitAnnotationElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.AnnotationElementValue) -> a
    void visitArrayElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ArrayElementValue) -> a
proguard.classfile.util.StringReferenceInitializer -> ek:
    proguard.classfile.ClassPool programClassPool -> a
    proguard.classfile.ClassPool libraryClassPool -> b
    void <init>(proguard.classfile.ClassPool,proguard.classfile.ClassPool) -> <init>
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
proguard.classfile.util.StringSharer -> el:
    java.lang.String name -> a
    java.lang.String type -> b
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitAnyRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> a
    void visitNameAndTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.NameAndTypeConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitUtf8Constant(proguard.classfile.Clazz,proguard.classfile.constant.Utf8Constant) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
proguard.classfile.util.WarningPrinter -> em:
    java.io.PrintStream printStream -> a
    proguard.util.StringMatcher classFilter -> a
    int warningCount -> a
    void <init>() -> <init>
    void <init>(java.io.PrintStream) -> <init>
    void <init>(java.io.PrintStream,java.util.List) -> <init>
    void print(java.lang.String,java.lang.String) -> a
    boolean accepts(java.lang.String) -> a
    void print(java.lang.String,java.lang.String,java.lang.String) -> a
    void print(java.lang.String) -> a
    int getWarningCount() -> a
proguard.classfile.visitor.AllClassVisitor -> en:
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitClassPool(proguard.classfile.ClassPool) -> a
proguard.classfile.visitor.AllFieldVisitor -> eo:
    proguard.classfile.visitor.MemberVisitor memberVisitor -> a
    void <init>(proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.classfile.visitor.AllMemberVisitor -> ep:
    proguard.classfile.visitor.MemberVisitor memberVisitor -> a
    void <init>(proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.classfile.visitor.AllMethodVisitor -> eq:
    proguard.classfile.visitor.MemberVisitor memberVisitor -> a
    void <init>(proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.classfile.visitor.BottomClassFilter -> er:
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.classfile.visitor.ClassAccessFilter -> es:
    int requiredSetAccessFlags -> a
    int requiredUnsetAccessFlags -> b
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(int,int,proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    boolean accepted(int) -> a
proguard.classfile.visitor.ClassCleaner -> et:
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitProgramMember(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember) -> a
    void visitLibraryMember(proguard.classfile.LibraryClass,proguard.classfile.LibraryMember) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitBootstrapMethodsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodsAttribute) -> a
    void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute) -> a
    void visitMethodParametersAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.MethodParametersAttribute) -> a
    void visitExceptionsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.ExceptionsAttribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitStackMapAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapAttribute) -> a
    void visitStackMapTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapTableAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitAnyAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.AnnotationsAttribute) -> a
    void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute) -> a
    void visitAnyTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotationsAttribute) -> a
    void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> a
    void visitBootstrapMethodInfo(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodInfo) -> a
    void visitInnerClassesInfo(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesInfo) -> a
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
    void visitSameZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.SameZeroFrame) -> a
    void visitSameOneFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.SameOneFrame) -> a
    void visitLessZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.LessZeroFrame) -> a
    void visitMoreZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.MoreZeroFrame) -> a
    void visitFullFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.FullFrame) -> a
    void visitAnyVerificationType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.VerificationType) -> a
    void visitParameterInfo(proguard.classfile.Clazz,proguard.classfile.Method,int,proguard.classfile.attribute.ParameterInfo) -> a
    void visitLocalVariableInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableInfo) -> a
    void visitLocalVariableTypeInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeInfo) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitTypeAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation) -> a
    void visitAnyElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ElementValue) -> a
    void visitAnnotationElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.AnnotationElementValue) -> a
    void visitArrayElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ArrayElementValue) -> a
proguard.classfile.visitor.ClassCollector -> eu:
    java.util.Set set -> a
    void <init>(java.util.Set) -> <init>
    void visitAnyClass(proguard.classfile.Clazz) -> a
proguard.classfile.visitor.ClassCounter -> ev:
    int count -> a
    void <init>() -> <init>
    int getCount() -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
proguard.classfile.visitor.ClassHierarchyTraveler -> ew:
    boolean visitThisClass -> a
    boolean visitSuperClass -> b
    boolean visitInterfaces -> c
    boolean visitSubclasses -> d
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(boolean,boolean,boolean,boolean,proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.classfile.visitor.ClassNameFilter -> ex:
    proguard.util.StringMatcher regularExpressionMatcher -> a
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(java.lang.String,proguard.classfile.visitor.ClassVisitor) -> <init>
    void <init>(java.util.List,proguard.classfile.visitor.ClassVisitor) -> <init>
    void <init>(proguard.util.StringMatcher,proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    boolean accepted(java.lang.String) -> a
proguard.classfile.visitor.ClassPoolFiller -> ey:
    proguard.classfile.ClassPool classPool -> a
    void <init>(proguard.classfile.ClassPool) -> <init>
    void visitAnyClass(proguard.classfile.Clazz) -> a
proguard.classfile.visitor.ClassPoolVisitor -> ez:
    void visitClassPool(proguard.classfile.ClassPool) -> a
proguard.classfile.visitor.ClassPresenceFilter -> eA:
    proguard.classfile.ClassPool classPool -> a
    proguard.classfile.visitor.ClassVisitor presentClassVisitor -> a
    proguard.classfile.visitor.ClassVisitor missingClassVisitor -> b
    void <init>(proguard.classfile.ClassPool,proguard.classfile.visitor.ClassVisitor,proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    proguard.classfile.visitor.ClassVisitor classFileVisitor(proguard.classfile.Clazz) -> a
proguard.classfile.visitor.ClassPrinter -> eB:
    java.io.PrintStream ps -> a
    int indentation -> a
    void <init>() -> <init>
    void <init>(java.io.PrintStream) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitIntegerConstant(proguard.classfile.Clazz,proguard.classfile.constant.IntegerConstant) -> a
    void visitLongConstant(proguard.classfile.Clazz,proguard.classfile.constant.LongConstant) -> a
    void visitFloatConstant(proguard.classfile.Clazz,proguard.classfile.constant.FloatConstant) -> a
    void visitDoubleConstant(proguard.classfile.Clazz,proguard.classfile.constant.DoubleConstant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitUtf8Constant(proguard.classfile.Clazz,proguard.classfile.constant.Utf8Constant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void visitMethodHandleConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodHandleConstant) -> a
    void visitFieldrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.FieldrefConstant) -> a
    void visitInterfaceMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.InterfaceMethodrefConstant) -> a
    void visitMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodrefConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitMethodTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodTypeConstant) -> a
    void visitNameAndTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.NameAndTypeConstant) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitMember(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember) -> b
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    void visitUnknownAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.UnknownAttribute) -> a
    void visitBootstrapMethodsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodsAttribute) -> a
    void visitSourceFileAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceFileAttribute) -> a
    void visitSourceDirAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceDirAttribute) -> a
    void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute) -> a
    void visitEnclosingMethodAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.EnclosingMethodAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitConstantValueAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.ConstantValueAttribute) -> a
    void visitMethodParametersAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.MethodParametersAttribute) -> a
    void visitExceptionsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.ExceptionsAttribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitStackMapAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapAttribute) -> a
    void visitStackMapTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapTableAttribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitRuntimeVisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeVisibleAnnotationsAttribute) -> a
    void visitRuntimeInvisibleAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeInvisibleAnnotationsAttribute) -> a
    void visitRuntimeVisibleParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeVisibleParameterAnnotationsAttribute) -> a
    void visitRuntimeInvisibleParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.RuntimeInvisibleParameterAnnotationsAttribute) -> a
    void visitRuntimeVisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeVisibleTypeAnnotationsAttribute) -> a
    void visitRuntimeInvisibleTypeAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.RuntimeInvisibleTypeAnnotationsAttribute) -> a
    void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> a
    void visitBootstrapMethodInfo(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodInfo) -> a
    void visitInnerClassesInfo(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesInfo) -> a
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitTableSwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.TableSwitchInstruction) -> a
    void visitLookUpSwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.LookUpSwitchInstruction) -> a
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
    void visitSameZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.SameZeroFrame) -> a
    void visitSameOneFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.SameOneFrame) -> a
    void visitLessZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.LessZeroFrame) -> a
    void visitMoreZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.MoreZeroFrame) -> a
    void visitFullFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.FullFrame) -> a
    void visitIntegerType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.IntegerType) -> a
    void visitFloatType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.FloatType) -> a
    void visitLongType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.LongType) -> a
    void visitDoubleType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.DoubleType) -> a
    void visitTopType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.TopType) -> a
    void visitObjectType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.ObjectType) -> a
    void visitNullType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.NullType) -> a
    void visitUninitializedType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.UninitializedType) -> a
    void visitUninitializedThisType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.UninitializedThisType) -> a
    void visitLineNumberInfo$22557afc(proguard.classfile.attribute.LineNumberInfo) -> a
    void visitParameterInfo(proguard.classfile.Clazz,proguard.classfile.Method,int,proguard.classfile.attribute.ParameterInfo) -> a
    void visitLocalVariableInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableInfo) -> a
    void visitLocalVariableTypeInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeInfo) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitTypeAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation) -> a
    void visitTypeParameterTargetInfo(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.TypeParameterTargetInfo) -> a
    void visitSuperTypeTargetInfo(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.SuperTypeTargetInfo) -> a
    void visitTypeParameterBoundTargetInfo(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.TypeParameterBoundTargetInfo) -> a
    void visitEmptyTargetInfo$4808a18(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.EmptyTargetInfo) -> a
    void visitFormalParameterTargetInfo$d7bcaf4(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.FormalParameterTargetInfo) -> a
    void visitThrowsTargetInfo$430130d7(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.ThrowsTargetInfo) -> a
    void visitLocalVariableTargetInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.LocalVariableTargetInfo) -> a
    void visitCatchTargetInfo$1a2496f8(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.CatchTargetInfo) -> a
    void visitOffsetTargetInfo$5cfb828c(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.OffsetTargetInfo) -> a
    void visitTypeArgumentTargetInfo$4ff8d08(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.TypeAnnotation,proguard.classfile.attribute.annotation.target.TypeArgumentTargetInfo) -> a
    void visitTypePathInfo$2ad727b0(proguard.classfile.attribute.annotation.TypePathInfo) -> a
    void visitLocalVariableTargetElement$56d9656e(proguard.classfile.attribute.annotation.target.LocalVariableTargetElement) -> a
    void visitConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ConstantElementValue) -> a
    void visitEnumConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.EnumConstantElementValue) -> a
    void visitClassElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ClassElementValue) -> a
    void visitAnnotationElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.AnnotationElementValue) -> a
    void visitArrayElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ArrayElementValue) -> a
    void indent() -> b
    void outdent() -> c
    void println(java.lang.String) -> a
    void print(java.lang.String) -> b
    java.lang.String visitorInfo(proguard.classfile.VisitorAccepter) -> a
proguard.classfile.visitor.ClassVersionFilter -> eC:
    int minimumClassVersion -> a
    int maximumClassVersion -> b
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(int,proguard.classfile.visitor.ClassVisitor) -> <init>
    void <init>(int,int,proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.classfile.visitor.ClassVersionSetter -> eD:
    int classVersion -> a
    java.util.Set newerClassVersions -> a
    void <init>(int,java.util.Set) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.classfile.visitor.ClassVisitor -> eE:
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.classfile.visitor.ConcreteClassDownTraveler -> eF:
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.classfile.visitor.DotClassClassVisitor -> eG:
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
proguard.classfile.visitor.DynamicReturnedClassVisitor -> eH:
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
proguard.classfile.visitor.ExceptClassesFilter -> eI:
    proguard.classfile.Clazz[] exceptClasses -> a
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(proguard.classfile.Clazz[],proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    boolean present(proguard.classfile.Clazz) -> a
proguard.classfile.visitor.ExceptionCounter -> eJ:
    int count -> a
    void <init>() -> <init>
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
proguard.classfile.visitor.ExceptionExcludedOffsetFilter -> eK:
    int instructionOffset -> a
    proguard.classfile.attribute.visitor.ExceptionInfoVisitor exceptionInfoVisitor -> a
    void <init>(int,proguard.classfile.attribute.visitor.ExceptionInfoVisitor) -> <init>
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
proguard.classfile.visitor.ExceptionHandlerConstantVisitor -> eL:
    proguard.classfile.constant.visitor.ConstantVisitor constantVisitor -> a
    void <init>(proguard.classfile.constant.visitor.ConstantVisitor) -> <init>
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
proguard.classfile.visitor.ExceptionHandlerFilter -> eM:
    int startOffset -> a
    int endOffset -> b
    proguard.classfile.attribute.visitor.ExceptionInfoVisitor exceptionInfoVisitor -> a
    void <init>(int,int,proguard.classfile.attribute.visitor.ExceptionInfoVisitor) -> <init>
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
proguard.classfile.visitor.ImplementedClassConstantFilter -> eN:
    proguard.classfile.Clazz implementedClass -> a
    proguard.classfile.constant.visitor.ConstantVisitor constantVisitor -> a
    void <init>(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor) -> <init>
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
proguard.classfile.visitor.ImplementingClassConstantFilter -> eO:
    proguard.classfile.Clazz implementingClass -> a
    proguard.classfile.constant.visitor.ConstantVisitor constantVisitor -> a
    void <init>(proguard.classfile.Clazz,proguard.classfile.constant.visitor.ConstantVisitor) -> <init>
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
proguard.classfile.visitor.InitializerMethodFilter -> eP:
    proguard.classfile.visitor.MemberVisitor initializerMemberVisitor -> a
    proguard.classfile.visitor.MemberVisitor otherMemberVisitor -> b
    void <init>(proguard.classfile.visitor.MemberVisitor,proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    proguard.classfile.visitor.MemberVisitor applicableMemberVisitor(proguard.classfile.Clazz,proguard.classfile.Member) -> a
proguard.classfile.visitor.LibraryClassFilter -> eQ:
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.classfile.visitor.MemberAccessFilter -> eR:
    int requiredSetAccessFlags -> a
    int requiredUnsetAccessFlags -> b
    int requiredOneSetAccessFlags -> c
    proguard.classfile.visitor.MemberVisitor memberVisitor -> a
    void <init>(int,int,proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    boolean accepted(int) -> a
proguard.classfile.visitor.MemberClassAccessFilter -> eS:
    proguard.classfile.Clazz referencingClass -> a
    proguard.classfile.visitor.MemberVisitor memberVisitor -> a
    void <init>(proguard.classfile.Clazz,proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    boolean accepted(proguard.classfile.Clazz,int) -> a
proguard.classfile.visitor.MemberCollector -> eT:
    java.util.Set set -> a
    void <init>(java.util.Set) -> <init>
    void visitAnyMember(proguard.classfile.Clazz,proguard.classfile.Member) -> a
proguard.classfile.visitor.MemberCounter -> eU:
    int count -> a
    void <init>() -> <init>
    int getCount() -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
proguard.classfile.visitor.MemberDescriptorFilter -> eV:
    proguard.util.StringMatcher regularExpressionMatcher -> a
    proguard.classfile.visitor.MemberVisitor memberVisitor -> a
    void <init>(java.lang.String,proguard.classfile.visitor.MemberVisitor) -> <init>
    void <init>(proguard.util.StringMatcher,proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    boolean accepted(java.lang.String) -> a
proguard.classfile.visitor.MemberDescriptorReferencedClassVisitor -> eW:
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramMember(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember) -> a
    void visitLibraryMember(proguard.classfile.LibraryClass,proguard.classfile.LibraryMember) -> a
proguard.classfile.visitor.MemberNameFilter -> eX:
    proguard.util.StringMatcher regularExpressionMatcher -> a
    proguard.classfile.visitor.MemberVisitor memberVisitor -> a
    void <init>(java.lang.String,proguard.classfile.visitor.MemberVisitor) -> <init>
    void <init>(proguard.util.StringMatcher,proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    boolean accepted(java.lang.String) -> a
proguard.classfile.visitor.MemberToClassVisitor -> eY:
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    proguard.classfile.Clazz lastVisitedClass -> a
    void <init>(proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
proguard.classfile.visitor.MemberVisitor -> eZ:
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
proguard.classfile.visitor.MethodImplementationFilter -> fa:
    proguard.classfile.visitor.MemberVisitor memberVisitor -> a
    void <init>(proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
proguard.classfile.visitor.MultiClassPoolVisitor -> fb:
    proguard.classfile.visitor.ClassPoolVisitor[] classPoolVisitors -> a
    int classPoolVisitorCount -> a
    void <init>() -> <init>
    void addClassPoolVisitor(proguard.classfile.visitor.ClassPoolVisitor) -> a
    void visitClassPool(proguard.classfile.ClassPool) -> a
proguard.classfile.visitor.MultiClassVisitor -> fc:
    proguard.classfile.visitor.ClassVisitor[] classVisitors -> a
    int classVisitorCount -> a
    void <init>() -> <init>
    void <init>(proguard.classfile.visitor.ClassVisitor[]) -> <init>
    void addClassVisitor(proguard.classfile.visitor.ClassVisitor) -> a
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.classfile.visitor.MultiMemberVisitor -> fd:
    proguard.classfile.visitor.MemberVisitor[] memberVisitors -> a
    int memberVisitorCount -> a
    void <init>() -> <init>
    void <init>(proguard.classfile.visitor.MemberVisitor[]) -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
proguard.classfile.visitor.NamedClassVisitor -> fe:
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    java.lang.String name -> a
    void <init>(proguard.classfile.visitor.ClassVisitor,java.lang.String) -> <init>
    void visitClassPool(proguard.classfile.ClassPool) -> a
proguard.classfile.visitor.NamedFieldVisitor -> ff:
    java.lang.String name -> a
    java.lang.String descriptor -> b
    proguard.classfile.visitor.MemberVisitor memberVisitor -> a
    void <init>(java.lang.String,java.lang.String,proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.classfile.visitor.NamedMethodVisitor -> fg:
    java.lang.String name -> a
    java.lang.String descriptor -> b
    proguard.classfile.visitor.MemberVisitor memberVisitor -> a
    void <init>(java.lang.String,java.lang.String,proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.classfile.visitor.ParameterVisitor -> fh:
    void visitParameter$f53a1ca(int,int,java.lang.String,proguard.classfile.Clazz) -> a
proguard.classfile.visitor.ProgramClassFilter -> fi:
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.classfile.visitor.ReferencedClassVisitor -> fj:
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramMember(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember) -> a
    void visitLibraryMember(proguard.classfile.LibraryClass,proguard.classfile.LibraryMember) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitAnyRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitMethodTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodTypeConstant) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitEnclosingMethodAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.EnclosingMethodAttribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitAnyAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.AnnotationsAttribute) -> a
    void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute) -> a
    void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> a
    void visitLocalVariableInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableInfo) -> a
    void visitLocalVariableTypeInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeInfo) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitAnyElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ElementValue) -> a
    void visitEnumConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.EnumConstantElementValue) -> a
    void visitClassElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ClassElementValue) -> a
    void visitAnnotationElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.AnnotationElementValue) -> a
    void visitArrayElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ArrayElementValue) -> a
proguard.classfile.visitor.ReferencedMemberVisitor -> fk:
    proguard.classfile.visitor.MemberVisitor memberVisitor -> a
    void <init>(proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitAnyRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> a
    void visitAnyElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ElementValue) -> a
proguard.classfile.visitor.SimilarMemberVisitor -> fl:
    proguard.classfile.Clazz targetClass -> a
    boolean visitThisMember -> a
    boolean visitSuperMembers -> b
    boolean visitInterfaceMembers -> c
    boolean visitOverridingMembers -> d
    proguard.classfile.visitor.MemberVisitor memberVisitor -> a
    void <init>(proguard.classfile.Clazz,boolean,boolean,boolean,boolean,proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
proguard.classfile.visitor.SimpleClassPrinter -> fm:
    boolean printAccessModifiers -> a
    java.io.PrintStream ps -> a
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    void <init>(boolean,java.io.PrintStream) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
proguard.classfile.visitor.SubclassFilter -> fn:
    proguard.classfile.Clazz subclass -> a
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(proguard.classfile.Clazz,proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    boolean present(proguard.classfile.Clazz[]) -> a
proguard.classfile.visitor.SubclassTraveler -> fo:
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.evaluation.BasicBranchUnit -> fp:
    boolean wasCalled -> a
    proguard.evaluation.value.InstructionOffsetValue traceBranchTargets -> a
    void <init>() -> <init>
    void branch$6087a1fd(int) -> a
    void branchConditionally(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int,int) -> a
    void returnFromMethod() -> a
    void throwException() -> b
proguard.evaluation.BasicInvocationUnit -> fq:
    proguard.evaluation.value.ValueFactory valueFactory -> a
    boolean isStatic -> a
    boolean isLoad -> b
    proguard.evaluation.Stack stack -> a
    proguard.classfile.Clazz returnTypeClass -> a
    void <init>(proguard.evaluation.value.ValueFactory) -> <init>
    void enterMethod(proguard.classfile.Clazz,proguard.classfile.Method,proguard.evaluation.Variables) -> a
    void exitMethod(proguard.classfile.Clazz,proguard.classfile.Method,proguard.evaluation.value.Value) -> a
    void invokeMember$23415491(proguard.classfile.Clazz,proguard.classfile.instruction.ConstantInstruction,proguard.evaluation.Stack) -> a
    void visitFieldrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.FieldrefConstant) -> a
    void visitAnyMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> b
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void setFieldClassValue$254174b4(proguard.classfile.constant.RefConstant,proguard.evaluation.value.ReferenceValue) -> a
    void setFieldValue$4891f91b(proguard.classfile.constant.RefConstant,proguard.evaluation.value.Value) -> a
    proguard.evaluation.value.Value getFieldValue(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant,java.lang.String) -> a
    void setMethodParameterValue$2df096d4(proguard.classfile.constant.RefConstant,int,proguard.evaluation.value.Value) -> a
    proguard.evaluation.value.Value getMethodParameterValue(proguard.classfile.Clazz,proguard.classfile.Method,int,java.lang.String,proguard.classfile.Clazz) -> a
    void setMethodReturnValue$1c07c5a6(proguard.classfile.Method,proguard.evaluation.value.Value) -> a
    proguard.evaluation.value.Value getMethodReturnValue(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant,java.lang.String) -> b
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
proguard.evaluation.BranchTargetFinder -> fr:
    short[] instructionMarks -> a
    int[] subroutineStarts -> d
    int[] subroutineEnds -> a
    int[] creationOffsets -> b
    int[] initializationOffsets -> c
    int superInitializationOffset -> a
    boolean containsSubroutines -> a
    boolean repeat -> b
    int currentSubroutineStart -> b
    int[] recentCreationOffsets -> e
    int recentCreationOffsetIndex -> c
    boolean isInitializer -> c
    void <init>() -> <init>
    boolean isInstruction(int) -> a
    boolean isBranchTarget(int) -> b
    boolean isExceptionStart(int) -> c
    boolean isExceptionEnd(int) -> d
    boolean isSubroutineInvocation(int) -> e
    boolean isSubroutineStart(int) -> f
    boolean isSubroutine(int) -> g
    boolean isSubroutineReturning(int) -> h
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
    void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction) -> a
    void visitAnySwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SwitchInstruction) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodrefConstant) -> a
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
    void markBranch(int,int) -> a
    void markBranchOrigin(int) -> a
    void markBranchTarget(int,int) -> b
    void markBranchSubroutineStart(int,int,int) -> a
    void markAfterBranchOrigin(int) -> b
    void checkSubroutine(int) -> c
proguard.evaluation.BranchUnit -> fs:
    void branch$6087a1fd(int) -> a
    void branchConditionally(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int,int) -> a
    void returnFromMethod() -> a
    void throwException() -> b
proguard.evaluation.ClassConstantValueFactory -> ft:
    void <init>(proguard.evaluation.value.ValueFactory) -> <init>
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
proguard.evaluation.ConstantValueFactory -> fu:
    proguard.evaluation.value.ValueFactory valueFactory -> a
    proguard.evaluation.value.Value value -> a
    void <init>(proguard.evaluation.value.ValueFactory) -> <init>
    proguard.evaluation.value.Value constantValue(proguard.classfile.Clazz,int) -> a
    void visitIntegerConstant(proguard.classfile.Clazz,proguard.classfile.constant.IntegerConstant) -> a
    void visitLongConstant(proguard.classfile.Clazz,proguard.classfile.constant.LongConstant) -> a
    void visitFloatConstant(proguard.classfile.Clazz,proguard.classfile.constant.FloatConstant) -> a
    void visitDoubleConstant(proguard.classfile.Clazz,proguard.classfile.constant.DoubleConstant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitMethodHandleConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodHandleConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitMethodTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodTypeConstant) -> a
proguard.evaluation.InvocationUnit -> fv:
    void enterMethod(proguard.classfile.Clazz,proguard.classfile.Method,proguard.evaluation.Variables) -> a
    void exitMethod(proguard.classfile.Clazz,proguard.classfile.Method,proguard.evaluation.value.Value) -> a
    void invokeMember$23415491(proguard.classfile.Clazz,proguard.classfile.instruction.ConstantInstruction,proguard.evaluation.Stack) -> a
proguard.evaluation.Processor -> fw:
    proguard.evaluation.Variables variables -> a
    proguard.evaluation.Stack stack -> a
    proguard.evaluation.value.ValueFactory valueFactory -> a
    proguard.evaluation.BranchUnit branchUnit -> a
    proguard.evaluation.InvocationUnit invocationUnit -> a
    boolean alwaysCast -> a
    proguard.evaluation.ConstantValueFactory constantValueFactory -> a
    proguard.evaluation.ClassConstantValueFactory classConstantValueFactory -> a
    void <init>(proguard.evaluation.Variables,proguard.evaluation.Stack,proguard.evaluation.value.ValueFactory,proguard.evaluation.BranchUnit,proguard.evaluation.InvocationUnit,boolean) -> <init>
    void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
    void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction) -> a
    void visitTableSwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.TableSwitchInstruction) -> a
    void visitLookUpSwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.LookUpSwitchInstruction) -> a
proguard.evaluation.Stack -> fx:
    proguard.evaluation.value.TopValue TOP_VALUE -> a
    proguard.evaluation.value.Value[] values -> a
    int currentSize -> a
    int actualMaxSize -> b
    void <init>(int) -> <init>
    void <init>(proguard.evaluation.Stack) -> <init>
    void reset(int) -> a
    void copy(proguard.evaluation.Stack) -> a
    boolean generalize(proguard.evaluation.Stack) -> a
    void clear() -> a
    int size() -> a
    proguard.evaluation.value.Value getBottom(int) -> a
    proguard.evaluation.value.Value getTop(int) -> b
    void push(proguard.evaluation.value.Value) -> a
    proguard.evaluation.value.Value pop() -> a
    void pop1() -> b
    void pop2() -> c
    void dup() -> d
    void dup_x1() -> e
    void dup_x2() -> f
    void dup2() -> g
    void dup2_x1() -> h
    void dup2_x2() -> i
    void swap() -> j
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
proguard.evaluation.TracedStack -> fy:
    proguard.evaluation.value.Value producerValue -> a
    proguard.evaluation.Stack producerStack -> b
    proguard.evaluation.Stack actualProducerStack -> a
    void <init>(int) -> <init>
    void <init>(proguard.evaluation.TracedStack) -> <init>
    proguard.evaluation.value.Value getBottomProducerValue(int) -> c
    proguard.evaluation.value.Value getTopProducerValue(int) -> d
    void reset(int) -> a
    void copy(proguard.evaluation.TracedStack) -> a
    boolean generalize(proguard.evaluation.TracedStack) -> a
    void clear() -> a
    void push(proguard.evaluation.value.Value) -> a
    proguard.evaluation.value.Value pop() -> a
    void pop1() -> b
    void pop2() -> c
    void dup() -> d
    void dup_x1() -> e
    void dup_x2() -> f
    void dup2() -> g
    void dup2_x1() -> h
    void dup2_x2() -> i
    void swap() -> j
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void producerPush() -> k
    void producerPop() -> l
proguard.evaluation.TracedVariables -> fz:
    proguard.evaluation.value.Value producerValue -> a
    proguard.evaluation.Variables producerVariables -> a
    void <init>(int) -> <init>
    void <init>(proguard.evaluation.TracedVariables) -> <init>
    proguard.evaluation.value.Value getProducerValue(int) -> a
    void reset(int) -> a
    void initialize(proguard.evaluation.TracedVariables) -> a
    boolean generalize(proguard.evaluation.TracedVariables,boolean) -> a
    void store(int,proguard.evaluation.value.Value) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.Variables -> fA:
    proguard.evaluation.value.TopValue TOP_VALUE -> a
    proguard.evaluation.value.Value[] values -> a
    int size -> a
    void <init>(int) -> <init>
    void <init>(proguard.evaluation.Variables) -> <init>
    void reset(int) -> a
    void initialize(proguard.evaluation.Variables) -> a
    boolean generalize(proguard.evaluation.Variables,boolean) -> a
    int size() -> a
    proguard.evaluation.value.Value getValue(int) -> b
    void store(int,proguard.evaluation.value.Value) -> a
    proguard.evaluation.value.Value load(int) -> c
    proguard.evaluation.value.IntegerValue iload(int) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
proguard.evaluation.value.ArrayReferenceValue -> fB:
    proguard.evaluation.value.IntegerValue arrayLength -> a
    void <init>(java.lang.String,proguard.classfile.Clazz,proguard.evaluation.value.IntegerValue) -> <init>
    proguard.evaluation.value.IntegerValue arrayLength(proguard.evaluation.value.ValueFactory) -> a
    proguard.evaluation.value.ReferenceValue generalize(proguard.evaluation.value.ReferenceValue) -> a
    int equal(proguard.evaluation.value.ReferenceValue) -> a
    proguard.evaluation.value.ReferenceValue generalize(proguard.evaluation.value.ArrayReferenceValue) -> a
    int equal(proguard.evaluation.value.ArrayReferenceValue) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.Category1Value -> fC:
    void <init>() -> <init>
    proguard.evaluation.value.Category1Value category1Value() -> a
    boolean isCategory2() -> a
proguard.evaluation.value.Category2Value -> fD:
    void <init>() -> <init>
    boolean isCategory2() -> a
proguard.evaluation.value.ComparisonValue -> fE:
    proguard.evaluation.value.Value value1 -> a
    proguard.evaluation.value.Value value2 -> b
    void <init>(proguard.evaluation.value.Value,proguard.evaluation.value.Value) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.CompositeDoubleValue -> fF:
    proguard.evaluation.value.DoubleValue doubleValue1 -> a
    byte operation -> a
    proguard.evaluation.value.DoubleValue doubleValue2 -> b
    void <init>(proguard.evaluation.value.DoubleValue,byte,proguard.evaluation.value.DoubleValue) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.CompositeFloatValue -> fG:
    proguard.evaluation.value.FloatValue floatValue1 -> a
    byte operation -> a
    proguard.evaluation.value.FloatValue floatValue2 -> b
    void <init>(proguard.evaluation.value.FloatValue,byte,proguard.evaluation.value.FloatValue) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.CompositeIntegerValue -> fH:
    proguard.evaluation.value.IntegerValue integerValue1 -> a
    byte operation -> a
    proguard.evaluation.value.IntegerValue integerValue2 -> b
    void <init>(proguard.evaluation.value.IntegerValue,byte,proguard.evaluation.value.IntegerValue) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.CompositeLongValue -> fI:
    proguard.evaluation.value.LongValue longValue1 -> a
    byte operation -> a
    proguard.evaluation.value.Value longValue2 -> a
    void <init>(proguard.evaluation.value.LongValue,byte,proguard.evaluation.value.Value) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.ConvertedByteValue -> fJ:
    proguard.evaluation.value.IntegerValue value -> a
    void <init>(proguard.evaluation.value.IntegerValue) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.ConvertedCharacterValue -> fK:
    proguard.evaluation.value.IntegerValue value -> a
    void <init>(proguard.evaluation.value.IntegerValue) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.ConvertedDoubleValue -> fL:
    proguard.evaluation.value.Value value -> a
    void <init>(proguard.evaluation.value.Value) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.ConvertedFloatValue -> fM:
    proguard.evaluation.value.Value value -> a
    void <init>(proguard.evaluation.value.Value) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.ConvertedIntegerValue -> fN:
    proguard.evaluation.value.Value value -> a
    void <init>(proguard.evaluation.value.Value) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.ConvertedLongValue -> fO:
    proguard.evaluation.value.Value value -> a
    void <init>(proguard.evaluation.value.Value) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.ConvertedShortValue -> fP:
    proguard.evaluation.value.IntegerValue value -> a
    void <init>(proguard.evaluation.value.IntegerValue) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.DetailedArrayReferenceValue -> fQ:
    proguard.evaluation.value.Value[] values -> a
    void <init>(java.lang.String,proguard.classfile.Clazz,proguard.evaluation.value.IntegerValue,proguard.evaluation.value.ValueFactory,int) -> <init>
    proguard.evaluation.value.IntegerValue integerArrayLoad(proguard.evaluation.value.IntegerValue,proguard.evaluation.value.ValueFactory) -> a
    proguard.evaluation.value.LongValue longArrayLoad(proguard.evaluation.value.IntegerValue,proguard.evaluation.value.ValueFactory) -> a
    proguard.evaluation.value.FloatValue floatArrayLoad(proguard.evaluation.value.IntegerValue,proguard.evaluation.value.ValueFactory) -> a
    proguard.evaluation.value.DoubleValue doubleArrayLoad(proguard.evaluation.value.IntegerValue,proguard.evaluation.value.ValueFactory) -> a
    proguard.evaluation.value.ReferenceValue referenceArrayLoad(proguard.evaluation.value.IntegerValue,proguard.evaluation.value.ValueFactory) -> a
    proguard.evaluation.value.Value arrayLoad$6daec3f3(proguard.evaluation.value.IntegerValue) -> a
    void arrayStore(proguard.evaluation.value.IntegerValue,proguard.evaluation.value.Value) -> a
    proguard.evaluation.value.ReferenceValue generalize(proguard.evaluation.value.ReferenceValue) -> a
    int equal(proguard.evaluation.value.ReferenceValue) -> a
    boolean isParticular() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.DetailedValueFactory -> fR:
    void <init>() -> <init>
    proguard.evaluation.value.ReferenceValue createArrayReferenceValue(java.lang.String,proguard.classfile.Clazz,proguard.evaluation.value.IntegerValue) -> a
proguard.evaluation.value.DoubleValue -> fS:
    void <init>() -> <init>
    double value() -> a
    proguard.evaluation.value.DoubleValue negate() -> a
    proguard.evaluation.value.IntegerValue convertToInteger() -> a
    proguard.evaluation.value.LongValue convertToLong() -> a
    proguard.evaluation.value.FloatValue convertToFloat() -> a
    proguard.evaluation.value.DoubleValue generalize(proguard.evaluation.value.DoubleValue) -> a
    proguard.evaluation.value.DoubleValue add(proguard.evaluation.value.DoubleValue) -> b
    proguard.evaluation.value.DoubleValue subtract(proguard.evaluation.value.DoubleValue) -> c
    proguard.evaluation.value.DoubleValue subtractFrom(proguard.evaluation.value.DoubleValue) -> d
    proguard.evaluation.value.DoubleValue multiply(proguard.evaluation.value.DoubleValue) -> e
    proguard.evaluation.value.DoubleValue divide(proguard.evaluation.value.DoubleValue) -> f
    proguard.evaluation.value.DoubleValue divideOf(proguard.evaluation.value.DoubleValue) -> g
    proguard.evaluation.value.DoubleValue remainder(proguard.evaluation.value.DoubleValue) -> h
    proguard.evaluation.value.DoubleValue remainderOf(proguard.evaluation.value.DoubleValue) -> i
    proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.DoubleValue) -> a
    proguard.evaluation.value.DoubleValue generalize(proguard.evaluation.value.SpecificDoubleValue) -> a
    proguard.evaluation.value.DoubleValue add(proguard.evaluation.value.SpecificDoubleValue) -> b
    proguard.evaluation.value.DoubleValue subtract(proguard.evaluation.value.SpecificDoubleValue) -> c
    proguard.evaluation.value.DoubleValue subtractFrom(proguard.evaluation.value.SpecificDoubleValue) -> d
    proguard.evaluation.value.DoubleValue multiply(proguard.evaluation.value.SpecificDoubleValue) -> e
    proguard.evaluation.value.DoubleValue divide(proguard.evaluation.value.SpecificDoubleValue) -> f
    proguard.evaluation.value.DoubleValue divideOf(proguard.evaluation.value.SpecificDoubleValue) -> g
    proguard.evaluation.value.DoubleValue remainder(proguard.evaluation.value.SpecificDoubleValue) -> h
    proguard.evaluation.value.DoubleValue remainderOf(proguard.evaluation.value.SpecificDoubleValue) -> i
    proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.SpecificDoubleValue) -> a
    proguard.evaluation.value.DoubleValue generalize(proguard.evaluation.value.ParticularDoubleValue) -> a
    proguard.evaluation.value.DoubleValue add(proguard.evaluation.value.ParticularDoubleValue) -> b
    proguard.evaluation.value.DoubleValue subtract(proguard.evaluation.value.ParticularDoubleValue) -> c
    proguard.evaluation.value.DoubleValue subtractFrom(proguard.evaluation.value.ParticularDoubleValue) -> d
    proguard.evaluation.value.DoubleValue multiply(proguard.evaluation.value.ParticularDoubleValue) -> e
    proguard.evaluation.value.DoubleValue divide(proguard.evaluation.value.ParticularDoubleValue) -> f
    proguard.evaluation.value.DoubleValue divideOf(proguard.evaluation.value.ParticularDoubleValue) -> g
    proguard.evaluation.value.DoubleValue remainder(proguard.evaluation.value.ParticularDoubleValue) -> h
    proguard.evaluation.value.DoubleValue remainderOf(proguard.evaluation.value.ParticularDoubleValue) -> i
    proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.ParticularDoubleValue) -> a
    proguard.evaluation.value.DoubleValue doubleValue() -> b
    proguard.evaluation.value.Value generalize(proguard.evaluation.value.Value) -> a
    int computationalType() -> a
    java.lang.String internalType() -> a
proguard.evaluation.value.FloatValue -> fT:
    void <init>() -> <init>
    float value() -> a
    proguard.evaluation.value.FloatValue negate() -> a
    proguard.evaluation.value.IntegerValue convertToInteger() -> a
    proguard.evaluation.value.LongValue convertToLong() -> a
    proguard.evaluation.value.DoubleValue convertToDouble() -> a
    proguard.evaluation.value.FloatValue generalize(proguard.evaluation.value.FloatValue) -> a
    proguard.evaluation.value.FloatValue add(proguard.evaluation.value.FloatValue) -> b
    proguard.evaluation.value.FloatValue subtract(proguard.evaluation.value.FloatValue) -> c
    proguard.evaluation.value.FloatValue subtractFrom(proguard.evaluation.value.FloatValue) -> d
    proguard.evaluation.value.FloatValue multiply(proguard.evaluation.value.FloatValue) -> e
    proguard.evaluation.value.FloatValue divide(proguard.evaluation.value.FloatValue) -> f
    proguard.evaluation.value.FloatValue divideOf(proguard.evaluation.value.FloatValue) -> g
    proguard.evaluation.value.FloatValue remainder(proguard.evaluation.value.FloatValue) -> h
    proguard.evaluation.value.FloatValue remainderOf(proguard.evaluation.value.FloatValue) -> i
    proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.FloatValue) -> a
    proguard.evaluation.value.FloatValue generalize(proguard.evaluation.value.SpecificFloatValue) -> a
    proguard.evaluation.value.FloatValue add(proguard.evaluation.value.SpecificFloatValue) -> b
    proguard.evaluation.value.FloatValue subtract(proguard.evaluation.value.SpecificFloatValue) -> c
    proguard.evaluation.value.FloatValue subtractFrom(proguard.evaluation.value.SpecificFloatValue) -> d
    proguard.evaluation.value.FloatValue multiply(proguard.evaluation.value.SpecificFloatValue) -> e
    proguard.evaluation.value.FloatValue divide(proguard.evaluation.value.SpecificFloatValue) -> f
    proguard.evaluation.value.FloatValue divideOf(proguard.evaluation.value.SpecificFloatValue) -> g
    proguard.evaluation.value.FloatValue remainder(proguard.evaluation.value.SpecificFloatValue) -> h
    proguard.evaluation.value.FloatValue remainderOf(proguard.evaluation.value.SpecificFloatValue) -> i
    proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.SpecificFloatValue) -> a
    proguard.evaluation.value.FloatValue generalize(proguard.evaluation.value.ParticularFloatValue) -> a
    proguard.evaluation.value.FloatValue add(proguard.evaluation.value.ParticularFloatValue) -> b
    proguard.evaluation.value.FloatValue subtract(proguard.evaluation.value.ParticularFloatValue) -> c
    proguard.evaluation.value.FloatValue subtractFrom(proguard.evaluation.value.ParticularFloatValue) -> d
    proguard.evaluation.value.FloatValue multiply(proguard.evaluation.value.ParticularFloatValue) -> e
    proguard.evaluation.value.FloatValue divide(proguard.evaluation.value.ParticularFloatValue) -> f
    proguard.evaluation.value.FloatValue divideOf(proguard.evaluation.value.ParticularFloatValue) -> g
    proguard.evaluation.value.FloatValue remainder(proguard.evaluation.value.ParticularFloatValue) -> h
    proguard.evaluation.value.FloatValue remainderOf(proguard.evaluation.value.ParticularFloatValue) -> i
    proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.ParticularFloatValue) -> a
    proguard.evaluation.value.FloatValue floatValue() -> b
    proguard.evaluation.value.Value generalize(proguard.evaluation.value.Value) -> a
    int computationalType() -> a
    java.lang.String internalType() -> a
proguard.evaluation.value.IdentifiedArrayReferenceValue -> fU:
    proguard.evaluation.value.ValueFactory valuefactory -> a
    int id -> a
    void <init>(java.lang.String,proguard.classfile.Clazz,proguard.evaluation.value.IntegerValue,proguard.evaluation.value.ValueFactory,int) -> <init>
    proguard.evaluation.value.ReferenceValue generalize(proguard.evaluation.value.ReferenceValue) -> a
    int equal(proguard.evaluation.value.ReferenceValue) -> a
    int equal(proguard.evaluation.value.IdentifiedArrayReferenceValue) -> a
    boolean isSpecific() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.IdentifiedDoubleValue -> fV:
    proguard.evaluation.value.ValueFactory valuefactory -> a
    int id -> a
    void <init>(proguard.evaluation.value.ValueFactory,int) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.IdentifiedFloatValue -> fW:
    proguard.evaluation.value.ValueFactory valuefactory -> a
    int id -> a
    void <init>(proguard.evaluation.value.ValueFactory,int) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.IdentifiedIntegerValue -> fX:
    proguard.evaluation.value.ValueFactory valuefactory -> a
    int id -> a
    void <init>(proguard.evaluation.value.ValueFactory,int) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.IdentifiedLongValue -> fY:
    proguard.evaluation.value.ValueFactory valuefactory -> a
    int id -> a
    void <init>(proguard.evaluation.value.ValueFactory,int) -> <init>
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.IdentifiedReferenceValue -> fZ:
    proguard.evaluation.value.ValueFactory valuefactory -> a
    int id -> a
    void <init>(java.lang.String,proguard.classfile.Clazz,boolean,proguard.evaluation.value.ValueFactory,int) -> <init>
    proguard.evaluation.value.ReferenceValue generalize(proguard.evaluation.value.ReferenceValue) -> a
    int equal(proguard.evaluation.value.ReferenceValue) -> a
    int equal(proguard.evaluation.value.IdentifiedReferenceValue) -> a
    boolean isSpecific() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.IdentifiedValueFactory -> ga:
    int integerID -> b
    int longID -> c
    int floatID -> d
    int doubleID -> e
    int referenceID -> a
    void <init>() -> <init>
    proguard.evaluation.value.IntegerValue createIntegerValue() -> a
    proguard.evaluation.value.LongValue createLongValue() -> a
    proguard.evaluation.value.FloatValue createFloatValue() -> a
    proguard.evaluation.value.DoubleValue createDoubleValue() -> a
    proguard.evaluation.value.ReferenceValue createReferenceValue(java.lang.String,proguard.classfile.Clazz,boolean) -> a
    proguard.evaluation.value.ReferenceValue createArrayReferenceValue(java.lang.String,proguard.classfile.Clazz,proguard.evaluation.value.IntegerValue) -> a
proguard.evaluation.value.InitialValueFactory -> gb:
    proguard.evaluation.value.ValueFactory valueFactory -> a
    void <init>(proguard.evaluation.value.ValueFactory) -> <init>
    proguard.evaluation.value.Value createValue(java.lang.String) -> a
proguard.evaluation.value.InstructionOffsetValue -> gc:
    proguard.evaluation.value.InstructionOffsetValue EMPTY_VALUE -> a
    int[] values -> a
    void <init>() -> <init>
    void <init>(int) -> <init>
    void <init>(int[]) -> <init>
    int instructionOffsetCount() -> b
    boolean contains(int) -> a
    proguard.evaluation.value.Value generalize(proguard.evaluation.value.InstructionOffsetValue) -> a
    proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue() -> a
    boolean isSpecific() -> c
    boolean isParticular() -> b
    proguard.evaluation.value.Value generalize(proguard.evaluation.value.Value) -> a
    int computationalType() -> a
    java.lang.String internalType() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void <clinit>() -> <clinit>
proguard.evaluation.value.IntegerValue -> gd:
    void <init>() -> <init>
    int value() -> b
    proguard.evaluation.value.IntegerValue negate() -> a
    proguard.evaluation.value.IntegerValue convertToByte() -> b
    proguard.evaluation.value.IntegerValue convertToCharacter() -> c
    proguard.evaluation.value.IntegerValue convertToShort() -> d
    proguard.evaluation.value.LongValue convertToLong() -> a
    proguard.evaluation.value.FloatValue convertToFloat() -> a
    proguard.evaluation.value.DoubleValue convertToDouble() -> a
    proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.IntegerValue) -> a
    proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.IntegerValue) -> b
    proguard.evaluation.value.IntegerValue subtract(proguard.evaluation.value.IntegerValue) -> c
    proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.IntegerValue) -> d
    proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.IntegerValue) -> e
    proguard.evaluation.value.IntegerValue divide(proguard.evaluation.value.IntegerValue) -> f
    proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.IntegerValue) -> g
    proguard.evaluation.value.IntegerValue remainder(proguard.evaluation.value.IntegerValue) -> h
    proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.IntegerValue) -> i
    proguard.evaluation.value.IntegerValue shiftLeft(proguard.evaluation.value.IntegerValue) -> j
    proguard.evaluation.value.IntegerValue shiftRight(proguard.evaluation.value.IntegerValue) -> k
    proguard.evaluation.value.IntegerValue unsignedShiftRight(proguard.evaluation.value.IntegerValue) -> l
    proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.IntegerValue) -> m
    proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.IntegerValue) -> n
    proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.IntegerValue) -> o
    proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.LongValue) -> a
    proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.LongValue) -> b
    proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.LongValue) -> c
    proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.IntegerValue) -> p
    proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.IntegerValue) -> q
    proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.IntegerValue) -> r
    int equal(proguard.evaluation.value.IntegerValue) -> a
    int lessThan(proguard.evaluation.value.IntegerValue) -> b
    int lessThanOrEqual(proguard.evaluation.value.IntegerValue) -> c
    proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.SpecificIntegerValue) -> a
    proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.SpecificIntegerValue) -> b
    proguard.evaluation.value.IntegerValue subtract(proguard.evaluation.value.SpecificIntegerValue) -> c
    proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.SpecificIntegerValue) -> d
    proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.SpecificIntegerValue) -> e
    proguard.evaluation.value.IntegerValue divide(proguard.evaluation.value.SpecificIntegerValue) -> f
    proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.SpecificIntegerValue) -> g
    proguard.evaluation.value.IntegerValue remainder(proguard.evaluation.value.SpecificIntegerValue) -> h
    proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.SpecificIntegerValue) -> i
    proguard.evaluation.value.IntegerValue shiftLeft(proguard.evaluation.value.SpecificIntegerValue) -> j
    proguard.evaluation.value.IntegerValue shiftRight(proguard.evaluation.value.SpecificIntegerValue) -> k
    proguard.evaluation.value.IntegerValue unsignedShiftRight(proguard.evaluation.value.SpecificIntegerValue) -> l
    proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.SpecificIntegerValue) -> m
    proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.SpecificIntegerValue) -> n
    proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.SpecificIntegerValue) -> o
    proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.SpecificLongValue) -> a
    proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.SpecificLongValue) -> b
    proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.SpecificLongValue) -> c
    proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.SpecificIntegerValue) -> p
    proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.SpecificIntegerValue) -> q
    proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.SpecificIntegerValue) -> r
    int equal(proguard.evaluation.value.SpecificIntegerValue) -> a
    int lessThan(proguard.evaluation.value.SpecificIntegerValue) -> b
    int lessThanOrEqual(proguard.evaluation.value.SpecificIntegerValue) -> c
    proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.ParticularIntegerValue) -> a
    proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.ParticularIntegerValue) -> b
    proguard.evaluation.value.IntegerValue subtract(proguard.evaluation.value.ParticularIntegerValue) -> c
    proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.ParticularIntegerValue) -> d
    proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.ParticularIntegerValue) -> e
    proguard.evaluation.value.IntegerValue divide(proguard.evaluation.value.ParticularIntegerValue) -> f
    proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.ParticularIntegerValue) -> g
    proguard.evaluation.value.IntegerValue remainder(proguard.evaluation.value.ParticularIntegerValue) -> h
    proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.ParticularIntegerValue) -> i
    proguard.evaluation.value.IntegerValue shiftLeft(proguard.evaluation.value.ParticularIntegerValue) -> j
    proguard.evaluation.value.IntegerValue shiftRight(proguard.evaluation.value.ParticularIntegerValue) -> k
    proguard.evaluation.value.IntegerValue unsignedShiftRight(proguard.evaluation.value.ParticularIntegerValue) -> l
    proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.ParticularIntegerValue) -> m
    proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.ParticularIntegerValue) -> n
    proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.ParticularIntegerValue) -> o
    proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.ParticularLongValue) -> a
    proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.ParticularLongValue) -> b
    proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.ParticularLongValue) -> c
    proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.ParticularIntegerValue) -> p
    proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.ParticularIntegerValue) -> q
    proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.ParticularIntegerValue) -> r
    int equal(proguard.evaluation.value.ParticularIntegerValue) -> a
    int lessThan(proguard.evaluation.value.ParticularIntegerValue) -> b
    int lessThanOrEqual(proguard.evaluation.value.ParticularIntegerValue) -> c
    proguard.evaluation.value.IntegerValue integerValue() -> e
    proguard.evaluation.value.Value generalize(proguard.evaluation.value.Value) -> a
    int computationalType() -> a
    java.lang.String internalType() -> a
proguard.evaluation.value.LongValue -> ge:
    void <init>() -> <init>
    long value() -> a
    proguard.evaluation.value.LongValue negate() -> a
    proguard.evaluation.value.IntegerValue convertToInteger() -> a
    proguard.evaluation.value.FloatValue convertToFloat() -> a
    proguard.evaluation.value.DoubleValue convertToDouble() -> a
    proguard.evaluation.value.LongValue generalize(proguard.evaluation.value.LongValue) -> a
    proguard.evaluation.value.LongValue add(proguard.evaluation.value.LongValue) -> b
    proguard.evaluation.value.LongValue subtract(proguard.evaluation.value.LongValue) -> c
    proguard.evaluation.value.LongValue subtractFrom(proguard.evaluation.value.LongValue) -> d
    proguard.evaluation.value.LongValue multiply(proguard.evaluation.value.LongValue) -> e
    proguard.evaluation.value.LongValue divide(proguard.evaluation.value.LongValue) -> f
    proguard.evaluation.value.LongValue divideOf(proguard.evaluation.value.LongValue) -> g
    proguard.evaluation.value.LongValue remainder(proguard.evaluation.value.LongValue) -> h
    proguard.evaluation.value.LongValue remainderOf(proguard.evaluation.value.LongValue) -> i
    proguard.evaluation.value.LongValue shiftLeft(proguard.evaluation.value.IntegerValue) -> a
    proguard.evaluation.value.LongValue shiftRight(proguard.evaluation.value.IntegerValue) -> b
    proguard.evaluation.value.LongValue unsignedShiftRight(proguard.evaluation.value.IntegerValue) -> c
    proguard.evaluation.value.LongValue and(proguard.evaluation.value.LongValue) -> j
    proguard.evaluation.value.LongValue or(proguard.evaluation.value.LongValue) -> k
    proguard.evaluation.value.LongValue xor(proguard.evaluation.value.LongValue) -> l
    proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.LongValue) -> a
    proguard.evaluation.value.LongValue generalize(proguard.evaluation.value.SpecificLongValue) -> a
    proguard.evaluation.value.LongValue add(proguard.evaluation.value.SpecificLongValue) -> b
    proguard.evaluation.value.LongValue subtract(proguard.evaluation.value.SpecificLongValue) -> c
    proguard.evaluation.value.LongValue subtractFrom(proguard.evaluation.value.SpecificLongValue) -> d
    proguard.evaluation.value.LongValue multiply(proguard.evaluation.value.SpecificLongValue) -> e
    proguard.evaluation.value.LongValue divide(proguard.evaluation.value.SpecificLongValue) -> f
    proguard.evaluation.value.LongValue divideOf(proguard.evaluation.value.SpecificLongValue) -> g
    proguard.evaluation.value.LongValue remainder(proguard.evaluation.value.SpecificLongValue) -> h
    proguard.evaluation.value.LongValue remainderOf(proguard.evaluation.value.SpecificLongValue) -> i
    proguard.evaluation.value.LongValue and(proguard.evaluation.value.SpecificLongValue) -> j
    proguard.evaluation.value.LongValue or(proguard.evaluation.value.SpecificLongValue) -> k
    proguard.evaluation.value.LongValue xor(proguard.evaluation.value.SpecificLongValue) -> l
    proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.SpecificLongValue) -> a
    proguard.evaluation.value.LongValue generalize(proguard.evaluation.value.ParticularLongValue) -> a
    proguard.evaluation.value.LongValue add(proguard.evaluation.value.ParticularLongValue) -> b
    proguard.evaluation.value.LongValue subtract(proguard.evaluation.value.ParticularLongValue) -> c
    proguard.evaluation.value.LongValue subtractFrom(proguard.evaluation.value.ParticularLongValue) -> d
    proguard.evaluation.value.LongValue multiply(proguard.evaluation.value.ParticularLongValue) -> e
    proguard.evaluation.value.LongValue divide(proguard.evaluation.value.ParticularLongValue) -> f
    proguard.evaluation.value.LongValue divideOf(proguard.evaluation.value.ParticularLongValue) -> g
    proguard.evaluation.value.LongValue remainder(proguard.evaluation.value.ParticularLongValue) -> h
    proguard.evaluation.value.LongValue remainderOf(proguard.evaluation.value.ParticularLongValue) -> i
    proguard.evaluation.value.LongValue shiftLeft(proguard.evaluation.value.ParticularIntegerValue) -> a
    proguard.evaluation.value.LongValue shiftRight(proguard.evaluation.value.ParticularIntegerValue) -> b
    proguard.evaluation.value.LongValue unsignedShiftRight(proguard.evaluation.value.ParticularIntegerValue) -> c
    proguard.evaluation.value.LongValue and(proguard.evaluation.value.ParticularLongValue) -> j
    proguard.evaluation.value.LongValue or(proguard.evaluation.value.ParticularLongValue) -> k
    proguard.evaluation.value.LongValue xor(proguard.evaluation.value.ParticularLongValue) -> l
    proguard.evaluation.value.LongValue longValue() -> b
    proguard.evaluation.value.Value generalize(proguard.evaluation.value.Value) -> a
    int computationalType() -> a
    java.lang.String internalType() -> a
proguard.evaluation.value.NegatedDoubleValue -> gf:
    proguard.evaluation.value.DoubleValue doubleValue -> a
    void <init>(proguard.evaluation.value.DoubleValue) -> <init>
    proguard.evaluation.value.DoubleValue negate() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.NegatedFloatValue -> gg:
    proguard.evaluation.value.FloatValue floatValue -> a
    void <init>(proguard.evaluation.value.FloatValue) -> <init>
    proguard.evaluation.value.FloatValue negate() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.NegatedIntegerValue -> gh:
    proguard.evaluation.value.IntegerValue integerValue -> a
    void <init>(proguard.evaluation.value.IntegerValue) -> <init>
    proguard.evaluation.value.IntegerValue negate() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.NegatedLongValue -> gi:
    proguard.evaluation.value.LongValue longValue -> a
    void <init>(proguard.evaluation.value.LongValue) -> <init>
    proguard.evaluation.value.LongValue negate() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.ParticularDoubleValue -> gj:
    double value -> a
    void <init>(double) -> <init>
    double value() -> a
    proguard.evaluation.value.DoubleValue negate() -> a
    proguard.evaluation.value.IntegerValue convertToInteger() -> a
    proguard.evaluation.value.LongValue convertToLong() -> a
    proguard.evaluation.value.FloatValue convertToFloat() -> a
    proguard.evaluation.value.DoubleValue generalize(proguard.evaluation.value.DoubleValue) -> a
    proguard.evaluation.value.DoubleValue add(proguard.evaluation.value.DoubleValue) -> b
    proguard.evaluation.value.DoubleValue subtract(proguard.evaluation.value.DoubleValue) -> c
    proguard.evaluation.value.DoubleValue subtractFrom(proguard.evaluation.value.DoubleValue) -> d
    proguard.evaluation.value.DoubleValue multiply(proguard.evaluation.value.DoubleValue) -> e
    proguard.evaluation.value.DoubleValue divide(proguard.evaluation.value.DoubleValue) -> f
    proguard.evaluation.value.DoubleValue divideOf(proguard.evaluation.value.DoubleValue) -> g
    proguard.evaluation.value.DoubleValue remainder(proguard.evaluation.value.DoubleValue) -> h
    proguard.evaluation.value.DoubleValue remainderOf(proguard.evaluation.value.DoubleValue) -> i
    proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.DoubleValue) -> a
    proguard.evaluation.value.DoubleValue generalize(proguard.evaluation.value.ParticularDoubleValue) -> a
    proguard.evaluation.value.DoubleValue add(proguard.evaluation.value.ParticularDoubleValue) -> b
    proguard.evaluation.value.DoubleValue subtract(proguard.evaluation.value.ParticularDoubleValue) -> c
    proguard.evaluation.value.DoubleValue subtractFrom(proguard.evaluation.value.ParticularDoubleValue) -> d
    proguard.evaluation.value.DoubleValue multiply(proguard.evaluation.value.ParticularDoubleValue) -> e
    proguard.evaluation.value.DoubleValue divide(proguard.evaluation.value.ParticularDoubleValue) -> f
    proguard.evaluation.value.DoubleValue divideOf(proguard.evaluation.value.ParticularDoubleValue) -> g
    proguard.evaluation.value.DoubleValue remainder(proguard.evaluation.value.ParticularDoubleValue) -> h
    proguard.evaluation.value.DoubleValue remainderOf(proguard.evaluation.value.ParticularDoubleValue) -> i
    proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.ParticularDoubleValue) -> a
    boolean isParticular() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.ParticularFloatValue -> gk:
    float value -> a
    void <init>(float) -> <init>
    float value() -> a
    proguard.evaluation.value.FloatValue negate() -> a
    proguard.evaluation.value.IntegerValue convertToInteger() -> a
    proguard.evaluation.value.LongValue convertToLong() -> a
    proguard.evaluation.value.DoubleValue convertToDouble() -> a
    proguard.evaluation.value.FloatValue generalize(proguard.evaluation.value.FloatValue) -> a
    proguard.evaluation.value.FloatValue add(proguard.evaluation.value.FloatValue) -> b
    proguard.evaluation.value.FloatValue subtract(proguard.evaluation.value.FloatValue) -> c
    proguard.evaluation.value.FloatValue subtractFrom(proguard.evaluation.value.FloatValue) -> d
    proguard.evaluation.value.FloatValue multiply(proguard.evaluation.value.FloatValue) -> e
    proguard.evaluation.value.FloatValue divide(proguard.evaluation.value.FloatValue) -> f
    proguard.evaluation.value.FloatValue divideOf(proguard.evaluation.value.FloatValue) -> g
    proguard.evaluation.value.FloatValue remainder(proguard.evaluation.value.FloatValue) -> h
    proguard.evaluation.value.FloatValue remainderOf(proguard.evaluation.value.FloatValue) -> i
    proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.FloatValue) -> a
    proguard.evaluation.value.FloatValue generalize(proguard.evaluation.value.ParticularFloatValue) -> a
    proguard.evaluation.value.FloatValue add(proguard.evaluation.value.ParticularFloatValue) -> b
    proguard.evaluation.value.FloatValue subtract(proguard.evaluation.value.ParticularFloatValue) -> c
    proguard.evaluation.value.FloatValue subtractFrom(proguard.evaluation.value.ParticularFloatValue) -> d
    proguard.evaluation.value.FloatValue multiply(proguard.evaluation.value.ParticularFloatValue) -> e
    proguard.evaluation.value.FloatValue divide(proguard.evaluation.value.ParticularFloatValue) -> f
    proguard.evaluation.value.FloatValue divideOf(proguard.evaluation.value.ParticularFloatValue) -> g
    proguard.evaluation.value.FloatValue remainder(proguard.evaluation.value.ParticularFloatValue) -> h
    proguard.evaluation.value.FloatValue remainderOf(proguard.evaluation.value.ParticularFloatValue) -> i
    proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.ParticularFloatValue) -> a
    boolean isParticular() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.ParticularIntegerValue -> gl:
    int value -> a
    void <init>(int) -> <init>
    int value() -> b
    proguard.evaluation.value.IntegerValue negate() -> a
    proguard.evaluation.value.IntegerValue convertToByte() -> b
    proguard.evaluation.value.IntegerValue convertToCharacter() -> c
    proguard.evaluation.value.IntegerValue convertToShort() -> d
    proguard.evaluation.value.LongValue convertToLong() -> a
    proguard.evaluation.value.FloatValue convertToFloat() -> a
    proguard.evaluation.value.DoubleValue convertToDouble() -> a
    proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.IntegerValue) -> a
    proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.IntegerValue) -> b
    proguard.evaluation.value.IntegerValue subtract(proguard.evaluation.value.IntegerValue) -> c
    proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.IntegerValue) -> d
    proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.IntegerValue) -> e
    proguard.evaluation.value.IntegerValue divide(proguard.evaluation.value.IntegerValue) -> f
    proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.IntegerValue) -> g
    proguard.evaluation.value.IntegerValue remainder(proguard.evaluation.value.IntegerValue) -> h
    proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.IntegerValue) -> i
    proguard.evaluation.value.IntegerValue shiftLeft(proguard.evaluation.value.IntegerValue) -> j
    proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.IntegerValue) -> m
    proguard.evaluation.value.IntegerValue shiftRight(proguard.evaluation.value.IntegerValue) -> k
    proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.IntegerValue) -> n
    proguard.evaluation.value.IntegerValue unsignedShiftRight(proguard.evaluation.value.IntegerValue) -> l
    proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.IntegerValue) -> o
    proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.LongValue) -> a
    proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.LongValue) -> b
    proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.LongValue) -> c
    proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.IntegerValue) -> p
    proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.IntegerValue) -> q
    proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.IntegerValue) -> r
    int equal(proguard.evaluation.value.IntegerValue) -> a
    int lessThan(proguard.evaluation.value.IntegerValue) -> b
    int lessThanOrEqual(proguard.evaluation.value.IntegerValue) -> c
    proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.ParticularIntegerValue) -> a
    proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.ParticularIntegerValue) -> b
    proguard.evaluation.value.IntegerValue subtract(proguard.evaluation.value.ParticularIntegerValue) -> c
    proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.ParticularIntegerValue) -> d
    proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.ParticularIntegerValue) -> e
    proguard.evaluation.value.IntegerValue divide(proguard.evaluation.value.ParticularIntegerValue) -> f
    proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.ParticularIntegerValue) -> g
    proguard.evaluation.value.IntegerValue remainder(proguard.evaluation.value.ParticularIntegerValue) -> h
    proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.ParticularIntegerValue) -> i
    proguard.evaluation.value.IntegerValue shiftLeft(proguard.evaluation.value.ParticularIntegerValue) -> j
    proguard.evaluation.value.IntegerValue shiftRight(proguard.evaluation.value.ParticularIntegerValue) -> k
    proguard.evaluation.value.IntegerValue unsignedShiftRight(proguard.evaluation.value.ParticularIntegerValue) -> l
    proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.ParticularIntegerValue) -> m
    proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.ParticularIntegerValue) -> n
    proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.ParticularIntegerValue) -> o
    proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.ParticularLongValue) -> a
    proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.ParticularLongValue) -> b
    proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.ParticularLongValue) -> c
    proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.ParticularIntegerValue) -> p
    proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.ParticularIntegerValue) -> q
    proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.ParticularIntegerValue) -> r
    int equal(proguard.evaluation.value.ParticularIntegerValue) -> a
    int lessThan(proguard.evaluation.value.ParticularIntegerValue) -> b
    int lessThanOrEqual(proguard.evaluation.value.ParticularIntegerValue) -> c
    boolean isParticular() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.ParticularLongValue -> gm:
    long value -> a
    void <init>(long) -> <init>
    long value() -> a
    proguard.evaluation.value.LongValue negate() -> a
    proguard.evaluation.value.IntegerValue convertToInteger() -> a
    proguard.evaluation.value.FloatValue convertToFloat() -> a
    proguard.evaluation.value.DoubleValue convertToDouble() -> a
    proguard.evaluation.value.LongValue generalize(proguard.evaluation.value.LongValue) -> a
    proguard.evaluation.value.LongValue add(proguard.evaluation.value.LongValue) -> b
    proguard.evaluation.value.LongValue subtract(proguard.evaluation.value.LongValue) -> c
    proguard.evaluation.value.LongValue subtractFrom(proguard.evaluation.value.LongValue) -> d
    proguard.evaluation.value.LongValue multiply(proguard.evaluation.value.LongValue) -> e
    proguard.evaluation.value.LongValue divide(proguard.evaluation.value.LongValue) -> f
    proguard.evaluation.value.LongValue divideOf(proguard.evaluation.value.LongValue) -> g
    proguard.evaluation.value.LongValue remainder(proguard.evaluation.value.LongValue) -> h
    proguard.evaluation.value.LongValue remainderOf(proguard.evaluation.value.LongValue) -> i
    proguard.evaluation.value.LongValue shiftLeft(proguard.evaluation.value.IntegerValue) -> a
    proguard.evaluation.value.LongValue shiftRight(proguard.evaluation.value.IntegerValue) -> b
    proguard.evaluation.value.LongValue unsignedShiftRight(proguard.evaluation.value.IntegerValue) -> c
    proguard.evaluation.value.LongValue and(proguard.evaluation.value.LongValue) -> j
    proguard.evaluation.value.LongValue or(proguard.evaluation.value.LongValue) -> k
    proguard.evaluation.value.LongValue xor(proguard.evaluation.value.LongValue) -> l
    proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.LongValue) -> a
    proguard.evaluation.value.LongValue generalize(proguard.evaluation.value.ParticularLongValue) -> a
    proguard.evaluation.value.LongValue add(proguard.evaluation.value.ParticularLongValue) -> b
    proguard.evaluation.value.LongValue subtract(proguard.evaluation.value.ParticularLongValue) -> c
    proguard.evaluation.value.LongValue subtractFrom(proguard.evaluation.value.ParticularLongValue) -> d
    proguard.evaluation.value.LongValue multiply(proguard.evaluation.value.ParticularLongValue) -> e
    proguard.evaluation.value.LongValue divide(proguard.evaluation.value.ParticularLongValue) -> f
    proguard.evaluation.value.LongValue divideOf(proguard.evaluation.value.ParticularLongValue) -> g
    proguard.evaluation.value.LongValue remainder(proguard.evaluation.value.ParticularLongValue) -> h
    proguard.evaluation.value.LongValue remainderOf(proguard.evaluation.value.ParticularLongValue) -> i
    proguard.evaluation.value.LongValue shiftLeft(proguard.evaluation.value.ParticularIntegerValue) -> a
    proguard.evaluation.value.LongValue shiftRight(proguard.evaluation.value.ParticularIntegerValue) -> b
    proguard.evaluation.value.LongValue unsignedShiftRight(proguard.evaluation.value.ParticularIntegerValue) -> c
    proguard.evaluation.value.LongValue and(proguard.evaluation.value.ParticularLongValue) -> j
    proguard.evaluation.value.LongValue or(proguard.evaluation.value.ParticularLongValue) -> k
    proguard.evaluation.value.LongValue xor(proguard.evaluation.value.ParticularLongValue) -> l
    boolean isParticular() -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.ParticularValueFactory -> gn:
    proguard.evaluation.value.IntegerValue INTEGER_VALUE_M1 -> a
    proguard.evaluation.value.IntegerValue INTEGER_VALUE_0 -> b
    proguard.evaluation.value.IntegerValue INTEGER_VALUE_1 -> c
    proguard.evaluation.value.IntegerValue INTEGER_VALUE_2 -> e
    proguard.evaluation.value.IntegerValue INTEGER_VALUE_3 -> f
    proguard.evaluation.value.IntegerValue INTEGER_VALUE_4 -> g
    proguard.evaluation.value.IntegerValue INTEGER_VALUE_5 -> h
    proguard.evaluation.value.LongValue LONG_VALUE_0 -> a
    proguard.evaluation.value.LongValue LONG_VALUE_1 -> c
    proguard.evaluation.value.FloatValue FLOAT_VALUE_0 -> b
    proguard.evaluation.value.FloatValue FLOAT_VALUE_1 -> c
    proguard.evaluation.value.FloatValue FLOAT_VALUE_2 -> d
    proguard.evaluation.value.DoubleValue DOUBLE_VALUE_0 -> b
    proguard.evaluation.value.DoubleValue DOUBLE_VALUE_1 -> c
    int POS_ZERO_FLOAT_BITS -> a
    long POS_ZERO_DOUBLE_BITS -> a
    void <init>() -> <init>
    proguard.evaluation.value.IntegerValue createIntegerValue(int) -> a
    proguard.evaluation.value.LongValue createLongValue(long) -> a
    proguard.evaluation.value.FloatValue createFloatValue(float) -> a
    proguard.evaluation.value.DoubleValue createDoubleValue(double) -> a
    proguard.evaluation.value.ReferenceValue createArrayReferenceValue(java.lang.String,proguard.classfile.Clazz,proguard.evaluation.value.IntegerValue) -> a
    void <clinit>() -> <clinit>
proguard.evaluation.value.ReferenceValue -> go:
    void <init>() -> <init>
    java.lang.String getType() -> b
    proguard.classfile.Clazz getReferencedClass() -> a
    int isNull() -> b
    int instanceOf(java.lang.String,proguard.classfile.Clazz) -> a
    proguard.evaluation.value.IntegerValue arrayLength(proguard.evaluation.value.ValueFactory) -> a
    proguard.evaluation.value.IntegerValue integerArrayLoad(proguard.evaluation.value.IntegerValue,proguard.evaluation.value.ValueFactory) -> a
    proguard.evaluation.value.LongValue longArrayLoad(proguard.evaluation.value.IntegerValue,proguard.evaluation.value.ValueFactory) -> a
    proguard.evaluation.value.FloatValue floatArrayLoad(proguard.evaluation.value.IntegerValue,proguard.evaluation.value.ValueFactory) -> a
    proguard.evaluation.value.DoubleValue doubleArrayLoad(proguard.evaluation.value.IntegerValue,proguard.evaluation.value.ValueFactory) -> a
    proguard.evaluation.value.ReferenceValue referenceArrayLoad(proguard.evaluation.value.IntegerValue,proguard.evaluation.value.ValueFactory) -> a
    void arrayStore(proguard.evaluation.value.IntegerValue,proguard.evaluation.value.Value) -> a
    proguard.evaluation.value.ReferenceValue generalize(proguard.evaluation.value.ReferenceValue) -> a
    int equal(proguard.evaluation.value.ReferenceValue) -> a
    proguard.evaluation.value.ReferenceValue generalize(proguard.evaluation.value.TypedReferenceValue) -> a
    int equal(proguard.evaluation.value.TypedReferenceValue) -> a
    proguard.evaluation.value.ReferenceValue generalize(proguard.evaluation.value.IdentifiedReferenceValue) -> a
    int equal(proguard.evaluation.value.IdentifiedReferenceValue) -> a
    proguard.evaluation.value.ReferenceValue generalize(proguard.evaluation.value.ArrayReferenceValue) -> a
    int equal(proguard.evaluation.value.ArrayReferenceValue) -> a
    proguard.evaluation.value.ReferenceValue generalize(proguard.evaluation.value.IdentifiedArrayReferenceValue) -> a
    int equal(proguard.evaluation.value.IdentifiedArrayReferenceValue) -> a
    proguard.evaluation.value.ReferenceValue generalize(proguard.evaluation.value.DetailedArrayReferenceValue) -> a
    int equal(proguard.evaluation.value.DetailedArrayReferenceValue) -> a
    proguard.evaluation.value.ReferenceValue referenceValue() -> a
    proguard.evaluation.value.Value generalize(proguard.evaluation.value.Value) -> a
    int computationalType() -> a
proguard.evaluation.value.SpecificDoubleValue -> gp:
    void <init>() -> <init>
    proguard.evaluation.value.DoubleValue negate() -> a
    proguard.evaluation.value.IntegerValue convertToInteger() -> a
    proguard.evaluation.value.LongValue convertToLong() -> a
    proguard.evaluation.value.FloatValue convertToFloat() -> a
    proguard.evaluation.value.DoubleValue generalize(proguard.evaluation.value.DoubleValue) -> a
    proguard.evaluation.value.DoubleValue add(proguard.evaluation.value.DoubleValue) -> b
    proguard.evaluation.value.DoubleValue subtract(proguard.evaluation.value.DoubleValue) -> c
    proguard.evaluation.value.DoubleValue subtractFrom(proguard.evaluation.value.DoubleValue) -> d
    proguard.evaluation.value.DoubleValue multiply(proguard.evaluation.value.DoubleValue) -> e
    proguard.evaluation.value.DoubleValue divide(proguard.evaluation.value.DoubleValue) -> f
    proguard.evaluation.value.DoubleValue divideOf(proguard.evaluation.value.DoubleValue) -> g
    proguard.evaluation.value.DoubleValue remainder(proguard.evaluation.value.DoubleValue) -> h
    proguard.evaluation.value.DoubleValue remainderOf(proguard.evaluation.value.DoubleValue) -> i
    proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.DoubleValue) -> a
    proguard.evaluation.value.DoubleValue generalize(proguard.evaluation.value.SpecificDoubleValue) -> a
    proguard.evaluation.value.DoubleValue add(proguard.evaluation.value.SpecificDoubleValue) -> b
    proguard.evaluation.value.DoubleValue subtract(proguard.evaluation.value.SpecificDoubleValue) -> c
    proguard.evaluation.value.DoubleValue subtractFrom(proguard.evaluation.value.SpecificDoubleValue) -> d
    proguard.evaluation.value.DoubleValue multiply(proguard.evaluation.value.SpecificDoubleValue) -> e
    proguard.evaluation.value.DoubleValue divide(proguard.evaluation.value.SpecificDoubleValue) -> f
    proguard.evaluation.value.DoubleValue divideOf(proguard.evaluation.value.SpecificDoubleValue) -> g
    proguard.evaluation.value.DoubleValue remainder(proguard.evaluation.value.SpecificDoubleValue) -> h
    proguard.evaluation.value.DoubleValue remainderOf(proguard.evaluation.value.SpecificDoubleValue) -> i
    proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.SpecificDoubleValue) -> a
    boolean isSpecific() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
proguard.evaluation.value.SpecificFloatValue -> gq:
    void <init>() -> <init>
    proguard.evaluation.value.FloatValue negate() -> a
    proguard.evaluation.value.IntegerValue convertToInteger() -> a
    proguard.evaluation.value.LongValue convertToLong() -> a
    proguard.evaluation.value.DoubleValue convertToDouble() -> a
    proguard.evaluation.value.FloatValue generalize(proguard.evaluation.value.FloatValue) -> a
    proguard.evaluation.value.FloatValue add(proguard.evaluation.value.FloatValue) -> b
    proguard.evaluation.value.FloatValue subtract(proguard.evaluation.value.FloatValue) -> c
    proguard.evaluation.value.FloatValue subtractFrom(proguard.evaluation.value.FloatValue) -> d
    proguard.evaluation.value.FloatValue multiply(proguard.evaluation.value.FloatValue) -> e
    proguard.evaluation.value.FloatValue divide(proguard.evaluation.value.FloatValue) -> f
    proguard.evaluation.value.FloatValue divideOf(proguard.evaluation.value.FloatValue) -> g
    proguard.evaluation.value.FloatValue remainder(proguard.evaluation.value.FloatValue) -> h
    proguard.evaluation.value.FloatValue remainderOf(proguard.evaluation.value.FloatValue) -> i
    proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.FloatValue) -> a
    proguard.evaluation.value.FloatValue generalize(proguard.evaluation.value.SpecificFloatValue) -> a
    proguard.evaluation.value.FloatValue add(proguard.evaluation.value.SpecificFloatValue) -> b
    proguard.evaluation.value.FloatValue subtract(proguard.evaluation.value.SpecificFloatValue) -> c
    proguard.evaluation.value.FloatValue subtractFrom(proguard.evaluation.value.SpecificFloatValue) -> d
    proguard.evaluation.value.FloatValue multiply(proguard.evaluation.value.SpecificFloatValue) -> e
    proguard.evaluation.value.FloatValue divide(proguard.evaluation.value.SpecificFloatValue) -> f
    proguard.evaluation.value.FloatValue divideOf(proguard.evaluation.value.SpecificFloatValue) -> g
    proguard.evaluation.value.FloatValue remainder(proguard.evaluation.value.SpecificFloatValue) -> h
    proguard.evaluation.value.FloatValue remainderOf(proguard.evaluation.value.SpecificFloatValue) -> i
    proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.SpecificFloatValue) -> a
    boolean isSpecific() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
proguard.evaluation.value.SpecificIntegerValue -> gr:
    void <init>() -> <init>
    proguard.evaluation.value.IntegerValue negate() -> a
    proguard.evaluation.value.IntegerValue convertToByte() -> b
    proguard.evaluation.value.IntegerValue convertToCharacter() -> c
    proguard.evaluation.value.IntegerValue convertToShort() -> d
    proguard.evaluation.value.LongValue convertToLong() -> a
    proguard.evaluation.value.FloatValue convertToFloat() -> a
    proguard.evaluation.value.DoubleValue convertToDouble() -> a
    proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.IntegerValue) -> a
    proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.IntegerValue) -> b
    proguard.evaluation.value.IntegerValue subtract(proguard.evaluation.value.IntegerValue) -> c
    proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.IntegerValue) -> d
    proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.IntegerValue) -> e
    proguard.evaluation.value.IntegerValue divide(proguard.evaluation.value.IntegerValue) -> f
    proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.IntegerValue) -> g
    proguard.evaluation.value.IntegerValue remainder(proguard.evaluation.value.IntegerValue) -> h
    proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.IntegerValue) -> i
    proguard.evaluation.value.IntegerValue shiftLeft(proguard.evaluation.value.IntegerValue) -> j
    proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.IntegerValue) -> m
    proguard.evaluation.value.IntegerValue shiftRight(proguard.evaluation.value.IntegerValue) -> k
    proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.IntegerValue) -> n
    proguard.evaluation.value.IntegerValue unsignedShiftRight(proguard.evaluation.value.IntegerValue) -> l
    proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.IntegerValue) -> o
    proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.LongValue) -> a
    proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.LongValue) -> b
    proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.LongValue) -> c
    proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.IntegerValue) -> p
    proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.IntegerValue) -> q
    proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.IntegerValue) -> r
    int equal(proguard.evaluation.value.IntegerValue) -> a
    int lessThan(proguard.evaluation.value.IntegerValue) -> b
    int lessThanOrEqual(proguard.evaluation.value.IntegerValue) -> c
    proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.SpecificIntegerValue) -> a
    proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.SpecificIntegerValue) -> b
    proguard.evaluation.value.IntegerValue subtract(proguard.evaluation.value.SpecificIntegerValue) -> c
    proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.SpecificIntegerValue) -> d
    proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.SpecificIntegerValue) -> e
    proguard.evaluation.value.IntegerValue divide(proguard.evaluation.value.SpecificIntegerValue) -> f
    proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.SpecificIntegerValue) -> g
    proguard.evaluation.value.IntegerValue remainder(proguard.evaluation.value.SpecificIntegerValue) -> h
    proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.SpecificIntegerValue) -> i
    proguard.evaluation.value.IntegerValue shiftLeft(proguard.evaluation.value.SpecificIntegerValue) -> j
    proguard.evaluation.value.IntegerValue shiftRight(proguard.evaluation.value.SpecificIntegerValue) -> k
    proguard.evaluation.value.IntegerValue unsignedShiftRight(proguard.evaluation.value.SpecificIntegerValue) -> l
    proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.SpecificIntegerValue) -> m
    proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.SpecificIntegerValue) -> n
    proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.SpecificIntegerValue) -> o
    proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.SpecificLongValue) -> a
    proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.SpecificLongValue) -> b
    proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.SpecificLongValue) -> c
    proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.SpecificIntegerValue) -> p
    proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.SpecificIntegerValue) -> q
    proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.SpecificIntegerValue) -> r
    int equal(proguard.evaluation.value.SpecificIntegerValue) -> a
    int lessThan(proguard.evaluation.value.SpecificIntegerValue) -> b
    int lessThanOrEqual(proguard.evaluation.value.SpecificIntegerValue) -> c
    boolean isSpecific() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
proguard.evaluation.value.SpecificLongValue -> gs:
    void <init>() -> <init>
    proguard.evaluation.value.LongValue negate() -> a
    proguard.evaluation.value.IntegerValue convertToInteger() -> a
    proguard.evaluation.value.FloatValue convertToFloat() -> a
    proguard.evaluation.value.DoubleValue convertToDouble() -> a
    proguard.evaluation.value.LongValue generalize(proguard.evaluation.value.LongValue) -> a
    proguard.evaluation.value.LongValue add(proguard.evaluation.value.LongValue) -> b
    proguard.evaluation.value.LongValue subtract(proguard.evaluation.value.LongValue) -> c
    proguard.evaluation.value.LongValue subtractFrom(proguard.evaluation.value.LongValue) -> d
    proguard.evaluation.value.LongValue multiply(proguard.evaluation.value.LongValue) -> e
    proguard.evaluation.value.LongValue divide(proguard.evaluation.value.LongValue) -> f
    proguard.evaluation.value.LongValue divideOf(proguard.evaluation.value.LongValue) -> g
    proguard.evaluation.value.LongValue remainder(proguard.evaluation.value.LongValue) -> h
    proguard.evaluation.value.LongValue remainderOf(proguard.evaluation.value.LongValue) -> i
    proguard.evaluation.value.LongValue shiftLeft(proguard.evaluation.value.IntegerValue) -> a
    proguard.evaluation.value.LongValue shiftRight(proguard.evaluation.value.IntegerValue) -> b
    proguard.evaluation.value.LongValue unsignedShiftRight(proguard.evaluation.value.IntegerValue) -> c
    proguard.evaluation.value.LongValue and(proguard.evaluation.value.LongValue) -> j
    proguard.evaluation.value.LongValue or(proguard.evaluation.value.LongValue) -> k
    proguard.evaluation.value.LongValue xor(proguard.evaluation.value.LongValue) -> l
    proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.LongValue) -> a
    proguard.evaluation.value.LongValue generalize(proguard.evaluation.value.SpecificLongValue) -> a
    proguard.evaluation.value.LongValue add(proguard.evaluation.value.SpecificLongValue) -> b
    proguard.evaluation.value.LongValue subtract(proguard.evaluation.value.SpecificLongValue) -> c
    proguard.evaluation.value.LongValue subtractFrom(proguard.evaluation.value.SpecificLongValue) -> d
    proguard.evaluation.value.LongValue multiply(proguard.evaluation.value.SpecificLongValue) -> e
    proguard.evaluation.value.LongValue divide(proguard.evaluation.value.SpecificLongValue) -> f
    proguard.evaluation.value.LongValue divideOf(proguard.evaluation.value.SpecificLongValue) -> g
    proguard.evaluation.value.LongValue remainder(proguard.evaluation.value.SpecificLongValue) -> h
    proguard.evaluation.value.LongValue remainderOf(proguard.evaluation.value.SpecificLongValue) -> i
    proguard.evaluation.value.LongValue and(proguard.evaluation.value.SpecificLongValue) -> j
    proguard.evaluation.value.LongValue or(proguard.evaluation.value.SpecificLongValue) -> k
    proguard.evaluation.value.LongValue xor(proguard.evaluation.value.SpecificLongValue) -> l
    proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.SpecificLongValue) -> a
    boolean isSpecific() -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
proguard.evaluation.value.TopValue -> gt:
    void <init>() -> <init>
    boolean isSpecific() -> c
    boolean isParticular() -> b
    proguard.evaluation.value.Value generalize(proguard.evaluation.value.Value) -> a
    int computationalType() -> a
    java.lang.String internalType() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.TypedReferenceValue -> gu:
    java.lang.String type -> a
    proguard.classfile.Clazz referencedClass -> a
    boolean mayBeNull -> a
    void <init>(java.lang.String,proguard.classfile.Clazz,boolean) -> <init>
    java.lang.String getType() -> b
    proguard.classfile.Clazz getReferencedClass() -> a
    int isNull() -> b
    int instanceOf(java.lang.String,proguard.classfile.Clazz) -> a
    proguard.evaluation.value.ReferenceValue generalizeMayBeNull(boolean) -> a
    proguard.evaluation.value.ReferenceValue referenceArrayLoad(proguard.evaluation.value.IntegerValue,proguard.evaluation.value.ValueFactory) -> a
    proguard.evaluation.value.ReferenceValue generalize(proguard.evaluation.value.ReferenceValue) -> a
    int equal(proguard.evaluation.value.ReferenceValue) -> a
    proguard.evaluation.value.ReferenceValue generalize(proguard.evaluation.value.TypedReferenceValue) -> a
    proguard.classfile.Clazz findCommonClass(proguard.classfile.Clazz,proguard.classfile.Clazz,boolean) -> a
    proguard.evaluation.value.ReferenceValue typedReferenceValue(proguard.evaluation.value.TypedReferenceValue,boolean) -> a
    int superClassCount(proguard.classfile.Clazz,java.util.Set) -> a
    int equal(proguard.evaluation.value.TypedReferenceValue) -> a
    proguard.evaluation.value.ReferenceValue generalize(proguard.evaluation.value.IdentifiedReferenceValue) -> a
    int equal(proguard.evaluation.value.IdentifiedReferenceValue) -> a
    proguard.evaluation.value.ReferenceValue generalize(proguard.evaluation.value.ArrayReferenceValue) -> a
    int equal(proguard.evaluation.value.ArrayReferenceValue) -> a
    proguard.evaluation.value.ReferenceValue generalize(proguard.evaluation.value.IdentifiedArrayReferenceValue) -> a
    int equal(proguard.evaluation.value.IdentifiedArrayReferenceValue) -> a
    proguard.evaluation.value.ReferenceValue generalize(proguard.evaluation.value.DetailedArrayReferenceValue) -> a
    int equal(proguard.evaluation.value.DetailedArrayReferenceValue) -> a
    boolean isParticular() -> b
    java.lang.String internalType() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.UnknownDoubleValue -> gv:
    void <init>() -> <init>
    proguard.evaluation.value.DoubleValue negate() -> a
    proguard.evaluation.value.IntegerValue convertToInteger() -> a
    proguard.evaluation.value.LongValue convertToLong() -> a
    proguard.evaluation.value.FloatValue convertToFloat() -> a
    proguard.evaluation.value.DoubleValue generalize(proguard.evaluation.value.DoubleValue) -> a
    proguard.evaluation.value.DoubleValue add(proguard.evaluation.value.DoubleValue) -> b
    proguard.evaluation.value.DoubleValue subtract(proguard.evaluation.value.DoubleValue) -> c
    proguard.evaluation.value.DoubleValue subtractFrom(proguard.evaluation.value.DoubleValue) -> d
    proguard.evaluation.value.DoubleValue multiply(proguard.evaluation.value.DoubleValue) -> e
    proguard.evaluation.value.DoubleValue divide(proguard.evaluation.value.DoubleValue) -> f
    proguard.evaluation.value.DoubleValue divideOf(proguard.evaluation.value.DoubleValue) -> g
    proguard.evaluation.value.DoubleValue remainder(proguard.evaluation.value.DoubleValue) -> h
    proguard.evaluation.value.DoubleValue remainderOf(proguard.evaluation.value.DoubleValue) -> i
    proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.DoubleValue) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.UnknownFloatValue -> gw:
    void <init>() -> <init>
    proguard.evaluation.value.FloatValue negate() -> a
    proguard.evaluation.value.IntegerValue convertToInteger() -> a
    proguard.evaluation.value.LongValue convertToLong() -> a
    proguard.evaluation.value.DoubleValue convertToDouble() -> a
    proguard.evaluation.value.FloatValue generalize(proguard.evaluation.value.FloatValue) -> a
    proguard.evaluation.value.FloatValue add(proguard.evaluation.value.FloatValue) -> b
    proguard.evaluation.value.FloatValue subtract(proguard.evaluation.value.FloatValue) -> c
    proguard.evaluation.value.FloatValue subtractFrom(proguard.evaluation.value.FloatValue) -> d
    proguard.evaluation.value.FloatValue multiply(proguard.evaluation.value.FloatValue) -> e
    proguard.evaluation.value.FloatValue divide(proguard.evaluation.value.FloatValue) -> f
    proguard.evaluation.value.FloatValue divideOf(proguard.evaluation.value.FloatValue) -> g
    proguard.evaluation.value.FloatValue remainder(proguard.evaluation.value.FloatValue) -> h
    proguard.evaluation.value.FloatValue remainderOf(proguard.evaluation.value.FloatValue) -> i
    proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.FloatValue) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.UnknownIntegerValue -> gx:
    void <init>() -> <init>
    proguard.evaluation.value.IntegerValue negate() -> a
    proguard.evaluation.value.IntegerValue convertToByte() -> b
    proguard.evaluation.value.IntegerValue convertToCharacter() -> c
    proguard.evaluation.value.IntegerValue convertToShort() -> d
    proguard.evaluation.value.LongValue convertToLong() -> a
    proguard.evaluation.value.FloatValue convertToFloat() -> a
    proguard.evaluation.value.DoubleValue convertToDouble() -> a
    proguard.evaluation.value.IntegerValue generalize(proguard.evaluation.value.IntegerValue) -> a
    proguard.evaluation.value.IntegerValue add(proguard.evaluation.value.IntegerValue) -> b
    proguard.evaluation.value.IntegerValue subtract(proguard.evaluation.value.IntegerValue) -> c
    proguard.evaluation.value.IntegerValue subtractFrom(proguard.evaluation.value.IntegerValue) -> d
    proguard.evaluation.value.IntegerValue multiply(proguard.evaluation.value.IntegerValue) -> e
    proguard.evaluation.value.IntegerValue divide(proguard.evaluation.value.IntegerValue) -> f
    proguard.evaluation.value.IntegerValue divideOf(proguard.evaluation.value.IntegerValue) -> g
    proguard.evaluation.value.IntegerValue remainder(proguard.evaluation.value.IntegerValue) -> h
    proguard.evaluation.value.IntegerValue remainderOf(proguard.evaluation.value.IntegerValue) -> i
    proguard.evaluation.value.IntegerValue shiftLeft(proguard.evaluation.value.IntegerValue) -> j
    proguard.evaluation.value.IntegerValue shiftLeftOf(proguard.evaluation.value.IntegerValue) -> m
    proguard.evaluation.value.IntegerValue shiftRight(proguard.evaluation.value.IntegerValue) -> k
    proguard.evaluation.value.IntegerValue shiftRightOf(proguard.evaluation.value.IntegerValue) -> n
    proguard.evaluation.value.IntegerValue unsignedShiftRight(proguard.evaluation.value.IntegerValue) -> l
    proguard.evaluation.value.IntegerValue unsignedShiftRightOf(proguard.evaluation.value.IntegerValue) -> o
    proguard.evaluation.value.LongValue shiftLeftOf(proguard.evaluation.value.LongValue) -> a
    proguard.evaluation.value.LongValue shiftRightOf(proguard.evaluation.value.LongValue) -> b
    proguard.evaluation.value.LongValue unsignedShiftRightOf(proguard.evaluation.value.LongValue) -> c
    proguard.evaluation.value.IntegerValue and(proguard.evaluation.value.IntegerValue) -> p
    proguard.evaluation.value.IntegerValue or(proguard.evaluation.value.IntegerValue) -> q
    proguard.evaluation.value.IntegerValue xor(proguard.evaluation.value.IntegerValue) -> r
    int equal(proguard.evaluation.value.IntegerValue) -> a
    int lessThan(proguard.evaluation.value.IntegerValue) -> b
    int lessThanOrEqual(proguard.evaluation.value.IntegerValue) -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.UnknownLongValue -> gy:
    void <init>() -> <init>
    proguard.evaluation.value.LongValue negate() -> a
    proguard.evaluation.value.IntegerValue convertToInteger() -> a
    proguard.evaluation.value.FloatValue convertToFloat() -> a
    proguard.evaluation.value.DoubleValue convertToDouble() -> a
    proguard.evaluation.value.LongValue generalize(proguard.evaluation.value.LongValue) -> a
    proguard.evaluation.value.LongValue add(proguard.evaluation.value.LongValue) -> b
    proguard.evaluation.value.LongValue subtract(proguard.evaluation.value.LongValue) -> c
    proguard.evaluation.value.LongValue subtractFrom(proguard.evaluation.value.LongValue) -> d
    proguard.evaluation.value.LongValue multiply(proguard.evaluation.value.LongValue) -> e
    proguard.evaluation.value.LongValue divide(proguard.evaluation.value.LongValue) -> f
    proguard.evaluation.value.LongValue divideOf(proguard.evaluation.value.LongValue) -> g
    proguard.evaluation.value.LongValue remainder(proguard.evaluation.value.LongValue) -> h
    proguard.evaluation.value.LongValue remainderOf(proguard.evaluation.value.LongValue) -> i
    proguard.evaluation.value.LongValue shiftLeft(proguard.evaluation.value.IntegerValue) -> a
    proguard.evaluation.value.LongValue shiftRight(proguard.evaluation.value.IntegerValue) -> b
    proguard.evaluation.value.LongValue unsignedShiftRight(proguard.evaluation.value.IntegerValue) -> c
    proguard.evaluation.value.LongValue and(proguard.evaluation.value.LongValue) -> j
    proguard.evaluation.value.LongValue or(proguard.evaluation.value.LongValue) -> k
    proguard.evaluation.value.LongValue xor(proguard.evaluation.value.LongValue) -> l
    proguard.evaluation.value.IntegerValue compare(proguard.evaluation.value.LongValue) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
proguard.evaluation.value.Value -> gz:
    void <init>() -> <init>
    proguard.evaluation.value.Category1Value category1Value() -> a
    proguard.evaluation.value.IntegerValue integerValue() -> e
    proguard.evaluation.value.LongValue longValue() -> b
    proguard.evaluation.value.FloatValue floatValue() -> b
    proguard.evaluation.value.DoubleValue doubleValue() -> b
    proguard.evaluation.value.ReferenceValue referenceValue() -> a
    proguard.evaluation.value.InstructionOffsetValue instructionOffsetValue() -> a
    boolean isSpecific() -> c
    boolean isParticular() -> b
    proguard.evaluation.value.Value generalize(proguard.evaluation.value.Value) -> a
    boolean isCategory2() -> a
    int computationalType() -> a
    java.lang.String internalType() -> a
proguard.evaluation.value.ValueFactory -> gA:
    proguard.evaluation.value.IntegerValue INTEGER_VALUE -> d
    proguard.evaluation.value.LongValue LONG_VALUE -> b
    proguard.evaluation.value.FloatValue FLOAT_VALUE -> a
    proguard.evaluation.value.DoubleValue DOUBLE_VALUE -> a
    proguard.evaluation.value.ReferenceValue REFERENCE_VALUE_NULL -> a
    proguard.evaluation.value.ReferenceValue REFERENCE_VALUE_JAVA_LANG_OBJECT_MAYBE_NULL -> b
    proguard.evaluation.value.ReferenceValue REFERENCE_VALUE_JAVA_LANG_OBJECT_NOT_NULL -> c
    void <init>() -> <init>
    proguard.evaluation.value.Value createValue(java.lang.String,proguard.classfile.Clazz,boolean) -> a
    proguard.evaluation.value.IntegerValue createIntegerValue() -> a
    proguard.evaluation.value.IntegerValue createIntegerValue(int) -> a
    proguard.evaluation.value.LongValue createLongValue() -> a
    proguard.evaluation.value.LongValue createLongValue(long) -> a
    proguard.evaluation.value.FloatValue createFloatValue() -> a
    proguard.evaluation.value.FloatValue createFloatValue(float) -> a
    proguard.evaluation.value.DoubleValue createDoubleValue() -> a
    proguard.evaluation.value.DoubleValue createDoubleValue(double) -> a
    proguard.evaluation.value.ReferenceValue createReferenceValueNull() -> a
    proguard.evaluation.value.ReferenceValue createReferenceValue(java.lang.String,proguard.classfile.Clazz,boolean) -> a
    proguard.evaluation.value.ReferenceValue createArrayReferenceValue(java.lang.String,proguard.classfile.Clazz,proguard.evaluation.value.IntegerValue) -> a
    void <clinit>() -> <clinit>
proguard.io.CascadingDataEntryWriter -> gB:
    proguard.io.DataEntryWriter dataEntryWriter1 -> a
    proguard.io.DataEntryWriter dataEntryWriter2 -> b
    void <init>(proguard.io.DataEntryWriter,proguard.io.DataEntryWriter) -> <init>
    boolean createDirectory(proguard.io.DataEntry) -> a
    java.io.OutputStream getOutputStream(proguard.io.DataEntry) -> a
    java.io.OutputStream getOutputStream(proguard.io.DataEntry,proguard.io.Finisher) -> a
    void close() -> a
proguard.io.ClassFilter -> gC:
    void <init>(proguard.io.DataEntryReader) -> <init>
    void <init>(proguard.io.DataEntryReader,proguard.io.DataEntryReader) -> <init>
    void <init>(java.lang.String,proguard.io.DataEntryReader,proguard.io.DataEntryReader) -> <init>
    void <init>(java.util.List,proguard.io.DataEntryReader) -> <init>
    void <init>(java.util.List,proguard.io.DataEntryReader,proguard.io.DataEntryReader) -> <init>
proguard.io.ClassReader -> gD:
    boolean isLibrary -> a
    boolean skipNonPublicLibraryClasses -> b
    boolean skipNonPublicLibraryClassMembers -> c
    proguard.classfile.util.WarningPrinter warningPrinter -> a
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(boolean,boolean,boolean,proguard.classfile.util.WarningPrinter,proguard.classfile.visitor.ClassVisitor) -> <init>
    void read(proguard.io.DataEntry) -> a
proguard.io.ClassRewriter -> gE:
    proguard.classfile.ClassPool classPool -> a
    proguard.io.DataEntryWriter dataEntryWriter -> a
    void <init>(proguard.classfile.ClassPool,proguard.io.DataEntryWriter) -> <init>
    void read(proguard.io.DataEntry) -> a
proguard.io.DataEntry -> gF:
    java.lang.String getName() -> a
    boolean isDirectory() -> a
    java.io.InputStream getInputStream() -> a
    void closeInputStream() -> a
    proguard.io.DataEntry getParent() -> a
proguard.io.DataEntryCopier -> gG:
    proguard.io.DataEntryWriter dataEntryWriter -> a
    byte[] buffer -> a
    void <init>(proguard.io.DataEntryWriter) -> <init>
    void read(proguard.io.DataEntry) -> a
    void copyData(java.io.InputStream,java.io.OutputStream) -> a
proguard.io.DataEntryDirectoryFilter -> gH:
    void <init>() -> <init>
    boolean accepts(proguard.io.DataEntry) -> a
proguard.io.DataEntryFilter -> gI:
    boolean accepts(proguard.io.DataEntry) -> a
proguard.io.DataEntryNameFilter -> gJ:
    proguard.util.StringMatcher stringMatcher -> a
    void <init>(proguard.util.StringMatcher) -> <init>
    boolean accepts(proguard.io.DataEntry) -> a
proguard.io.DataEntryObfuscator -> gK:
    proguard.classfile.ClassPool classPool -> a
    java.util.Map packagePrefixMap -> a
    proguard.io.DataEntryReader dataEntryReader -> a
    void <init>(proguard.classfile.ClassPool,java.util.Map,proguard.io.DataEntryReader) -> <init>
    void read(proguard.io.DataEntry) -> a
proguard.io.DataEntryParentFilter -> gL:
    proguard.io.DataEntryFilter dataEntryFilter -> a
    void <init>(proguard.io.DataEntryFilter) -> <init>
    boolean accepts(proguard.io.DataEntry) -> a
proguard.io.DataEntryReader -> gM:
    void read(proguard.io.DataEntry) -> a
proguard.io.DataEntryRenamer -> gN:
    java.util.Map nameMap -> a
    proguard.io.DataEntryReader renamedDataEntryReader -> a
    proguard.io.DataEntryReader missingDataEntryReader -> b
    void <init>(java.util.Map,proguard.io.DataEntryReader,proguard.io.DataEntryReader) -> <init>
    void read(proguard.io.DataEntry) -> a
proguard.io.DataEntryRewriter -> gO:
    proguard.classfile.ClassPool classPool -> a
    void <init>(proguard.classfile.ClassPool,proguard.io.DataEntryWriter) -> <init>
    void copyData(java.io.InputStream,java.io.OutputStream) -> a
    void copyData(java.io.Reader,java.io.Writer) -> a
    void writeUpdatedWord(java.io.Writer,java.lang.String) -> a
proguard.io.DataEntryWriter -> gP:
    boolean createDirectory(proguard.io.DataEntry) -> a
    java.io.OutputStream getOutputStream(proguard.io.DataEntry) -> a
    java.io.OutputStream getOutputStream(proguard.io.DataEntry,proguard.io.Finisher) -> a
    void close() -> a
proguard.io.DirectoryFilter -> gQ:
    void <init>(proguard.io.DataEntryReader,proguard.io.DataEntryReader) -> <init>
proguard.io.DirectoryPump -> gR:
    java.io.File directory -> a
    void <init>(java.io.File) -> <init>
    void readFiles(java.io.File,proguard.io.DataEntryReader) -> a
proguard.io.DirectoryWriter -> gS:
    java.io.File baseFile -> a
    boolean isFile -> a
    java.io.File currentFile -> b
    java.io.OutputStream currentOutputStream -> a
    proguard.io.Finisher currentFinisher -> a
    void <init>(java.io.File,boolean) -> <init>
    boolean createDirectory(proguard.io.DataEntry) -> a
    java.io.OutputStream getOutputStream(proguard.io.DataEntry) -> a
    java.io.OutputStream getOutputStream(proguard.io.DataEntry,proguard.io.Finisher) -> a
    void close() -> a
    java.io.File getFile(proguard.io.DataEntry) -> a
    void closeEntry() -> b
proguard.io.FileDataEntry -> gT:
    java.io.File directory -> a
    java.io.File file -> b
    java.io.InputStream inputStream -> a
    void <init>(java.io.File,java.io.File) -> <init>
    java.lang.String getName() -> a
    boolean isDirectory() -> a
    java.io.InputStream getInputStream() -> a
    void closeInputStream() -> a
    proguard.io.DataEntry getParent() -> a
    java.lang.String toString() -> toString
proguard.io.FilteredDataEntryReader -> gU:
    proguard.io.DataEntryFilter dataEntryFilter -> a
    proguard.io.DataEntryReader acceptedDataEntryReader -> a
    proguard.io.DataEntryReader rejectedDataEntryReader -> b
    void <init>(proguard.io.DataEntryFilter,proguard.io.DataEntryReader) -> <init>
    void <init>(proguard.io.DataEntryFilter,proguard.io.DataEntryReader,proguard.io.DataEntryReader) -> <init>
    void read(proguard.io.DataEntry) -> a
proguard.io.FilteredDataEntryWriter -> gV:
    proguard.io.DataEntryFilter dataEntryFilter -> a
    proguard.io.DataEntryWriter acceptedDataEntryWriter -> a
    proguard.io.DataEntryWriter rejectedDataEntryWriter -> b
    void <init>(proguard.io.DataEntryFilter,proguard.io.DataEntryWriter) -> <init>
    void <init>(proguard.io.DataEntryFilter,proguard.io.DataEntryWriter,proguard.io.DataEntryWriter) -> <init>
    boolean createDirectory(proguard.io.DataEntry) -> a
    java.io.OutputStream getOutputStream(proguard.io.DataEntry) -> a
    java.io.OutputStream getOutputStream(proguard.io.DataEntry,proguard.io.Finisher) -> a
    void close() -> a
proguard.io.Finisher -> gW:
    void finish() -> b
proguard.io.JarReader -> gX:
    proguard.io.DataEntryReader dataEntryReader -> a
    void <init>(proguard.io.DataEntryReader) -> <init>
    void read(proguard.io.DataEntry) -> a
proguard.io.JarWriter -> gY:
    proguard.io.DataEntryWriter dataEntryWriter -> a
    java.util.jar.Manifest manifest -> a
    java.lang.String comment -> a
    java.io.OutputStream currentParentOutputStream -> a
    java.util.zip.ZipOutputStream currentJarOutputStream -> a
    proguard.io.Finisher currentFinisher -> a
    proguard.io.DataEntry currentDataEntry -> a
    java.util.Set jarEntryNames -> a
    void <init>(proguard.io.DataEntryWriter) -> <init>
    void <init>(proguard.io.DataEntryWriter,java.util.jar.Manifest,java.lang.String) -> <init>
    boolean createDirectory(proguard.io.DataEntry) -> a
    java.io.OutputStream getOutputStream(proguard.io.DataEntry) -> a
    java.io.OutputStream getOutputStream(proguard.io.DataEntry,proguard.io.Finisher) -> a
    void finish() -> b
    void close() -> a
    boolean prepareEntry(proguard.io.DataEntry) -> b
    void closeEntry() -> c
proguard.io.ManifestRewriter -> gZ:
    void <init>(proguard.classfile.ClassPool,proguard.io.DataEntryWriter) -> <init>
    void copyData(java.io.Reader,java.io.Writer) -> a
proguard.io.ManifestRewriter$SplitLineReader -> ha:
    int bufferedCharacter -> a
    void <init>(java.io.Reader) -> <init>
    int read() -> read
    int read(char[],int,int) -> read
    long skip(long) -> skip
proguard.io.ManifestRewriter$SplitLineWriter -> hb:
    int counter -> a
    void <init>(java.io.Writer) -> <init>
    void write(int) -> write
    void write(char[],int,int) -> write
    void write(java.lang.String,int,int) -> write
proguard.io.ParentDataEntryWriter -> hc:
    proguard.io.DataEntryWriter dataEntryWriter -> a
    void <init>(proguard.io.DataEntryWriter) -> <init>
    boolean createDirectory(proguard.io.DataEntry) -> a
    java.io.OutputStream getOutputStream(proguard.io.DataEntry) -> a
    java.io.OutputStream getOutputStream(proguard.io.DataEntry,proguard.io.Finisher) -> a
    void close() -> a
proguard.io.RenamedDataEntry -> hd:
    proguard.io.DataEntry dataEntry -> a
    java.lang.String name -> a
    void <init>(proguard.io.DataEntry,java.lang.String) -> <init>
    java.lang.String getName() -> a
    boolean isDirectory() -> a
    java.io.InputStream getInputStream() -> a
    void closeInputStream() -> a
    proguard.io.DataEntry getParent() -> a
    java.lang.String toString() -> toString
proguard.io.ZipDataEntry -> he:
    proguard.io.DataEntry parent -> a
    java.util.zip.ZipEntry zipEntry -> a
    java.util.zip.ZipInputStream zipInputStream -> a
    java.io.InputStream bufferedInputStream -> a
    void <init>(proguard.io.DataEntry,java.util.zip.ZipEntry,java.util.zip.ZipInputStream) -> <init>
    java.lang.String getName() -> a
    boolean isDirectory() -> a
    java.io.InputStream getInputStream() -> a
    void closeInputStream() -> a
    proguard.io.DataEntry getParent() -> a
    java.lang.String toString() -> toString
proguard.obfuscate.AttributeShrinker -> hf:
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramMember(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    int shrinkArray(proguard.classfile.VisitorAccepter[],int) -> a
proguard.obfuscate.AttributeUsageMarker -> hg:
    java.lang.Object USED -> a
    void <init>() -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    boolean isUsed(proguard.classfile.VisitorAccepter) -> a
    void <clinit>() -> <clinit>
proguard.obfuscate.ClassObfuscator -> hh:
    proguard.obfuscate.DictionaryNameFactory classNameFactory -> a
    proguard.obfuscate.DictionaryNameFactory packageNameFactory -> b
    boolean useMixedCaseClassNames -> b
    proguard.util.StringMatcher keepPackageNamesMatcher -> a
    java.lang.String flattenPackageHierarchy -> a
    java.lang.String repackageClasses -> b
    boolean allowAccessModification -> a
    java.util.Set classNamesToAvoid -> a
    java.util.Map packagePrefixMap -> a
    java.util.Map packagePrefixPackageNameFactoryMap -> b
    java.util.Map packagePrefixClassNameFactoryMap -> c
    java.util.Map packagePrefixNumericClassNameFactoryMap -> d
    java.lang.String newClassName -> c
    boolean numericClassName -> c
    void <init>(proguard.classfile.ClassPool,proguard.classfile.ClassPool,proguard.obfuscate.DictionaryNameFactory,proguard.obfuscate.DictionaryNameFactory,boolean,java.util.List,java.lang.String,java.lang.String,boolean) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute) -> a
    void visitEnclosingMethodAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.EnclosingMethodAttribute) -> a
    void visitInnerClassesInfo(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesInfo) -> a
    boolean isNumericClassName(java.lang.String,java.lang.String) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    java.lang.String newPackagePrefix(java.lang.String) -> b
    java.lang.String generateUniqueClassName(java.lang.String,proguard.obfuscate.NameFactory) -> a
    java.lang.String mixedCaseClassName(java.lang.String) -> a
    java.lang.String newClassName(proguard.classfile.Clazz) -> a
proguard.obfuscate.ClassObfuscator$MyKeepCollector -> hi:
    proguard.obfuscate.ClassObfuscator this$0 -> a
    void <init>(proguard.obfuscate.ClassObfuscator) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void mapPackageName(java.lang.String,java.lang.String,boolean) -> a
    void <init>(proguard.obfuscate.ClassObfuscator,byte) -> <init>
proguard.obfuscate.ClassRenamer -> hj:
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramMember(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember) -> a
    void visitLibraryMember(proguard.classfile.LibraryClass,proguard.classfile.LibraryMember) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
proguard.obfuscate.DictionaryNameFactory -> hk:
    java.util.List names -> a
    proguard.obfuscate.NameFactory nameFactory -> a
    int index -> a
    void <init>(java.io.File,proguard.obfuscate.NameFactory) -> <init>
    void <init>(proguard.obfuscate.DictionaryNameFactory,proguard.obfuscate.NameFactory) -> <init>
    void reset() -> a
    java.lang.String nextName() -> a
proguard.obfuscate.MapCleaner -> hl:
    java.util.Map map -> a
    void <init>(java.util.Map) -> <init>
    void visitAnyClass(proguard.classfile.Clazz) -> a
proguard.obfuscate.MappingKeeper -> hm:
    proguard.classfile.ClassPool classPool -> a
    proguard.classfile.util.WarningPrinter warningPrinter -> a
    proguard.classfile.Clazz clazz -> a
    void <init>(proguard.classfile.ClassPool,proguard.classfile.util.WarningPrinter) -> <init>
    boolean processClassMapping(java.lang.String,java.lang.String) -> a
    void processFieldMapping(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void processMethodMapping(java.lang.String,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,java.lang.String) -> a
proguard.obfuscate.MappingPrinter -> hn:
    java.io.PrintStream ps -> a
    boolean printed -> a
    void <init>() -> <init>
    void <init>(java.io.PrintStream) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
    void printInlinedMethodMapping(java.lang.String,java.lang.String,java.lang.String,proguard.classfile.attribute.LineNumberInfo,java.util.Stack,java.lang.String) -> a
proguard.obfuscate.MappingProcessor -> ho:
    boolean processClassMapping(java.lang.String,java.lang.String) -> a
    void processFieldMapping(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void processMethodMapping(java.lang.String,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,java.lang.String) -> a
proguard.obfuscate.MappingReader -> hp:
    java.io.File mappingFile -> a
    void <init>(java.io.File) -> <init>
    void pump(proguard.obfuscate.MappingProcessor) -> a
proguard.obfuscate.MemberNameCollector -> hq:
    boolean allowAggressiveOverloading -> a
    java.util.Map descriptorMap -> a
    void <init>(boolean,java.util.Map) -> <init>
    void visitAnyMember(proguard.classfile.Clazz,proguard.classfile.Member) -> a
proguard.obfuscate.MemberNameConflictFixer -> hr:
    boolean allowAggressiveOverloading -> a
    java.util.Map descriptorMap -> a
    proguard.classfile.util.WarningPrinter warningPrinter -> a
    proguard.obfuscate.MemberObfuscator memberObfuscator -> a
    void <init>(boolean,java.util.Map,proguard.classfile.util.WarningPrinter,proguard.obfuscate.MemberObfuscator) -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    void visitMember(proguard.classfile.Clazz,proguard.classfile.Member,boolean) -> a
proguard.obfuscate.MemberNameFilter -> hs:
    proguard.classfile.visitor.MemberVisitor memberVisitor -> a
    void <init>(proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    boolean hasName(proguard.classfile.Clazz,proguard.classfile.Method) -> a
    boolean hasName(proguard.classfile.Member) -> a
proguard.obfuscate.MemberObfuscator -> ht:
    boolean allowAggressiveOverloading -> a
    proguard.obfuscate.NameFactory nameFactory -> a
    java.util.Map descriptorMap -> a
    void <init>(boolean,proguard.obfuscate.NameFactory,java.util.Map) -> <init>
    void visitAnyMember(proguard.classfile.Clazz,proguard.classfile.Member) -> a
    java.util.Map retrieveNameMap(java.util.Map,java.lang.String) -> a
    void setFixedNewMemberName(proguard.classfile.Member,java.lang.String) -> a
    void setNewMemberName(proguard.classfile.Member,java.lang.String) -> b
    boolean hasFixedNewMemberName(proguard.classfile.Member) -> a
    java.lang.String newMemberName(proguard.classfile.Member) -> a
proguard.obfuscate.MemberObfuscator$MyFixedName -> hu:
    java.lang.String newName -> a
    void <init>(java.lang.String) -> <init>
    java.lang.Object getVisitorInfo() -> a
    void setVisitorInfo(java.lang.Object) -> a
proguard.obfuscate.MemberSpecialNameFilter -> hv:
    proguard.classfile.visitor.MemberVisitor memberVisitor -> a
    void <init>(proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    boolean hasSpecialName(proguard.classfile.Member) -> a
proguard.obfuscate.MultiMappingProcessor -> hw:
    proguard.obfuscate.MappingProcessor[] mappingProcessors -> a
    void <init>(proguard.obfuscate.MappingProcessor[]) -> <init>
    boolean processClassMapping(java.lang.String,java.lang.String) -> a
    void processFieldMapping(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void processMethodMapping(java.lang.String,int,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,int,java.lang.String) -> a
proguard.obfuscate.NameFactory -> hx:
    void reset() -> a
    java.lang.String nextName() -> a
proguard.obfuscate.NameMarker -> hy:
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute) -> a
    void visitInnerClassesInfo(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesInfo) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void keepClassName(proguard.classfile.Clazz) -> b
    void keepFieldName(proguard.classfile.Clazz,proguard.classfile.Field) -> a
    void keepMethodName(proguard.classfile.Clazz,proguard.classfile.Method) -> a
proguard.obfuscate.NumericNameFactory -> hz:
    int index -> a
    void <init>() -> <init>
    void reset() -> a
    java.lang.String nextName() -> a
proguard.obfuscate.Obfuscator -> hA:
    proguard.Configuration configuration -> a
    void <init>(proguard.Configuration) -> <init>
    void execute(proguard.classfile.ClassPool,proguard.classfile.ClassPool) -> a
proguard.obfuscate.ParameterNameMarker -> hB:
    proguard.classfile.attribute.visitor.AttributeVisitor attributeUsageMarker -> a
    void <init>(proguard.classfile.attribute.visitor.AttributeVisitor) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    boolean hasParameters(proguard.classfile.Clazz,proguard.classfile.Method) -> a
proguard.obfuscate.SimpleNameFactory -> hC:
    java.util.List cachedMixedCaseNames -> a
    java.util.List cachedLowerCaseNames -> b
    boolean generateMixedCaseNames -> a
    int index -> a
    void <init>() -> <init>
    void <init>(boolean) -> <init>
    void reset() -> a
    java.lang.String nextName() -> a
    java.lang.String name(int) -> a
    void <clinit>() -> <clinit>
proguard.obfuscate.SourceFileRenamer -> hD:
    java.lang.String newSourceFileAttribute -> a
    void <init>(java.lang.String) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitSourceFileAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceFileAttribute) -> a
    void visitSourceDirAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceDirAttribute) -> a
proguard.obfuscate.SpecialNameFactory -> hE:
    proguard.obfuscate.NameFactory nameFactory -> a
    void <init>(proguard.obfuscate.NameFactory) -> <init>
    void reset() -> a
    java.lang.String nextName() -> a
proguard.optimize.BootstrapMethodArgumentShrinker -> hF:
    long usedParameters -> a
    void <init>() -> <init>
    void visitBootstrapMethodInfo(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodInfo) -> a
    void visitMethodHandleConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodHandleConstant) -> a
    void visitAnyRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
proguard.optimize.ConstantMemberFilter -> hG:
    proguard.classfile.visitor.MemberVisitor constantMemberVisitor -> a
    void <init>(proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
proguard.optimize.ConstantParameterFilter -> hH:
    proguard.classfile.visitor.MemberVisitor constantParameterVisitor -> a
    void <init>(proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
proguard.optimize.DuplicateInitializerFixer -> hI:
    char[] TYPES -> a
    proguard.classfile.visitor.MemberVisitor extraFixedInitializerVisitor -> a
    void <init>() -> <init>
    void <init>(proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute) -> a
    void <clinit>() -> <clinit>
proguard.optimize.DuplicateInitializerInvocationFixer -> hJ:
    proguard.classfile.instruction.visitor.InstructionVisitor extraAddedInstructionVisitor -> a
    proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor -> a
    java.lang.String descriptor -> a
    int descriptorLengthDelta -> a
    void <init>() -> <init>
    void <init>(proguard.classfile.instruction.visitor.InstructionVisitor) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitAnyMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> b
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
proguard.optimize.KeepMarker -> hK:
    java.lang.Object KEPT -> a
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    void markAsKept(proguard.classfile.VisitorAccepter) -> a
    boolean isKept(proguard.classfile.VisitorAccepter) -> a
    void <clinit>() -> <clinit>
proguard.optimize.KeptClassFilter -> hL:
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.optimize.KeptMemberFilter -> hM:
    proguard.classfile.visitor.MemberVisitor memberVisitor -> a
    void <init>(proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
proguard.optimize.MethodDescriptorShrinker -> hN:
    proguard.classfile.visitor.MemberVisitor extraMemberVisitor -> a
    void <init>() -> <init>
    void <init>(proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute) -> a
    java.lang.String shrinkDescriptor(proguard.classfile.Method,java.lang.String) -> a
    proguard.classfile.Clazz[] shrinkReferencedClasses(proguard.classfile.Method,java.lang.String,proguard.classfile.Clazz[]) -> a
proguard.optimize.MethodStaticizer -> hO:
    proguard.classfile.visitor.MemberVisitor extraStaticMemberVisitor -> a
    void <init>() -> <init>
    void <init>(proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
proguard.optimize.OptimizationInfoClassFilter -> hP:
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.optimize.OptimizationInfoMemberFilter -> hQ:
    proguard.classfile.visitor.MemberVisitor memberVisitor -> a
    void <init>(proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
proguard.optimize.Optimizer -> hR:
    proguard.Configuration configuration -> a
    void <init>(proguard.Configuration) -> <init>
    java.lang.String disabled(boolean) -> a
    void <clinit>() -> <clinit>
proguard.optimize.ParameterShrinker -> hS:
    proguard.classfile.visitor.MemberVisitor extraVariableMemberVisitor -> a
    proguard.classfile.editor.VariableRemapper variableRemapper -> a
    void <init>() -> <init>
    void <init>(proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
proguard.optimize.TailRecursionSimplifier -> hT:
    proguard.classfile.instruction.visitor.InstructionVisitor extraTailRecursionVisitor -> a
    proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer -> a
    proguard.optimize.TailRecursionSimplifier$MyRecursionChecker recursionChecker -> a
    proguard.classfile.Method targetMethod -> a
    boolean inlinedAny -> a
    void <init>() -> <init>
    void <init>(proguard.classfile.instruction.visitor.InstructionVisitor) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
proguard.optimize.TailRecursionSimplifier$MyRecursionChecker -> hU:
    boolean recursive -> a
    proguard.optimize.TailRecursionSimplifier this$0 -> a
    void <init>(proguard.optimize.TailRecursionSimplifier) -> <init>
    void visitAnyMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> b
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
    void <init>(proguard.optimize.TailRecursionSimplifier,byte) -> <init>
proguard.optimize.WriteOnlyFieldFilter -> hV:
    proguard.classfile.visitor.MemberVisitor writeOnlyFieldVisitor -> a
    void <init>(proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
proguard.optimize.evaluation.EvaluationShrinker -> hW:
    proguard.classfile.instruction.visitor.InstructionVisitor extraDeletedInstructionVisitor -> a
    proguard.classfile.instruction.visitor.InstructionVisitor extraAddedInstructionVisitor -> b
    proguard.optimize.evaluation.PartialEvaluator partialEvaluator -> a
    proguard.optimize.evaluation.PartialEvaluator simplePartialEvaluator -> b
    proguard.optimize.info.SideEffectInstructionChecker sideEffectInstructionChecker -> a
    proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier unusedParameterSimplifier -> a
    proguard.optimize.evaluation.EvaluationShrinker$MyProducerMarker producerMarker -> a
    proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker variableInitializationMarker -> a
    proguard.optimize.evaluation.EvaluationShrinker$MyLocalStackConsistencyFixer localStackConsistencyFixer -> a
    proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor -> a
    boolean[][] stacksNecessaryAfter -> b
    boolean[][] stacksSimplifiedBefore -> a
    boolean[] instructionsNecessary -> a
    int maxMarkedOffset -> a
    void <init>() -> <init>
    void <init>(proguard.optimize.evaluation.PartialEvaluator,proguard.classfile.instruction.visitor.InstructionVisitor,proguard.classfile.instruction.visitor.InstructionVisitor) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
    void markVariableInitializersBefore(int,int) -> a
    void markStackEntryProducers(int,int) -> c
    void markStackEntryProducers(proguard.evaluation.value.InstructionOffsetValue,int,boolean,boolean) -> a
    void markStraddlingBranches(int,proguard.evaluation.value.InstructionOffsetValue,boolean,boolean) -> a
    void insertInstructions(int,boolean,boolean,proguard.classfile.instruction.Instruction,int) -> a
    void insertInstructions$5a6e1dd9(int,boolean,boolean,proguard.classfile.instruction.Instruction[]) -> a
    void replaceByInfiniteLoop$3ac35b3b(int) -> b
    void markStackEntryAfter(int,int) -> b
    boolean isStackEntryPresentBefore(int,int) -> a
    boolean isStackEntryNecessaryAfter(int,int) -> b
    boolean isStackSimplifiedBefore(int,int) -> c
    void markInstruction(int) -> a
    boolean isInstructionNecessary(int) -> a
    void access$700(proguard.optimize.evaluation.EvaluationShrinker,proguard.classfile.Clazz,int,proguard.classfile.instruction.Instruction) -> a
    void access$800(proguard.optimize.evaluation.EvaluationShrinker,int,int,int) -> a
    boolean access$1500(proguard.optimize.evaluation.EvaluationShrinker,int,int) -> a
    void access$1600(proguard.optimize.evaluation.EvaluationShrinker,int,boolean,boolean,proguard.classfile.instruction.Instruction,int) -> a
    void access$1700(proguard.optimize.evaluation.EvaluationShrinker,int,boolean,boolean,proguard.classfile.instruction.Instruction,int) -> b
    void access$2000(proguard.optimize.evaluation.EvaluationShrinker,int,boolean,boolean,proguard.classfile.instruction.Instruction,int) -> c
    boolean access$2100(proguard.optimize.evaluation.EvaluationShrinker,int,int,int) -> a
    boolean access$2200(proguard.optimize.evaluation.EvaluationShrinker,int,int,int) -> b
proguard.optimize.evaluation.EvaluationShrinker$MyLocalStackConsistencyFixer -> hX:
    proguard.optimize.evaluation.EvaluationShrinker this$0 -> a
    void <init>(proguard.optimize.evaluation.EvaluationShrinker) -> <init>
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction) -> a
    void <init>(proguard.optimize.evaluation.EvaluationShrinker,byte) -> <init>
proguard.optimize.evaluation.EvaluationShrinker$MyProducerMarker -> hY:
    proguard.optimize.evaluation.EvaluationShrinker this$0 -> a
    void <init>(proguard.optimize.evaluation.EvaluationShrinker) -> <init>
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction) -> a
    void <init>(proguard.optimize.evaluation.EvaluationShrinker,byte) -> <init>
proguard.optimize.evaluation.EvaluationShrinker$MyUnusedParameterSimplifier -> hZ:
    int invocationOffset -> a
    proguard.classfile.instruction.ConstantInstruction invocationInstruction -> a
    proguard.optimize.evaluation.EvaluationShrinker this$0 -> a
    void <init>(proguard.optimize.evaluation.EvaluationShrinker) -> <init>
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitAnyRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> a
    void visitAnyMember(proguard.classfile.Clazz,proguard.classfile.Member) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void <init>(proguard.optimize.evaluation.EvaluationShrinker,byte) -> <init>
proguard.optimize.evaluation.EvaluationShrinker$MyVariableInitializationMarker -> ia:
    proguard.optimize.evaluation.EvaluationShrinker this$0 -> a
    void <init>(proguard.optimize.evaluation.EvaluationShrinker) -> <init>
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
    void <init>(proguard.optimize.evaluation.EvaluationShrinker,byte) -> <init>
proguard.optimize.evaluation.EvaluationSimplifier -> ib:
    int POS_ZERO_FLOAT_BITS -> a
    long POS_ZERO_DOUBLE_BITS -> a
    proguard.classfile.instruction.visitor.InstructionVisitor extraInstructionVisitor -> a
    proguard.optimize.evaluation.PartialEvaluator partialEvaluator -> a
    proguard.optimize.info.SideEffectInstructionChecker sideEffectInstructionChecker -> a
    proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor -> a
    void <init>() -> <init>
    void <init>(proguard.optimize.evaluation.PartialEvaluator,proguard.classfile.instruction.visitor.InstructionVisitor) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction) -> a
    void visitTableSwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.TableSwitchInstruction) -> a
    void visitLookUpSwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.LookUpSwitchInstruction) -> a
    void replaceIntegerPushInstruction(proguard.classfile.Clazz,int,proguard.classfile.instruction.Instruction) -> a
    void replaceIntegerPushInstruction(proguard.classfile.Clazz,int,proguard.classfile.instruction.Instruction,int) -> a
    void replaceLongPushInstruction(proguard.classfile.Clazz,int,proguard.classfile.instruction.Instruction) -> b
    void replaceLongPushInstruction(proguard.classfile.Clazz,int,proguard.classfile.instruction.Instruction,int) -> b
    void replaceFloatPushInstruction(proguard.classfile.Clazz,int,proguard.classfile.instruction.Instruction) -> c
    void replaceFloatPushInstruction(proguard.classfile.Clazz,int,proguard.classfile.instruction.Instruction,int) -> c
    void replaceDoublePushInstruction(proguard.classfile.Clazz,int,proguard.classfile.instruction.Instruction) -> d
    void replaceDoublePushInstruction(proguard.classfile.Clazz,int,proguard.classfile.instruction.Instruction,int) -> d
    void replaceReferencePushInstruction(proguard.classfile.Clazz,int,proguard.classfile.instruction.Instruction) -> e
    void replaceConstantPushInstruction(proguard.classfile.Clazz,int,proguard.classfile.instruction.Instruction,byte,int) -> a
    void replaceVariablePushInstruction(proguard.classfile.Clazz,int,proguard.classfile.instruction.Instruction,byte,int) -> b
    void replaceBranchInstruction(proguard.classfile.Clazz,int,proguard.classfile.instruction.Instruction) -> f
    void cleanUpSwitchInstruction(proguard.classfile.Clazz,int,proguard.classfile.instruction.SwitchInstruction) -> a
    void trimSwitchInstruction(proguard.classfile.Clazz,int,proguard.classfile.instruction.TableSwitchInstruction) -> a
    void replaceInstruction(proguard.classfile.Clazz,int,proguard.classfile.instruction.Instruction,proguard.classfile.instruction.Instruction) -> a
    void replaceSimpleEnumSwitchInstruction(proguard.classfile.Clazz,int,int,proguard.classfile.instruction.SwitchInstruction) -> a
    void <clinit>() -> <clinit>
proguard.optimize.evaluation.LivenessAnalyzer -> ic:
    proguard.optimize.evaluation.PartialEvaluator partialEvaluator -> a
    long[] isAliveBefore -> b
    long[] isAliveAfter -> c
    long[] isCategory2 -> a
    boolean checkAgain -> a
    long alive -> a
    void <init>() -> <init>
    void <init>(proguard.optimize.evaluation.PartialEvaluator) -> <init>
    boolean isTraced(int) -> a
    boolean isAliveBefore(int,int) -> a
    void setAliveBefore(int,int,boolean) -> a
    boolean isAliveAfter(int,int) -> b
    void setAliveAfter(int,int,boolean) -> b
    void setCategory2(int,int,boolean) -> c
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
proguard.optimize.evaluation.LoadingInvocationUnit -> id:
    boolean loadFieldValues -> a
    boolean loadMethodParameterValues -> b
    boolean loadMethodReturnValues -> c
    void <init>(proguard.evaluation.value.ValueFactory,boolean,boolean,boolean) -> <init>
    proguard.evaluation.value.Value getFieldValue(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant,java.lang.String) -> a
    proguard.evaluation.value.Value getMethodParameterValue(proguard.classfile.Clazz,proguard.classfile.Method,int,java.lang.String,proguard.classfile.Clazz) -> a
    proguard.evaluation.value.Value getMethodReturnValue(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant,java.lang.String) -> b
proguard.optimize.evaluation.PartialEvaluator -> ie:
    proguard.evaluation.value.ValueFactory valueFactory -> a
    proguard.evaluation.InvocationUnit invocationUnit -> a
    boolean evaluateAllCode -> a
    proguard.evaluation.value.InstructionOffsetValue[] branchOriginValues -> a
    proguard.evaluation.value.InstructionOffsetValue[] branchTargetValues -> b
    proguard.evaluation.TracedVariables[] variablesBefore -> a
    proguard.evaluation.TracedStack[] stacksBefore -> a
    proguard.evaluation.TracedVariables[] variablesAfter -> b
    proguard.evaluation.TracedStack[] stacksAfter -> b
    boolean[] generalizedContexts -> a
    int[] evaluationCounts -> a
    boolean evaluateExceptions -> b
    int codeLength -> a
    proguard.evaluation.BasicBranchUnit branchUnit -> a
    proguard.evaluation.BranchTargetFinder branchTargetFinder -> a
    java.util.Stack callingInstructionBlockStack -> a
    java.util.Stack instructionBlockStack -> b
    void <init>() -> <init>
    void <init>(proguard.evaluation.value.ValueFactory,proguard.evaluation.InvocationUnit,boolean) -> <init>
    void <init>(proguard.optimize.evaluation.PartialEvaluator) -> <init>
    void <init>(proguard.evaluation.value.ValueFactory,proguard.evaluation.InvocationUnit,boolean,proguard.evaluation.BasicBranchUnit,proguard.evaluation.BranchTargetFinder,java.util.Stack) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    boolean isTraced(int) -> a
    boolean isBranchOrExceptionTarget(int) -> b
    boolean isSubroutineStart(int) -> c
    boolean isSubroutineReturning(int) -> d
    int initializationOffset(int) -> a
    int superInitializationOffset() -> a
    void evaluateInstructionBlockAndExceptionHandlers(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.evaluation.TracedVariables,proguard.evaluation.TracedStack,int,int) -> a
    void evaluateInstructionBlock(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.evaluation.TracedVariables,proguard.evaluation.TracedStack,int) -> a
    void evaluateSingleInstructionBlock(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.evaluation.TracedVariables,proguard.evaluation.TracedStack,int) -> b
    void generalize(proguard.optimize.evaluation.PartialEvaluator,int,int) -> a
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
    void initializeArrays(proguard.classfile.attribute.CodeAttribute) -> a
proguard.optimize.evaluation.PartialEvaluator$MyInstructionBlock -> if:
    proguard.evaluation.TracedVariables variables -> a
    proguard.evaluation.TracedStack stack -> a
    int startOffset -> a
    void <init>(proguard.evaluation.TracedVariables,proguard.evaluation.TracedStack,int) -> <init>
    void <init>(proguard.evaluation.TracedVariables,proguard.evaluation.TracedStack,int,byte) -> <init>
proguard.optimize.evaluation.SimpleEnumArrayPropagator -> ig:
    proguard.evaluation.value.ValueFactory valueFactory -> a
    proguard.evaluation.value.Value array -> a
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
proguard.optimize.evaluation.SimpleEnumClassChecker -> ih:
    proguard.optimize.info.SimpleEnumMarker simpleEnumMarker -> a
    proguard.classfile.visitor.MemberVisitor virtualMemberChecker -> a
    void <init>() -> <init>
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
proguard.optimize.evaluation.SimpleEnumClassSimplifier -> ii:
    proguard.classfile.constant.Constant[] CONSTANTS -> a
    proguard.classfile.instruction.Instruction[] INSTRUCTIONS -> a
    proguard.classfile.instruction.Instruction[] REPLACEMENT_INSTRUCTIONS -> b
    proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor -> a
    proguard.optimize.peephole.InstructionSequenceReplacer instructionSequenceReplacer -> a
    proguard.classfile.visitor.MemberVisitor initializerSimplifier -> a
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void <clinit>() -> <clinit>
proguard.optimize.evaluation.SimpleEnumDescriptorSimplifier -> ij:
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitMethodTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodTypeConstant) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitLocalVariableInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableInfo) -> a
    void visitLocalVariableTypeInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeInfo) -> a
    java.lang.String simplifyDescriptor(java.lang.String,proguard.classfile.Clazz) -> a
    java.lang.String simplifyDescriptor(java.lang.String,proguard.classfile.Clazz[]) -> a
    proguard.classfile.Clazz[] simplifyReferencedClasses(java.lang.String,proguard.classfile.Clazz[]) -> a
    boolean isSimpleEnum(proguard.classfile.Clazz) -> a
proguard.optimize.evaluation.SimpleEnumUseChecker -> ik:
    proguard.optimize.evaluation.PartialEvaluator partialEvaluator -> a
    proguard.classfile.visitor.MemberVisitor methodCodeChecker -> a
    proguard.classfile.constant.visitor.ConstantVisitor invokedMethodChecker -> a
    proguard.classfile.constant.visitor.ConstantVisitor parameterChecker -> b
    proguard.classfile.visitor.ClassVisitor complexEnumMarker -> a
    proguard.classfile.visitor.ReferencedClassVisitor referencedComplexEnumMarker -> a
    int invocationOffset -> a
    void <init>() -> <init>
    void <init>(proguard.optimize.evaluation.PartialEvaluator) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction) -> a
    void visitAnySwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SwitchInstruction) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitParameter$f53a1ca(int,int,java.lang.String,proguard.classfile.Clazz) -> a
    boolean isPoppingExpectedType(int,int,java.lang.String) -> a
    boolean isPoppingSimpleEnumType(int,int) -> a
    boolean isSimpleEnum(proguard.classfile.Clazz) -> a
    void markPoppedComplexEnumType(int,int) -> a
    void markComplexEnumType(proguard.evaluation.value.ReferenceValue) -> a
proguard.optimize.evaluation.SimpleEnumUseSimplifier -> il:
    proguard.classfile.instruction.visitor.InstructionVisitor extraInstructionVisitor -> a
    proguard.optimize.evaluation.PartialEvaluator partialEvaluator -> a
    proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor -> a
    proguard.classfile.constant.visitor.ConstantVisitor nullParameterFixer -> a
    proguard.classfile.Clazz invocationClazz -> a
    proguard.classfile.Method invocationMethod -> a
    proguard.classfile.attribute.CodeAttribute invocationCodeAttribute -> a
    int invocationOffset -> a
    boolean isSimpleEnum -> a
    void <init>() -> <init>
    void <init>(proguard.optimize.evaluation.PartialEvaluator,proguard.classfile.instruction.visitor.InstructionVisitor) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction) -> a
    void visitAnySwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SwitchInstruction) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitParameter$f53a1ca(int,int,java.lang.String,proguard.classfile.Clazz) -> a
    boolean isPushingSimpleEnum(int) -> a
    boolean isPoppingSimpleEnum(int,int) -> a
    boolean isSimpleEnum(proguard.classfile.Clazz) -> a
    void replaceInstruction(proguard.classfile.Clazz,int,proguard.classfile.instruction.Instruction,proguard.classfile.instruction.Instruction) -> a
    void replaceNullStackEntryProducers(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int) -> a
    void replaceNullStackEntryProducers$306c982b(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int) -> a
proguard.optimize.evaluation.StoringInvocationUnit -> im:
    boolean storeFieldValues -> a
    boolean storeMethodParameterValues -> b
    boolean storeMethodReturnValues -> c
    void <init>(proguard.evaluation.value.ValueFactory,boolean,boolean,boolean) -> <init>
    void setFieldClassValue$254174b4(proguard.classfile.constant.RefConstant,proguard.evaluation.value.ReferenceValue) -> a
    void setFieldValue$4891f91b(proguard.classfile.constant.RefConstant,proguard.evaluation.value.Value) -> a
    void setMethodParameterValue$2df096d4(proguard.classfile.constant.RefConstant,int,proguard.evaluation.value.Value) -> a
    void setMethodReturnValue$1c07c5a6(proguard.classfile.Method,proguard.evaluation.value.Value) -> a
    proguard.evaluation.value.Value getFieldValue(proguard.classfile.Field) -> a
    proguard.evaluation.value.Value getMethodParameterValue(proguard.classfile.Method,int) -> a
    proguard.evaluation.value.Value getMethodReturnValue(proguard.classfile.Method) -> a
proguard.optimize.evaluation.TracedBranchUnit -> in:
    void <init>() -> <init>
    void branchConditionally(proguard.classfile.Clazz,proguard.classfile.attribute.CodeAttribute,int,int,int) -> a
proguard.optimize.evaluation.VariableOptimizer -> io:
    boolean reuseThis -> a
    proguard.classfile.visitor.MemberVisitor extraVariableMemberVisitor -> a
    proguard.optimize.evaluation.LivenessAnalyzer livenessAnalyzer -> a
    proguard.classfile.editor.VariableRemapper variableRemapper -> a
    proguard.classfile.editor.VariableCleaner variableCleaner -> a
    int[] variableMap -> a
    void <init>(boolean,proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitLocalVariableInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableInfo) -> a
    void visitLocalVariableTypeInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeInfo) -> a
    int firstLiveness(int,int,int) -> a
    int lastLiveness(int,int,int) -> b
proguard.optimize.info.AccessMethodMarker -> ip:
    proguard.classfile.Method invokingMethod -> a
    void <init>() -> <init>
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void visitMethodHandleConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodHandleConstant) -> a
    void visitAnyRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitAnyClass(proguard.classfile.Clazz) -> a
    void visitAnyMember(proguard.classfile.Clazz,proguard.classfile.Member) -> a
    void setAccessesPackageCode(proguard.classfile.Method) -> a
proguard.optimize.info.BackwardBranchMarker -> iq:
    void <init>() -> <init>
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction) -> a
    void visitAnySwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SwitchInstruction) -> a
    void markBackwardBranch(proguard.classfile.Method,int) -> a
proguard.optimize.info.CatchExceptionMarker -> ir:
    void <init>() -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
proguard.optimize.info.CaughtClassFilter -> is:
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.optimize.info.CaughtClassMarker -> it:
    void <init>() -> <init>
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    boolean isCaught(proguard.classfile.Clazz) -> a
proguard.optimize.info.ClassOptimizationInfo -> iu:
    boolean isInstantiated -> a
    boolean isInstanceofed -> b
    boolean isDotClassed -> c
    boolean isCaught -> d
    boolean isSimpleEnum -> e
    boolean containsStaticInitializer -> f
    boolean containsPackageVisibleMembers -> g
    boolean invokesPackageVisibleMembers -> h
    proguard.classfile.Clazz targetClass -> a
    void <init>() -> <init>
    proguard.optimize.info.ClassOptimizationInfo getClassOptimizationInfo(proguard.classfile.Clazz) -> a
proguard.optimize.info.ClassOptimizationInfoSetter -> iv:
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
proguard.optimize.info.DotClassMarker -> iw:
    void <init>() -> <init>
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    boolean isDotClassed(proguard.classfile.Clazz) -> a
proguard.optimize.info.DynamicInvocationMarker -> ix:
    void <init>() -> <init>
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
proguard.optimize.info.FieldOptimizationInfo -> iy:
    proguard.evaluation.value.ParticularValueFactory VALUE_FACTORY -> a
    proguard.evaluation.ConstantValueFactory CONSTANT_VALUE_FACTORY -> a
    proguard.evaluation.value.InitialValueFactory INITIAL_VALUE_FACTORY -> a
    boolean isWritten -> a
    boolean isRead -> b
    boolean canBeMadePrivate -> c
    proguard.evaluation.value.ReferenceValue referencedClass -> a
    proguard.evaluation.value.Value value -> a
    void <init>(proguard.classfile.Clazz,proguard.classfile.Field) -> <init>
    void <init>(proguard.optimize.info.FieldOptimizationInfo) -> <init>
    void resetValue(proguard.classfile.Clazz,proguard.classfile.Field) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitConstantValueAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.ConstantValueAttribute) -> a
    void setFieldOptimizationInfo(proguard.classfile.Clazz,proguard.classfile.Field) -> b
    proguard.optimize.info.FieldOptimizationInfo getFieldOptimizationInfo(proguard.classfile.Field) -> a
    void <clinit>() -> <clinit>
proguard.optimize.info.InstanceofClassFilter -> iz:
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.optimize.info.InstanceofClassMarker -> iA:
    void <init>() -> <init>
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    boolean isInstanceofed(proguard.classfile.Clazz) -> a
proguard.optimize.info.InstantiationClassMarker -> iB:
    void <init>() -> <init>
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
proguard.optimize.info.MemberOptimizationInfoSetter -> iC:
    void <init>() -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
proguard.optimize.info.MethodInvocationMarker -> iD:
    void <init>() -> <init>
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitAnyMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> b
    void visitAnyMember(proguard.classfile.Clazz,proguard.classfile.Member) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
proguard.optimize.info.MethodOptimizationInfo -> iE:
    boolean hasNoSideEffects -> a
    boolean hasSideEffects -> b
    boolean canBeMadePrivate -> c
    boolean catchesExceptions -> d
    boolean branchesBackward -> e
    boolean invokesSuperMethods -> f
    boolean invokesDynamically -> g
    boolean accessesPrivateCode -> h
    boolean accessesPackageCode -> i
    boolean accessesProtectedCode -> j
    boolean returnsWithNonEmptyStack -> k
    int invocationCount -> a
    int parameterSize -> b
    long usedParameters -> a
    proguard.evaluation.value.Value[] parameters -> a
    proguard.evaluation.value.Value returnValue -> a
    void <init>(proguard.classfile.Clazz,proguard.classfile.Method) -> <init>
    proguard.optimize.info.MethodOptimizationInfo getMethodOptimizationInfo(proguard.classfile.Method) -> a
proguard.optimize.info.NoSideEffectMethodMarker -> iF:
    java.lang.Object KEPT_BUT_NO_SIDE_EFFECTS -> a
    void <init>() -> <init>
    void visitAnyMember(proguard.classfile.Clazz,proguard.classfile.Member) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    void markNoSideEffects(proguard.classfile.Method) -> a
    boolean hasNoSideEffects(proguard.classfile.Method) -> a
    void <clinit>() -> <clinit>
proguard.optimize.info.NonEmptyStackReturnMarker -> iG:
    proguard.classfile.attribute.visitor.StackSizeComputer stackSizeComputer -> a
    void <init>(proguard.classfile.attribute.visitor.StackSizeComputer) -> <init>
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction) -> a
    void markReturnWithNonEmptyStack(proguard.classfile.Method,int,int) -> a
proguard.optimize.info.NonPrivateMemberMarker -> iH:
    proguard.classfile.visitor.MethodImplementationFilter filteredMethodMarker -> a
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitAnyRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    void markCanNotBeMadePrivate(proguard.classfile.Field) -> a
    void markCanNotBeMadePrivate(proguard.classfile.Method) -> a
proguard.optimize.info.PackageVisibleMemberContainingClassMarker -> iI:
    void <init>() -> <init>
    void visitAnyClass(proguard.classfile.Clazz) -> a
    void visitAnyMember(proguard.classfile.Clazz,proguard.classfile.Member) -> a
    void setPackageVisibleMembers(proguard.classfile.Clazz) -> b
proguard.optimize.info.PackageVisibleMemberInvokingClassMarker -> iJ:
    proguard.classfile.Clazz referencingClass -> a
    void <init>() -> <init>
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitAnyRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitAnyClass(proguard.classfile.Clazz) -> a
    void visitAnyMember(proguard.classfile.Clazz,proguard.classfile.Member) -> a
    void setInvokesPackageVisibleMembers(proguard.classfile.Clazz) -> b
proguard.optimize.info.ParameterUsageMarker -> iK:
    boolean markThisParameter -> a
    boolean markAllParameters -> b
    proguard.optimize.evaluation.PartialEvaluator partialEvaluator -> a
    void <init>() -> <init>
    void <init>(boolean,boolean) -> <init>
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
    int getParameterSize(proguard.classfile.Method) -> a
    void markParameterUsed(proguard.classfile.Method,int) -> a
    void markUsedParameters(proguard.classfile.Method,long) -> a
    boolean isParameterUsed(proguard.classfile.Method,int) -> a
proguard.optimize.info.ReadWriteFieldMarker -> iL:
    boolean reading -> a
    boolean writing -> b
    void <init>() -> <init>
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitFieldrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.FieldrefConstant) -> a
    void visitAnyMember(proguard.classfile.Clazz,proguard.classfile.Member) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    boolean isRead(proguard.classfile.Field) -> a
proguard.optimize.info.SideEffectInstructionChecker -> iM:
    boolean OPTIMIZE_CONSERVATIVELY -> a
    boolean includeReturnInstructions -> b
    boolean includeLocalFieldAccess -> c
    boolean writingField -> d
    proguard.classfile.Clazz referencingClass -> a
    boolean hasSideEffects -> e
    void <init>(boolean,boolean) -> <init>
    boolean hasSideEffects(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void visitFieldrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.FieldrefConstant) -> a
    void visitAnyMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> b
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    boolean mayHaveSideEffects(proguard.classfile.Clazz,proguard.classfile.Clazz) -> a
    java.util.Set initializedSuperClasses(proguard.classfile.Clazz) -> a
    void <clinit>() -> <clinit>
proguard.optimize.info.SideEffectMethodFilter -> iN:
    proguard.classfile.visitor.MemberVisitor memberVisitor -> a
    void <init>(proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
proguard.optimize.info.SideEffectMethodMarker -> iO:
    proguard.optimize.info.SideEffectInstructionChecker sideEffectInstructionChecker -> a
    proguard.optimize.info.SideEffectInstructionChecker initializerSideEffectInstructionChecker -> b
    int newSideEffectCount -> a
    boolean hasSideEffects -> a
    void <init>() -> <init>
    void visitClassPool(proguard.classfile.ClassPool) -> a
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    boolean hasSideEffects(proguard.classfile.Method) -> a
proguard.optimize.info.SimpleEnumFilter -> iP:
    proguard.classfile.visitor.ClassVisitor simpleEnumClassVisitor -> a
    proguard.classfile.visitor.ClassVisitor otherClassVisitor -> b
    void <init>(proguard.classfile.visitor.ClassVisitor) -> <init>
    void <init>(proguard.classfile.visitor.ClassVisitor,proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.optimize.info.SimpleEnumMarker -> iQ:
    boolean simple -> a
    void <init>(boolean) -> <init>
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    boolean isSimpleEnum(proguard.classfile.Clazz) -> a
proguard.optimize.info.StaticInitializerContainingClassFilter -> iR:
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.optimize.info.StaticInitializerContainingClassMarker -> iS:
    void <init>() -> <init>
    void visitAnyClass(proguard.classfile.Clazz) -> a
    boolean containsStaticInitializer(proguard.classfile.Clazz) -> a
proguard.optimize.info.SuperInvocationMarker -> iT:
    boolean invokesSuperMethods -> a
    void <init>() -> <init>
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitAnyMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> b
proguard.optimize.info.VariableUsageMarker -> iU:
    boolean[] variableUsed -> a
    void <init>() -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
proguard.optimize.peephole.ClassFinalizer -> iV:
    proguard.classfile.visitor.ClassVisitor extraClassVisitor -> a
    void <init>() -> <init>
    void <init>(proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
proguard.optimize.peephole.ClassMerger -> iW:
    proguard.classfile.ProgramClass targetClass -> a
    boolean allowAccessModification -> a
    boolean mergeInterfacesAggressively -> b
    proguard.classfile.visitor.ClassVisitor extraClassVisitor -> a
    proguard.classfile.visitor.MemberVisitor fieldOptimizationInfoCopier -> a
    void <init>(proguard.classfile.ProgramClass,boolean,boolean,proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    boolean isOnlySubClass(proguard.classfile.Clazz,proguard.classfile.ProgramClass) -> a
    java.util.Set subInterfaces(proguard.classfile.Clazz,proguard.classfile.Clazz) -> a
    java.util.Set initializedSuperClasses(proguard.classfile.Clazz) -> a
    java.util.Set instanceofedSuperClasses(proguard.classfile.Clazz) -> b
    java.util.Set caughtSuperClasses(proguard.classfile.Clazz) -> c
    boolean introducesUnwantedFields(proguard.classfile.ProgramClass,proguard.classfile.ProgramClass) -> a
    boolean shadowsAnyFields(proguard.classfile.Clazz,proguard.classfile.Clazz) -> a
    boolean introducesUnwantedAbstractMethods(proguard.classfile.Clazz,proguard.classfile.ProgramClass) -> b
    boolean overridesAnyMethods(proguard.classfile.Clazz,proguard.classfile.Clazz) -> b
    boolean shadowsAnyMethods(proguard.classfile.Clazz,proguard.classfile.Clazz) -> c
    proguard.classfile.Clazz getTargetClass(proguard.classfile.Clazz) -> a
proguard.optimize.peephole.ClassMerger$FieldOptimizationInfoCopier -> iX:
    void <init>() -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void <init>(byte) -> <init>
proguard.optimize.peephole.GotoCommonCodeReplacer -> iY:
    proguard.classfile.instruction.visitor.InstructionVisitor extraInstructionVisitor -> a
    proguard.evaluation.BranchTargetFinder branchTargetFinder -> a
    proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor -> a
    void <init>(proguard.classfile.instruction.visitor.InstructionVisitor) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction) -> a
proguard.optimize.peephole.GotoGotoReplacer -> iZ:
    proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor -> a
    proguard.classfile.instruction.visitor.InstructionVisitor extraInstructionVisitor -> a
    void <init>(proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.visitor.InstructionVisitor) -> <init>
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction) -> a
proguard.optimize.peephole.GotoReturnReplacer -> ja:
    proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor -> a
    proguard.classfile.instruction.visitor.InstructionVisitor extraInstructionVisitor -> a
    void <init>(proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.visitor.InstructionVisitor) -> <init>
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction) -> a
proguard.optimize.peephole.HorizontalClassMerger -> jb:
    boolean allowAccessModification -> a
    boolean mergeInterfacesAggressively -> b
    proguard.classfile.visitor.ClassVisitor extraClassVisitor -> a
    void <init>(boolean,boolean,proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
proguard.optimize.peephole.InstructionSequenceConstants -> jc:
    proguard.classfile.constant.Constant[] CONSTANTS -> a
    proguard.classfile.instruction.Instruction[][][] VARIABLE -> a
    proguard.classfile.instruction.Instruction[][][] ARITHMETIC -> b
    proguard.classfile.instruction.Instruction[][][] FIELD -> c
    proguard.classfile.instruction.Instruction[][][] CAST -> d
    proguard.classfile.instruction.Instruction[][][] BRANCH -> e
    proguard.classfile.instruction.Instruction[][][] STRING -> f
    void <init>(proguard.classfile.ClassPool,proguard.classfile.ClassPool) -> <init>
    void <clinit>() -> <clinit>
proguard.optimize.peephole.InstructionSequenceReplacer -> jd:
    proguard.classfile.util.InstructionSequenceMatcher instructionSequenceMatcher -> a
    proguard.classfile.constant.Constant[] patternConstants -> a
    proguard.classfile.instruction.Instruction[] replacementInstructions -> a
    proguard.evaluation.BranchTargetFinder branchTargetFinder -> a
    proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor -> a
    proguard.classfile.instruction.visitor.InstructionVisitor extraInstructionVisitor -> a
    proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory replacementInstructionFactory -> a
    void <init>(proguard.classfile.constant.Constant[],proguard.classfile.instruction.Instruction[],proguard.classfile.instruction.Instruction[],proguard.evaluation.BranchTargetFinder,proguard.classfile.editor.CodeAttributeEditor) -> <init>
    void <init>(proguard.classfile.constant.Constant[],proguard.classfile.instruction.Instruction[],proguard.classfile.instruction.Instruction[],proguard.evaluation.BranchTargetFinder,proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.visitor.InstructionVisitor) -> <init>
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
proguard.optimize.peephole.InstructionSequenceReplacer$MyReplacementInstructionFactory -> je:
    proguard.classfile.instruction.Instruction replacementInstruction -> a
    proguard.optimize.peephole.InstructionSequenceReplacer this$0 -> a
    void <init>(proguard.optimize.peephole.InstructionSequenceReplacer) -> <init>
    void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction) -> a
    void visitTableSwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.TableSwitchInstruction) -> a
    void visitLookUpSwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.LookUpSwitchInstruction) -> a
    java.lang.String argumentAsString(proguard.classfile.ProgramClass,int,int) -> a
    void <init>(proguard.optimize.peephole.InstructionSequenceReplacer,byte) -> <init>
proguard.optimize.peephole.InstructionSequencesReplacer -> jf:
    void <init>(proguard.classfile.constant.Constant[],proguard.classfile.instruction.Instruction[][][],proguard.evaluation.BranchTargetFinder,proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.visitor.InstructionVisitor) -> <init>
    proguard.classfile.instruction.visitor.InstructionVisitor[] createInstructionSequenceReplacers(proguard.classfile.constant.Constant[],proguard.classfile.instruction.Instruction[][][],proguard.evaluation.BranchTargetFinder,proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.visitor.InstructionVisitor) -> a
proguard.optimize.peephole.LineNumberLinearizer -> jg:
    java.util.Stack enclosingLineNumbers -> a
    proguard.classfile.attribute.LineNumberInfo previousLineNumberInfo -> a
    int highestUsedLineNumber -> a
    int currentLineNumberShift -> b
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
    void visitLineNumberInfo$22557afc(proguard.classfile.attribute.LineNumberInfo) -> a
proguard.optimize.peephole.LineNumberLinearizer$MyLineNumberBlock -> jh:
    int lineNumberShift -> a
    int enclosingLineNumber -> b
    java.lang.String enclosingSource -> a
    void <init>(int,int,java.lang.String) -> <init>
proguard.optimize.peephole.MemberPrivatizer -> ji:
    proguard.classfile.visitor.MemberVisitor extraMemberVisitor -> a
    void <init>() -> <init>
    void <init>(proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
proguard.optimize.peephole.MethodFinalizer -> jj:
    proguard.classfile.visitor.MemberVisitor extraMemberVisitor -> a
    proguard.classfile.util.MemberFinder memberFinder -> a
    void <init>() -> <init>
    void <init>(proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
proguard.optimize.peephole.MethodInliner -> jk:
    int MAXIMUM_INLINED_CODE_LENGTH -> a
    int MAXIMUM_RESULTING_CODE_LENGTH_JSE -> b
    int MAXIMUM_RESULTING_CODE_LENGTH_JME -> c
    boolean microEdition -> a
    boolean allowAccessModification -> b
    boolean inlineSingleInvocations -> c
    proguard.classfile.instruction.visitor.InstructionVisitor extraInlinedInvocationVisitor -> a
    proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer -> a
    proguard.optimize.info.AccessMethodMarker accessMethodMarker -> a
    proguard.optimize.info.CatchExceptionMarker catchExceptionMarker -> a
    proguard.classfile.attribute.visitor.StackSizeComputer stackSizeComputer -> a
    proguard.classfile.ProgramClass targetClass -> a
    proguard.classfile.ProgramMethod targetMethod -> a
    proguard.classfile.editor.ConstantAdder constantAdder -> a
    proguard.classfile.editor.ExceptionInfoAdder exceptionInfoAdder -> a
    int estimatedResultingCodeLength -> d
    boolean inlining -> d
    java.util.Stack inliningMethods -> a
    boolean emptyInvokingStack -> e
    int uninitializedObjectCount -> e
    int variableOffset -> f
    boolean inlined -> f
    boolean inlinedAny -> g
    boolean copiedLineNumbers -> h
    java.lang.String source -> a
    int minimumLineNumberIndex -> g
    void <init>(boolean,boolean,boolean,proguard.classfile.instruction.visitor.InstructionVisitor) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
    void copyCode(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> b
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitAnyMethodrefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> b
    void visitAnyMember(proguard.classfile.Clazz,proguard.classfile.Member) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLineNumberInfo$22557afc(proguard.classfile.attribute.LineNumberInfo) -> a
    java.util.Set initializedSuperClasses(proguard.classfile.Clazz) -> a
    void <clinit>() -> <clinit>
proguard.optimize.peephole.PeepholeOptimizer -> jl:
    proguard.evaluation.BranchTargetFinder branchTargetFinder -> a
    proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor -> a
    proguard.classfile.instruction.visitor.InstructionVisitor instructionVisitor -> a
    void <init>(proguard.evaluation.BranchTargetFinder,proguard.classfile.editor.CodeAttributeEditor,proguard.classfile.instruction.visitor.InstructionVisitor) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
proguard.optimize.peephole.ReachableCodeMarker -> jm:
    boolean[] isReachable -> a
    boolean next -> a
    boolean evaluateExceptions -> b
    void <init>() -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitSimpleInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SimpleInstruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
    void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction) -> a
    void visitAnySwitchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.SwitchInstruction) -> a
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
    void markBranchTarget(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int) -> a
    void markCode(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int) -> b
proguard.optimize.peephole.RetargetedClassFilter -> jn:
    proguard.classfile.visitor.ClassVisitor retargetedClassVisitor -> a
    proguard.classfile.visitor.ClassVisitor otherClassVisitor -> b
    void <init>(proguard.classfile.visitor.ClassVisitor,proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.optimize.peephole.RetargetedInnerClassAttributeRemover -> jo:
    boolean retargeted -> a
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute) -> a
    void visitEnclosingMethodAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.EnclosingMethodAttribute) -> a
    void visitInnerClassesInfo(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesInfo) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void checkTarget(proguard.classfile.Clazz) -> b
proguard.optimize.peephole.TargetClassChanger -> jp:
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void visitAnyRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitMethodTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodTypeConstant) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitAnyAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.AnnotationsAttribute) -> a
    void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute) -> a
    void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> a
    void visitLocalVariableInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableInfo) -> a
    void visitLocalVariableTypeInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeInfo) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitAnyElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ElementValue) -> a
    void visitConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ConstantElementValue) -> a
    void visitEnumConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.EnumConstantElementValue) -> a
    void visitClassElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ClassElementValue) -> a
    void visitAnnotationElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.AnnotationElementValue) -> a
    void visitArrayElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ArrayElementValue) -> a
    void updateReferencedClasses(proguard.classfile.Clazz[]) -> a
    proguard.classfile.Clazz updateReferencedClass(proguard.classfile.Clazz) -> a
    proguard.classfile.Member updateReferencedMember(proguard.classfile.Member,java.lang.String,java.lang.String,proguard.classfile.Clazz) -> a
proguard.optimize.peephole.UnreachableCodeRemover -> jq:
    proguard.classfile.instruction.visitor.InstructionVisitor extraInstructionVisitor -> a
    proguard.optimize.peephole.ReachableCodeMarker reachableCodeMarker -> a
    proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor -> a
    void <init>() -> <init>
    void <init>(proguard.classfile.instruction.visitor.InstructionVisitor) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
proguard.optimize.peephole.UnreachableExceptionRemover -> jr:
    proguard.classfile.attribute.visitor.ExceptionInfoVisitor extraExceptionInfoVisitor -> a
    void <init>() -> <init>
    void <init>(proguard.classfile.attribute.visitor.ExceptionInfoVisitor) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
proguard.optimize.peephole.VariableShrinker -> js:
    proguard.classfile.visitor.MemberVisitor extraVariableMemberVisitor -> a
    proguard.optimize.info.VariableUsageMarker variableUsageMarker -> a
    proguard.classfile.editor.VariableEditor variableEditor -> a
    void <init>() -> <init>
    void <init>(proguard.classfile.visitor.MemberVisitor) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
proguard.optimize.peephole.VerticalClassMerger -> jt:
    boolean allowAccessModification -> a
    boolean mergeInterfacesAggressively -> b
    proguard.classfile.visitor.ClassVisitor extraClassVisitor -> a
    void <init>(boolean,boolean,proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
proguard.preverify.CodePreverifier -> ju:
    boolean microEdition -> a
    proguard.optimize.evaluation.PartialEvaluator partialEvaluator -> a
    proguard.optimize.evaluation.LivenessAnalyzer livenessAnalyzer -> a
    proguard.classfile.editor.CodeAttributeEditor codeAttributeEditor -> a
    void <init>(boolean) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    proguard.classfile.attribute.preverification.VerificationType[] correspondingVerificationTypes(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod,proguard.classfile.attribute.CodeAttribute,int,proguard.evaluation.TracedVariables) -> a
    proguard.classfile.attribute.preverification.VerificationType[] correspondingVerificationTypes(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod,proguard.classfile.attribute.CodeAttribute,int,proguard.evaluation.TracedStack) -> a
    proguard.classfile.attribute.preverification.VerificationType correspondingVerificationType$137f2e5e(proguard.classfile.ProgramClass,proguard.classfile.attribute.CodeAttribute,int,boolean,proguard.evaluation.value.Value,proguard.evaluation.value.Value) -> a
    void compressStackMapFrames(proguard.classfile.attribute.preverification.VerificationType[],java.util.List) -> a
    boolean equalVerificationTypes(proguard.classfile.attribute.preverification.VerificationType[],proguard.classfile.attribute.preverification.VerificationType[],int) -> a
proguard.preverify.CodeSubroutineInliner -> jv:
    proguard.evaluation.BranchTargetFinder branchTargetFinder -> a
    proguard.classfile.editor.CodeAttributeComposer codeAttributeComposer -> a
    proguard.classfile.attribute.visitor.ExceptionInfoVisitor subroutineExceptionInliner -> a
    int clipStart -> a
    int clipEnd -> b
    void <init>() -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitVariableInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.VariableInstruction) -> a
    void visitBranchInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.BranchInstruction) -> a
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
proguard.preverify.Preverifier -> jw:
    proguard.Configuration configuration -> a
    void <init>(proguard.Configuration) -> <init>
proguard.preverify.SubroutineInliner -> jx:
    proguard.Configuration configuration -> a
    void <init>(proguard.Configuration) -> <init>
proguard.shrink.AnnotationUsageMarker -> jy:
    proguard.shrink.UsageMarker usageMarker -> a
    boolean attributeUsed -> a
    boolean annotationUsed -> b
    boolean allClassesUsed -> c
    boolean methodUsed -> d
    void <init>(proguard.shrink.UsageMarker) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitAnyAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.AnnotationsAttribute) -> a
    void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute) -> a
    void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ConstantElementValue) -> a
    void visitEnumConstantElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.EnumConstantElementValue) -> a
    void visitClassElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ClassElementValue) -> a
    void visitAnnotationElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.AnnotationElementValue) -> a
    void visitArrayElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ArrayElementValue) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    boolean isReferencedMethodUsed(proguard.classfile.attribute.annotation.ElementValue) -> a
    void markConstant(proguard.classfile.Clazz,int) -> a
proguard.shrink.ClassShrinker -> jz:
    proguard.shrink.UsageMarker usageMarker -> a
    int[] constantIndexMap -> a
    int[] bootstrapMethodIndexMap -> b
    proguard.classfile.editor.ConstantPoolRemapper constantPoolRemapper -> a
    proguard.classfile.editor.BootstrapMethodRemapper bootstrapMethodRemapper -> a
    void <init>(proguard.shrink.UsageMarker) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramMember(proguard.classfile.ProgramClass,proguard.classfile.ProgramMember) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitBootstrapMethodsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodsAttribute) -> a
    void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute) -> a
    void visitEnclosingMethodAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.EnclosingMethodAttribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitAnyAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.AnnotationsAttribute) -> a
    void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute) -> a
    void visitAnnotation(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation) -> a
    void visitAnyElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ElementValue) -> a
    void visitAnnotationElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.AnnotationElementValue) -> a
    void visitArrayElementValue(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.Annotation,proguard.classfile.attribute.annotation.ArrayElementValue) -> a
    boolean[] shrinkFlags(proguard.classfile.constant.Constant[],int[],int) -> a
    proguard.classfile.Clazz[] shrinkToNewArray(proguard.classfile.Clazz[]) -> a
    int shrinkArray(proguard.classfile.VisitorAccepter[],int) -> a
proguard.shrink.ClassShrinker$MySignatureCleaner -> jA:
    proguard.shrink.ClassShrinker this$0 -> a
    void <init>(proguard.shrink.ClassShrinker) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute) -> a
    void <init>(proguard.shrink.ClassShrinker,byte) -> <init>
proguard.shrink.InnerUsageMarker -> jB:
    proguard.shrink.UsageMarker usageMarker -> a
    boolean attributeUsed -> a
    boolean classUsed -> b
    void <init>(proguard.shrink.UsageMarker) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute) -> a
    void visitInnerClassesInfo(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesInfo) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitUtf8Constant(proguard.classfile.Clazz,proguard.classfile.constant.Utf8Constant) -> a
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void markConstant(proguard.classfile.Clazz,int) -> a
proguard.shrink.InterfaceUsageMarker -> jC:
    proguard.shrink.UsageMarker usageMarker -> a
    boolean used -> a
    boolean anyUsed -> b
    void <init>(proguard.shrink.UsageMarker) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitUtf8Constant(proguard.classfile.Clazz,proguard.classfile.constant.Utf8Constant) -> a
proguard.shrink.LocalVariableTypeUsageMarker -> jD:
    proguard.shrink.UsageMarker usageMarker -> a
    boolean tableUsed -> a
    boolean variableInfoUsed -> b
    void <init>(proguard.shrink.UsageMarker) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitLocalVariableInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableInfo) -> a
    void visitLocalVariableTypeInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeInfo) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitAnyConstant(proguard.classfile.Clazz,proguard.classfile.constant.Constant) -> a
    void markConstant(proguard.classfile.Clazz,int) -> a
proguard.shrink.ShortestUsageMark -> jE:
    boolean certain -> a
    java.lang.String reason -> a
    int depth -> a
    proguard.classfile.Clazz clazz -> a
    proguard.classfile.Member member -> a
    void <init>(java.lang.String) -> <init>
    void <init>(proguard.shrink.ShortestUsageMark,java.lang.String,int,proguard.classfile.Clazz) -> <init>
    void <init>(proguard.shrink.ShortestUsageMark,java.lang.String,int,proguard.classfile.Clazz,proguard.classfile.Member) -> <init>
    void <init>(proguard.shrink.ShortestUsageMark,boolean) -> <init>
    boolean isShorter(proguard.shrink.ShortestUsageMark) -> a
    void acceptClassVisitor(proguard.classfile.visitor.ClassVisitor) -> a
    void acceptMemberVisitor(proguard.classfile.visitor.MemberVisitor) -> a
    java.lang.String toString() -> toString
proguard.shrink.ShortestUsageMarker -> jF:
    proguard.shrink.ShortestUsageMark INITIAL_MARK -> a
    proguard.shrink.ShortestUsageMark currentUsageMark -> b
    void <init>() -> <init>
    void markProgramClassBody(proguard.classfile.ProgramClass) -> b
    void markProgramFieldBody(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> b
    void markProgramMethodBody(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> b
    void markMethodHierarchy(proguard.classfile.Clazz,proguard.classfile.Method) -> a
    void markAsUsed(proguard.classfile.VisitorAccepter) -> a
    boolean shouldBeMarkedAsUsed(proguard.classfile.VisitorAccepter) -> a
    boolean isUsed(proguard.classfile.VisitorAccepter) -> b
    void markAsPossiblyUsed(proguard.classfile.VisitorAccepter) -> b
    boolean shouldBeMarkedAsPossiblyUsed(proguard.classfile.VisitorAccepter) -> c
    boolean isPossiblyUsed(proguard.classfile.VisitorAccepter) -> d
    proguard.shrink.ShortestUsageMark getShortestUsageMark(proguard.classfile.VisitorAccepter) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitLocalVariableTypeInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeInfo) -> a
    void visitLocalVariableInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableInfo) -> a
    void visitParameterInfo(proguard.classfile.Clazz,proguard.classfile.Method,int,proguard.classfile.attribute.ParameterInfo) -> a
    void visitObjectType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.ObjectType) -> a
    void visitAnyVerificationType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.VerificationType) -> a
    void visitFullFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.FullFrame) -> a
    void visitMoreZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.MoreZeroFrame) -> a
    void visitSameOneFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.SameOneFrame) -> a
    void visitAnyStackMapFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.StackMapFrame) -> a
    void visitInnerClassesInfo(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesInfo) -> a
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
    void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> a
    void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute) -> a
    void visitAnyAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.AnnotationsAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
    void visitStackMapTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapTableAttribute) -> a
    void visitStackMapAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapAttribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitExceptionsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.ExceptionsAttribute) -> a
    void visitMethodParametersAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.MethodParametersAttribute) -> a
    void visitConstantValueAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.ConstantValueAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitEnclosingMethodAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.EnclosingMethodAttribute) -> a
    void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute) -> a
    void visitSourceDirAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceDirAttribute) -> a
    void visitSourceFileAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceFileAttribute) -> a
    void visitBootstrapMethodsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodsAttribute) -> a
    void visitUnknownAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.UnknownAttribute) -> a
    void visitNameAndTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.NameAndTypeConstant) -> a
    void visitMethodTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodTypeConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitAnyRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> a
    void visitMethodHandleConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodHandleConstant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void visitUtf8Constant(proguard.classfile.Clazz,proguard.classfile.constant.Utf8Constant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitDoubleConstant(proguard.classfile.Clazz,proguard.classfile.constant.DoubleConstant) -> a
    void visitFloatConstant(proguard.classfile.Clazz,proguard.classfile.constant.FloatConstant) -> a
    void visitLongConstant(proguard.classfile.Clazz,proguard.classfile.constant.LongConstant) -> a
    void visitIntegerConstant(proguard.classfile.Clazz,proguard.classfile.constant.IntegerConstant) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void <clinit>() -> <clinit>
proguard.shrink.ShortestUsageMarker$MyRecursiveCauseChecker -> jG:
    boolean isRecursing -> a
    proguard.shrink.ShortestUsageMarker this$0 -> a
    void <init>(proguard.shrink.ShortestUsageMarker) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    void checkCause(proguard.classfile.VisitorAccepter) -> a
    void <init>(proguard.shrink.ShortestUsageMarker,byte) -> <init>
proguard.shrink.ShortestUsagePrinter -> jH:
    proguard.shrink.ShortestUsageMarker shortestUsageMarker -> a
    boolean verbose -> a
    java.io.PrintStream ps -> a
    void <init>(proguard.shrink.ShortestUsageMarker,boolean) -> <init>
    void <init>(proguard.shrink.ShortestUsageMarker,boolean,java.io.PrintStream) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
    void printReason(proguard.classfile.VisitorAccepter) -> a
proguard.shrink.Shrinker -> jI:
    proguard.Configuration configuration -> a
    void <init>(proguard.Configuration) -> <init>
proguard.shrink.UsageMarker -> jJ:
    java.lang.Object POSSIBLY_USED -> a
    java.lang.Object USED -> b
    proguard.shrink.UsageMarker$MyInterfaceUsageMarker interfaceUsageMarker -> a
    proguard.shrink.UsageMarker$MyDefaultMethodUsageMarker defaultMethodUsageMarker -> a
    proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker possiblyUsedMemberUsageMarker -> a
    proguard.classfile.visitor.MemberVisitor nonEmptyMethodUsageMarker -> a
    proguard.classfile.constant.visitor.ConstantVisitor parameterlessConstructorMarker -> a
    void <init>() -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void markProgramClassBody(proguard.classfile.ProgramClass) -> b
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitLibraryField(proguard.classfile.LibraryClass,proguard.classfile.LibraryField) -> a
    void visitLibraryMethod(proguard.classfile.LibraryClass,proguard.classfile.LibraryMethod) -> a
    void markProgramFieldBody(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> b
    void markProgramMethodBody(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> b
    void markMethodHierarchy(proguard.classfile.Clazz,proguard.classfile.Method) -> a
    void visitIntegerConstant(proguard.classfile.Clazz,proguard.classfile.constant.IntegerConstant) -> a
    void visitLongConstant(proguard.classfile.Clazz,proguard.classfile.constant.LongConstant) -> a
    void visitFloatConstant(proguard.classfile.Clazz,proguard.classfile.constant.FloatConstant) -> a
    void visitDoubleConstant(proguard.classfile.Clazz,proguard.classfile.constant.DoubleConstant) -> a
    void visitStringConstant(proguard.classfile.Clazz,proguard.classfile.constant.StringConstant) -> a
    void visitUtf8Constant(proguard.classfile.Clazz,proguard.classfile.constant.Utf8Constant) -> a
    void visitInvokeDynamicConstant(proguard.classfile.Clazz,proguard.classfile.constant.InvokeDynamicConstant) -> a
    void visitMethodHandleConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodHandleConstant) -> a
    void visitAnyRefConstant(proguard.classfile.Clazz,proguard.classfile.constant.RefConstant) -> a
    void visitClassConstant(proguard.classfile.Clazz,proguard.classfile.constant.ClassConstant) -> a
    void visitMethodTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.MethodTypeConstant) -> a
    void visitNameAndTypeConstant(proguard.classfile.Clazz,proguard.classfile.constant.NameAndTypeConstant) -> a
    void visitUnknownAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.UnknownAttribute) -> a
    void visitBootstrapMethodsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodsAttribute) -> a
    void visitSourceFileAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceFileAttribute) -> a
    void visitSourceDirAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SourceDirAttribute) -> a
    void visitInnerClassesAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesAttribute) -> a
    void visitEnclosingMethodAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.EnclosingMethodAttribute) -> a
    void visitDeprecatedAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.DeprecatedAttribute) -> a
    void visitSyntheticAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SyntheticAttribute) -> a
    void visitSignatureAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.SignatureAttribute) -> a
    void visitConstantValueAttribute(proguard.classfile.Clazz,proguard.classfile.Field,proguard.classfile.attribute.ConstantValueAttribute) -> a
    void visitMethodParametersAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.MethodParametersAttribute) -> a
    void visitExceptionsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.ExceptionsAttribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitStackMapAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapAttribute) -> a
    void visitStackMapTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.preverification.StackMapTableAttribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
    void visitLocalVariableTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTableAttribute) -> a
    void visitLocalVariableTypeTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeTableAttribute) -> a
    void visitAnyAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.annotation.AnnotationsAttribute) -> a
    void visitAnyParameterAnnotationsAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.ParameterAnnotationsAttribute) -> a
    void visitAnnotationDefaultAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.annotation.AnnotationDefaultAttribute) -> a
    void visitExceptionInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.ExceptionInfo) -> a
    void visitInnerClassesInfo(proguard.classfile.Clazz,proguard.classfile.attribute.InnerClassesInfo) -> a
    void visitAnyStackMapFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.StackMapFrame) -> a
    void visitSameOneFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.SameOneFrame) -> a
    void visitMoreZeroFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.MoreZeroFrame) -> a
    void visitFullFrame(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.FullFrame) -> a
    void visitAnyVerificationType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.VerificationType) -> a
    void visitObjectType(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.attribute.preverification.ObjectType) -> a
    void visitParameterInfo(proguard.classfile.Clazz,proguard.classfile.Method,int,proguard.classfile.attribute.ParameterInfo) -> a
    void visitLocalVariableInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableInfo) -> a
    void visitLocalVariableTypeInfo(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LocalVariableTypeInfo) -> a
    void visitAnyInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.Instruction) -> a
    void visitConstantInstruction(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,int,proguard.classfile.instruction.ConstantInstruction) -> a
    void markAsUsed(proguard.classfile.VisitorAccepter) -> a
    boolean shouldBeMarkedAsUsed(proguard.classfile.VisitorAccepter) -> a
    boolean isUsed(proguard.classfile.VisitorAccepter) -> b
    void markAsPossiblyUsed(proguard.classfile.VisitorAccepter) -> b
    boolean shouldBeMarkedAsPossiblyUsed(proguard.classfile.VisitorAccepter) -> c
    boolean isPossiblyUsed(proguard.classfile.VisitorAccepter) -> d
    void markAsUnused(proguard.classfile.VisitorAccepter) -> c
    void markConstant(proguard.classfile.Clazz,int) -> a
    void access$400(proguard.shrink.UsageMarker,proguard.classfile.Clazz,int) -> a
    void <clinit>() -> <clinit>
proguard.shrink.UsageMarker$MyBootStrapMethodUsageMarker -> jK:
    int bootstrapMethodIndex -> a
    proguard.shrink.UsageMarker this$0 -> a
    void <init>(proguard.shrink.UsageMarker,int) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitBootstrapMethodsAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodsAttribute) -> a
    void visitBootstrapMethodInfo(proguard.classfile.Clazz,proguard.classfile.attribute.BootstrapMethodInfo) -> a
    void <init>(proguard.shrink.UsageMarker,int,byte) -> <init>
proguard.shrink.UsageMarker$MyDefaultMethodUsageMarker -> jL:
    proguard.shrink.UsageMarker this$0 -> a
    void <init>(proguard.shrink.UsageMarker) -> <init>
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void <init>(proguard.shrink.UsageMarker,byte) -> <init>
proguard.shrink.UsageMarker$MyInterfaceUsageMarker -> jM:
    proguard.shrink.UsageMarker this$0 -> a
    void <init>(proguard.shrink.UsageMarker) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
    void <init>(proguard.shrink.UsageMarker,byte) -> <init>
proguard.shrink.UsageMarker$MyNonEmptyMethodUsageMarker -> jN:
    proguard.shrink.UsageMarker this$0 -> a
    void <init>(proguard.shrink.UsageMarker) -> <init>
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void <init>(proguard.shrink.UsageMarker,byte) -> <init>
proguard.shrink.UsageMarker$MyPossiblyUsedMemberUsageMarker -> jO:
    proguard.shrink.UsageMarker this$0 -> a
    void <init>(proguard.shrink.UsageMarker) -> <init>
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void <init>(proguard.shrink.UsageMarker,byte) -> <init>
proguard.shrink.UsagePrinter -> jP:
    proguard.shrink.UsageMarker usageMarker -> a
    boolean printUnusedItems -> a
    java.io.PrintStream ps -> a
    java.lang.String className -> a
    void <init>(proguard.shrink.UsageMarker,boolean,java.io.PrintStream) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitProgramField(proguard.classfile.ProgramClass,proguard.classfile.ProgramField) -> a
    void visitProgramMethod(proguard.classfile.ProgramClass,proguard.classfile.ProgramMethod) -> a
    void visitAnyAttribute(proguard.classfile.Clazz,proguard.classfile.attribute.Attribute) -> a
    void visitCodeAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute) -> a
    void visitLineNumberTableAttribute(proguard.classfile.Clazz,proguard.classfile.Method,proguard.classfile.attribute.CodeAttribute,proguard.classfile.attribute.LineNumberTableAttribute) -> a
    void printClassNameHeader() -> b
proguard.shrink.UsedClassFilter -> jQ:
    proguard.shrink.UsageMarker usageMarker -> a
    proguard.classfile.visitor.ClassVisitor classVisitor -> a
    void <init>(proguard.shrink.UsageMarker,proguard.classfile.visitor.ClassVisitor) -> <init>
    void visitProgramClass(proguard.classfile.ProgramClass) -> a
    void visitLibraryClass(proguard.classfile.LibraryClass) -> a
proguard.util.AndMatcher -> jR:
    proguard.util.StringMatcher matcher1 -> a
    proguard.util.StringMatcher matcher2 -> b
    void <init>(proguard.util.StringMatcher,proguard.util.StringMatcher) -> <init>
    boolean matches(java.lang.String,int,int) -> a
proguard.util.ClassNameParser -> jS:
    char[] INTERNAL_PRIMITIVE_TYPES -> a
    void <init>() -> <init>
    proguard.util.StringMatcher parse(java.lang.String) -> a
    proguard.util.VariableStringMatcher createAnyTypeMatcher(proguard.util.StringMatcher) -> a
    void <clinit>() -> <clinit>
proguard.util.ConstantMatcher -> jT:
    boolean matches -> a
    void <init>(boolean) -> <init>
    boolean matches(java.lang.String,int,int) -> a
proguard.util.EmptyStringMatcher -> jU:
    void <init>() -> <init>
    boolean matches(java.lang.String,int,int) -> a
proguard.util.ExtensionMatcher -> jV:
    java.lang.String extension -> a
    void <init>(java.lang.String) -> <init>
    boolean matches(java.lang.String,int,int) -> a
proguard.util.FileNameParser -> jW:
    void <init>() -> <init>
    proguard.util.StringMatcher parse(java.lang.String) -> a
proguard.util.FixedStringMatcher -> jX:
    java.lang.String fixedString -> a
    proguard.util.StringMatcher nextMatcher -> a
    void <init>(java.lang.String) -> <init>
    void <init>(java.lang.String,proguard.util.StringMatcher) -> <init>
    boolean matches(java.lang.String,int,int) -> a
proguard.util.ListParser -> jY:
    proguard.util.StringParser stringParser -> a
    void <init>(proguard.util.StringParser) -> <init>
    proguard.util.StringMatcher parse(java.lang.String) -> a
    proguard.util.StringMatcher parse(java.util.List) -> a
    boolean isNegated(java.lang.String) -> a
proguard.util.NameParser -> jZ:
    void <init>() -> <init>
    proguard.util.StringMatcher parse(java.lang.String) -> a
proguard.util.NotMatcher -> ka:
    proguard.util.StringMatcher matcher -> a
    void <init>(proguard.util.StringMatcher) -> <init>
    boolean matches(java.lang.String,int,int) -> a
proguard.util.OrMatcher -> kb:
    proguard.util.StringMatcher matcher1 -> a
    proguard.util.StringMatcher matcher2 -> b
    void <init>(proguard.util.StringMatcher,proguard.util.StringMatcher) -> <init>
    boolean matches(java.lang.String,int,int) -> a
proguard.util.SettableMatcher -> kc:
    proguard.util.StringMatcher matcher -> a
    void <init>() -> <init>
    boolean matches(java.lang.String,int,int) -> a
proguard.util.StringMatcher -> kd:
    void <init>() -> <init>
    boolean matches(java.lang.String) -> a
    boolean matches(java.lang.String,int,int) -> a
proguard.util.StringParser -> ke:
    proguard.util.StringMatcher parse(java.lang.String) -> a
proguard.util.VariableStringMatcher -> kf:
    char[] allowedCharacters -> a
    char[] disallowedCharacters -> b
    int minimumLength -> a
    int maximumLength -> b
    proguard.util.StringMatcher nextMatcher -> a
    void <init>(char[],char[],int,int,proguard.util.StringMatcher) -> <init>
    boolean matches(java.lang.String,int,int) -> a
    boolean isAllowedCharacter(char) -> a
